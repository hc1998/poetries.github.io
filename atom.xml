<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2018-02-04T08:40:54.863Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>梳理Immutable常用API</title>
    <link href="http://blog.poetries.top/2018/02/04/immutable-api/"/>
    <id>http://blog.poetries.top/2018/02/04/immutable-api/</id>
    <published>2018-02-04T08:10:24.000Z</published>
    <updated>2018-02-04T08:40:54.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、fromJS"><a href="#一、fromJS" class="headerlink" title="一、fromJS"></a>一、fromJS</h2><ul><li>作用：是最最常用的将原生JS数据转换为<code>ImmutableJS</code>数据的转换方法,默认将原生<code>JS</code>的<code>Array</code>转为<code>List</code>，<code>Object</code>转为<code>Map</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS(&#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    b: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    c: <span class="number">40</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 得到</span></span><br><span class="line"><span class="built_in">Map</span> &#123;</span><br><span class="line">  <span class="string">"a"</span>: <span class="built_in">Map</span> &#123;</span><br><span class="line">    <span class="string">"b"</span>: List [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">"c"</span>: <span class="number">40</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见</span></span><br><span class="line"><span class="keyword">const</span> t1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不常用</span></span><br><span class="line"><span class="keyword">const</span> t2 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定制转换方式，下这种就是将Array转换为List，Object转换为Map</span></span><br><span class="line">    <span class="keyword">const</span> isIndexed = Immutable.Iterable.isIndexed(value);</span><br><span class="line">    <span class="keyword">return</span> isIndexed ? value.toList() : value.toOrderedMap();</span><br><span class="line">    <span class="comment">// true, "b", &#123;b: [10, 20, 30]&#125;</span></span><br><span class="line">    <span class="comment">// false, "a", &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;</span></span><br><span class="line">    <span class="comment">// false, "", &#123;"": &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;&#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t2);</span><br></pre></td></tr></table></figure><h2 id="二、toJS"><a href="#二、toJS" class="headerlink" title="二、toJS"></a>二、toJS</h2><ul><li>作用：将一个<code>Immutable</code>数据转换为<code>JS</code>类型的数据</li><li>用法：<code>value.toJS()</code></li></ul><h2 id="三、is"><a href="#三、is" class="headerlink" title="三、is"></a>三、is</h2><ul><li>作用：对两个对象进行比较</li><li>用法：<code>is(map1,map2)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>, is &#125; <span class="keyword">from</span> <span class="string">'immutable'</span></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line">map1 === map2   <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(map1, map2) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">is(map1, map2) <span class="comment">//  true 只检测值是否相等</span></span><br></pre></td></tr></table></figure><h2 id="四、List-和-Map"><a href="#四、List-和-Map" class="headerlink" title="四、List 和 Map"></a>四、List 和 Map</h2><h3 id="4-1-创建"><a href="#4-1-创建" class="headerlink" title="4.1 创建"></a>4.1 创建</h3><ul><li><code>List</code> 有序索引密集的集合，和<code>JS</code>中的<code>Array</code>很像 </li><li><code>Map</code> 无序索引集，类似<code>JavaScript</code>中的<code>Object</code></li></ul><h3 id="4-2-判断"><a href="#4-2-判断" class="headerlink" title="4.2 判断"></a>4.2 判断</h3><ul><li><code>List.isList()</code> 和 <code>Map.isMap()</code> 判断一个数据结构是不是<code>List/Map</code>类型</li></ul><h3 id="4-3-长度"><a href="#4-3-长度" class="headerlink" title="4.3 长度"></a>4.3 长度</h3><h4 id="4-3-1-size-获取List-Map的长度"><a href="#4-3-1-size-获取List-Map的长度" class="headerlink" title="4.3.1 size 获取List/Map的长度**"></a>4.3.1 <code>size</code> 获取<code>List/Map</code>的长度**</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(List([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).size);<span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).size);<span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).size);<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.of(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, <span class="number">2</span>, [<span class="number">3</span>], <span class="number">4</span>).size);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-count"><a href="#4-3-2-count" class="headerlink" title="4.3.2 count()"></a>4.3.2 count()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以定制条件，来确定大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">key1</span>: <span class="number">34</span>&#125;).count(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 1 value大于3的有两个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以制定条件，来确定 大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 2 大于3的有两个</span></span><br></pre></td></tr></table></figure><h3 id="4-4-数据读取"><a href="#4-4-数据读取" class="headerlink" title="4.4 数据读取"></a>4.4 数据读取</h3><h4 id="4-4-1-get-、-getIn"><a href="#4-4-1-get-、-getIn" class="headerlink" title="4.4.1 get() 、 getIn()"></a>4.4.1 <code>get() 、 getIn()</code></h4><blockquote><p>获取数据结构中的数据</p></blockquote><h4 id="4-4-2-has-、-hasIn"><a href="#4-4-2-has-、-hasIn" class="headerlink" title="4.4.2 has() 、 hasIn()"></a>4.4.2 <code>has() 、 hasIn()</code></h4><blockquote><p>判断是否存在某一个<code>key</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).has(<span class="string">'0'</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).has(<span class="string">'0'</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).hasIn([<span class="number">3</span>,<span class="string">'b'</span>]) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="4-4-3-includes"><a href="#4-4-3-includes" class="headerlink" title="4.4.3 includes()"></a>4.4.3 <code>includes()</code></h4><blockquote><p>判断是否存在某一个<code>value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="number">2</span>); <span class="comment">//true</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="string">'2'</span>); <span class="comment">//false 不包含字符2</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(<span class="number">5</span>); <span class="comment">//false </span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;) <span class="comment">//false</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).includes(Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="4-4-4-first-、-last"><a href="#4-4-4-first-、-last" class="headerlink" title="4.4.4 first() 、 last()"></a>4.4.4 <code>first() 、 last()</code></h4><blockquote><p>用来获取第一个元素或者最后一个元素，若没有则返回<code>undefined</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).first()<span class="comment">//1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">b</span>:<span class="number">5</span>&#125;]).last()<span class="comment">//&#123;a:4,b:5&#125;</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">3</span>,<span class="attr">e</span>:<span class="number">4</span>&#125;&#125;).first() <span class="comment">//1</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">3</span>,<span class="attr">e</span>:<span class="number">4</span>&#125;&#125;).first() <span class="comment">//&#123;d:3,e:4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-数据修改"><a href="#4-5-数据修改" class="headerlink" title="4.5 数据修改"></a>4.5 数据修改</h3><h4 id="4-5-1-set"><a href="#4-5-1-set" class="headerlink" title="4.5.1 set()"></a>4.5.1 <code>set()</code></h4><blockquote><p>设置第一层<code>key</code>、<code>index</code>的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="built_in">Map</span></span><br><span class="line"><span class="comment">// 将 key 位置的元素替换为 value</span></span><br><span class="line"><span class="keyword">const</span> $obj1 = <span class="built_in">Map</span>(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'a'</span>, <span class="number">0</span>).toJS()); <span class="comment">// &#123;a: 0, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'e'</span>, <span class="number">99</span>).toJS());  <span class="comment">// &#123;a: 1, b: 2, c: 3, d: 444, e: 99&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 将 index 位置的元素替换为 value，即使索引越界也是安全的, 空位 undefined</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">-1</span>, <span class="number">0</span>).toJS()); <span class="comment">// [1, 2, 0]  注意-1 等效于 $arr1.set($arr1.size + -1, 0)</span></span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">4</span>, <span class="number">0</span>).toJS());  <span class="comment">// [ 1, 2, 3, undefined, 0 ]  空位置为了undefined</span></span><br></pre></td></tr></table></figure><h4 id="4-5-2-setIn"><a href="#4-5-2-setIn" class="headerlink" title="4.5.2 setIn()"></a>4.5.2 <code>setIn()</code></h4><blockquote><p>设置深层结构中某属性的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="4-5-3-deleteIn"><a href="#4-5-3-deleteIn" class="headerlink" title="4.5.3 deleteIn()"></a>4.5.3 <code>deleteIn()</code></h4><blockquote><p>用来删除深层数据，用法参考<code>setIn</code></p></blockquote><h4 id="4-5-4-更新-update"><a href="#4-5-4-更新-update" class="headerlink" title="4.5.4 更新 update()"></a>4.5.4 <code>更新 update()</code></h4><blockquote><p>对对象中的某个属性进行更新，可对原数据进行相关操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////List</span></span><br><span class="line"><span class="keyword">const</span> list = List([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ])</span><br><span class="line"><span class="keyword">const</span> result = list.update(<span class="number">2</span>, val =&gt; val.toUpperCase())</span><br><span class="line"></span><br><span class="line"><span class="comment">///Map</span></span><br><span class="line"><span class="keyword">const</span> aMap = <span class="built_in">Map</span>(&#123; <span class="attr">key</span>: <span class="string">'value'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> newMap = aMap.update(<span class="string">'key'</span>, value =&gt; value + value)</span><br></pre></td></tr></table></figure><h4 id="4-5-5-clear"><a href="#4-5-5-clear" class="headerlink" title="4.5.5 clear()"></a>4.5.5 <code>clear()</code></h4><blockquote><p>清除所有数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123; <span class="attr">key</span>: <span class="string">'value'</span> &#125;).clear()  <span class="comment">//Map</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).clear()   <span class="comment">// List</span></span><br></pre></td></tr></table></figure><h3 id="4-6-List中的删除与插入"><a href="#4-6-List中的删除与插入" class="headerlink" title="4.6 List中的删除与插入"></a>4.6 List中的删除与插入</h3><h4 id="4-6-1-数组方法"><a href="#4-6-1-数组方法" class="headerlink" title="4.6.1 数组方法"></a>4.6.1 数组方法</h4><blockquote><p><code>List</code>对应的数据结构是<code>js</code>中的数组，所以数组的一些方法在<code>Immutable</code>中也是通用的，比如<code>push</code>，<code>pop</code>,<code>shift</code>，<code>unshift</code>，<code>insert</code></p></blockquote><ul><li><code>push()</code>：在<code>List</code>末尾插入一个元素</li><li><code>pop()</code>: 在<code>List</code>末尾删除一个元素</li><li><code>unshift</code>: 在<code>List</code>首部插入一个元素</li><li><code>shift</code>: 在<code>List</code>首部删除一个元素</li><li><code>insert</code>：在<code>List</code>的<code>index</code>处插入元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).insert(<span class="number">6</span>, <span class="number">5</span>) <span class="comment">//List [ 0, 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).push(<span class="number">5</span>) <span class="comment">// List [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).pop() <span class="comment">// List[ 1, 2, 3 ]</span></span><br><span class="line">List([ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).unshift(<span class="number">1</span>) <span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br><span class="line">List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]).shift() <span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure><h3 id="4-7-关于merge"><a href="#4-7-关于merge" class="headerlink" title="4.7 关于merge"></a>4.7 关于merge</h3><ul><li><code>merge</code> 浅合并，新数据与旧数据对比，旧数据中不存在的属性直接添加，旧数据中已存在的属性用新数据中的覆盖</li><li><code>mergrWith</code> 自定义浅合并，可自行设置某些属性的值</li><li><code>mergeIn</code> 对深层数据进行浅合并</li><li><code>mergeDeep</code> 深合并，新旧数据中同时存在的的属性为新旧数据合并之后的数据</li><li><code>mergeDeepIn</code>  对深层数据进行深合并</li><li><code>mergrDeepWith</code>  自定义深合并，可自行设置某些属性的值</li></ul><blockquote><p>这里用一段示例彻底搞懂<code>merge</code>，此示例为<code>Map</code>结构，<code>List</code>与<code>Map</code>原理相同</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Map1 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">333</span>,<span class="attr">e</span>:<span class="number">444</span>&#125;&#125;);</span><br><span class="line"> <span class="keyword">const</span> Map2 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">e</span>:<span class="number">444</span>,<span class="attr">f</span>:<span class="number">555</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> Map3 = Map1.merge(Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:111,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br><span class="line"> <span class="keyword">const</span> Map4 = Map1.mergeDeep(Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:111,b:222,c:&#123;d:333,e:444,f:555&#125;&#125;</span></span><br><span class="line"> <span class="keyword">const</span> Map5 = Map1.mergeWith(<span class="function">(<span class="params">oldData,newData,key</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">'a'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newData</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:666,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-8-序列算法"><a href="#4-8-序列算法" class="headerlink" title="4.8 序列算法"></a>4.8 序列算法</h3><h4 id="4-8-1-concat"><a href="#4-8-1-concat" class="headerlink" title="4.8.1 concat()"></a>4.8.1 <code>concat()</code></h4><blockquote><p>对象的拼接，用法与<code>js</code>数组中的<code>concat()</code>相同，返回一个新的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> List = list1.concat(list2)</span><br></pre></td></tr></table></figure><h4 id="4-8-2-map"><a href="#4-8-2-map" class="headerlink" title="4.8.2 map()"></a>4.8.2 <code>map()</code></h4><blockquote><p>遍历整个对象，对<code>Map/List</code>元素进行操作，返回一个新的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).map(<span class="function"><span class="params">val</span>=&gt;</span><span class="number">10</span>*val)</span><br><span class="line"><span class="comment">//Map&#123;a:10,b:20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-3-mapKey"><a href="#4-8-3-mapKey" class="headerlink" title="4.8.3 mapKey()"></a>4.8.3 mapKey()</h4><blockquote><p><code>Map</code>特有的<code>mapKey()</code> 遍历整个对象，对<code>Map</code>元素的<code>key</code>进行操作，返回一个新的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).mapKey(<span class="function"><span class="params">val</span>=&gt;</span>val+<span class="string">'l'</span>)</span><br><span class="line"><span class="comment">//Map&#123;al:10,bl:20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-4-mapEntries"><a href="#4-8-4-mapEntries" class="headerlink" title="4.8.4 mapEntries"></a>4.8.4 mapEntries</h4><blockquote><p><code>Map特有的mapEntries()</code>  遍历整个对象，对<code>Map</code>元素的<code>key</code>和<code>value</code>同时进行操作，返回一个新的对象。<code>Map</code>的<code>map()</code>也可实现此功能</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).map(<span class="function">(<span class="params">key,val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [key+<span class="string">'l'</span>,val*<span class="number">10</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map&#123;al:10,bl:20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-5-filter"><a href="#4-8-5-filter" class="headerlink" title="4.8.5 filter"></a>4.8.5 filter</h4><blockquote><ul><li><code>过滤 filter</code> 返回一个新的对象，包括所有满足过滤条件的元素</li><li>还有一个<code>filterNot()</code>方法，与此方法正好相反</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;).filter(<span class="function">(<span class="params">key,val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val == <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map&#123;b:2&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-6-reverse"><a href="#4-8-6-reverse" class="headerlink" title="4.8.6 reverse"></a>4.8.6 reverse</h4><blockquote><p>作用：将数据的结构进行反转</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).reverse(); <span class="comment">// List [5,4,3,2,1]</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:&#123;<span class="attr">c</span>:<span class="number">2</span>,<span class="attr">d</span>:<span class="number">3</span>&#125;,<span class="attr">e</span>:<span class="number">4</span>&#125;).recerse();</span><br><span class="line"><span class="comment">//Map &#123;e:4,b:&#123;c:2,d:3&#125;,a:1&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-7-sort-amp-sortBy"><a href="#4-8-7-sort-amp-sortBy" class="headerlink" title="4.8.7 sort &amp; sortBy"></a>4.8.7 sort &amp; sortBy</h4><blockquote><p><code>排序 sort &amp; sortBy</code> 作用：对数据结构进行排序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///List</span></span><br><span class="line">Immutable.fromJS([<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>]).sort()</span><br><span class="line"><span class="comment">// List [1,2,3,4,5,6]</span></span><br><span class="line">Immutable.fromJS([<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>]).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// List [1,2,3,4,5,6]</span></span><br><span class="line">Immutable.fromJS([&#123;<span class="attr">a</span>:<span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;]).sortBy(<span class="function">(<span class="params">val,index,obj</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;,(a,b)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//List  [ &#123;a:3&#125;, &#123;a:2&#125;, &#123;a:4&#125;, &#123;a:1&#125; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sort()</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br><span class="line">Immutable.fromJS( &#123;<span class="attr">b</span>:<span class="number">1</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>:<span class="number">5</span>&#125; ).sortBy(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Map &#123;b: 1, c: 2, a: 3, d: 5&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-8-8-groupBy"><a href="#4-8-8-groupBy" class="headerlink" title="4.8.8 groupBy"></a>4.8.8 groupBy</h4><blockquote><p><code>分组 groupBy</code>  作用：对数据进行分组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> listOfMaps = List([</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">1</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">1</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">v</span>: <span class="number">2</span> &#125;)</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> groupsOfMaps = listOfMaps.groupBy(<span class="function"><span class="params">x</span> =&gt;</span> x.get(<span class="string">'v'</span>))</span><br><span class="line"><span class="comment">// Map &#123;</span></span><br><span class="line"><span class="comment">//   0: List [ Map&#123; "v": 0 &#125;, Map &#123; "v": 0 &#125; ],</span></span><br><span class="line"><span class="comment">//   1: List [ Map&#123; "v": 1 &#125;, Map &#123; "v": 1 &#125; ],</span></span><br><span class="line"><span class="comment">//   2: List [ Map&#123; "v": 2 &#125; ],</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-9-查找数据"><a href="#4-9-查找数据" class="headerlink" title="4.9 查找数据"></a>4.9 查找数据</h3><h4 id="4-9-1-indexOf-lastIndexOf"><a href="#4-9-1-indexOf-lastIndexOf" class="headerlink" title="4.9.1 indexOf lastIndexOf"></a>4.9.1 indexOf lastIndexOf</h4><blockquote><p>Map不存在此方法 和<code>js</code>数组中的方法相同，查找第一个或者最后一个<code>value</code>的<code>index</code>值，找不到则返回<code>-1</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).indexof(<span class="number">3</span>) <span class="comment">//2</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).lastIndexof(<span class="number">3</span>) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h4 id="4-9-2-findIndex-、-findLastIndex"><a href="#4-9-2-findIndex-、-findLastIndex" class="headerlink" title="4.9.2 findIndex() 、 findLastIndex()"></a>4.9.2 <code>findIndex() 、 findLastIndex()</code></h4><blockquote><p><code>Map</code>不存在此方法,查找满足要求的元素的<code>index</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findIndex(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)   <span class="comment">// 1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastIndex(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> index%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="4-9-3-find-、-findLast"><a href="#4-9-3-find-、-findLast" class="headerlink" title="4.9.3 find() 、 findLast()"></a>4.9.3 <code>find() 、 findLast()</code></h4><blockquote><p>查找满足条件的元素的<code>value</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).find(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLast(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="4-9-4-findKey-、-findLastKey"><a href="#4-9-4-findKey-、-findLastKey" class="headerlink" title="4.9.4 findKey() 、 findLastKey()"></a>4.9.4 <code>findKey() 、 findLastKey()</code></h4><blockquote><p>查找满足条件的元素的<code>key</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findKey(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastKey(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="4-9-5-findEntry-、-findLastEntry"><a href="#4-9-5-findEntry-、-findLastEntry" class="headerlink" title="4.9.5 findEntry() 、 findLastEntry()"></a>4.9.5 <code>findEntry() 、 findLastEntry()</code></h4><blockquote><p>查找满足条件的元素的键值对 <code>key:value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findEntry(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// [1,2]</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).findLastEntry(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value%<span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)  <span class="comment">// [3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-9-6-keyOf-lastKeyOf"><a href="#4-9-6-keyOf-lastKeyOf" class="headerlink" title="4.9.6 keyOf() lastKeyOf()"></a>4.9.6 <code>keyOf() lastKeyOf()</code></h4><blockquote><p>查找某一个<code>value</code>对应的<code>key</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).keyOf(<span class="number">2</span>) <span class="comment">//1</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).lastKeyOf(<span class="number">2</span>) <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="4-9-7-max-、-maxBy"><a href="#4-9-7-max-、-maxBy" class="headerlink" title="4.9.7 max() 、 maxBy()"></a>4.9.7 <code>max() 、 maxBy()</code></h4><blockquote><p>查找最大值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).max() <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([&#123;a;<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>: <span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;]).maxBy(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;)  <span class="comment">//&#123;a:4&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-9-8-min-、-minBy"><a href="#4-9-8-min-、-minBy" class="headerlink" title="4.9.8 min() 、 minBy()"></a>4.9.8 <code>min() 、 minBy()</code></h4><blockquote><p>查找最小值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).min() <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">Immutable.fromJS([&#123;a;<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">a</span>: <span class="number">3</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;]).minBy(<span class="function">(<span class="params">value,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;)  <span class="comment">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-10-创建子集"><a href="#4-10-创建子集" class="headerlink" title="4.10 创建子集"></a>4.10 创建子集</h3><h4 id="4-10-1-slice"><a href="#4-10-1-slice" class="headerlink" title="4.10.1 slice()"></a>4.10.1 <code>slice()</code></h4><blockquote><p>和原生<code>js</code>中数组的<code>slice</code>数组一样，包含两个参数，<code>start</code>和<code>end</code>，<code>start</code>代表开始截取的位置，<code>end</code>代表结束的位置，不包括第<code>end</code>的元素。若不包括<code>end</code>，则返回整个对象，若<code>end</code>为负数，则返回（<code>start</code>，<code>length-end</code>）对应的数据。若<code>start</code>只有一个并且为负数，则返回最后的<code>end</code>个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>); <span class="comment">//[1,2,3,4]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>,<span class="number">2</span>); <span class="comment">//[1,2]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">-2</span>); <span class="comment">//[3,4]</span></span><br><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).slice(<span class="number">0</span>,<span class="number">-2</span>); <span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-2-rest"><a href="#4-10-2-rest" class="headerlink" title="4.10.2 rest()"></a>4.10.2 <code>rest()</code></h4><blockquote><p>返回除第一个元素之外的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).rest()<span class="comment">//[2,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-3butLast"><a href="#4-10-3butLast" class="headerlink" title="4.10.3butLast()"></a>4.10.3<code>butLast()</code></h4><blockquote><p>返回除最后一个元素之外的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).rest()<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-4-skip"><a href="#4-10-4-skip" class="headerlink" title="4.10.4 skip()"></a>4.10.4 <code>skip()</code></h4><blockquote><p>有一个参数<code>n</code>, 返回截掉前<code>n</code>个元素之后剩下的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skip(<span class="number">1</span>)<span class="comment">//[2,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-5-skipLast"><a href="#4-10-5-skipLast" class="headerlink" title="4.10.5 skipLast()"></a>4.10.5 <code>skipLast()</code></h4><blockquote><p>有一个参数<code>n</code>, 返回截掉最后n个元素之后剩下的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skip(<span class="number">1</span>)<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-6-skipWhile"><a href="#4-10-6-skipWhile" class="headerlink" title="4.10.6 skipWhile()"></a>4.10.6 <code>skipWhile()</code></h4><blockquote><p>返回从第一次返回<code>false</code>之后的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipWhile(list.skipWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// [1,2,3,4]</span></span><br><span class="line">skipUntil()</span><br></pre></td></tr></table></figure><h4 id="4-10-7-take"><a href="#4-10-7-take" class="headerlink" title="4.10.7 take()"></a>4.10.7 <code>take()</code></h4><blockquote><p>有一个参数n, 返回前n个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).take(<span class="number">2</span>)<span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-8-takeLast"><a href="#4-10-8-takeLast" class="headerlink" title="4.10.8 takeLast()"></a>4.10.8 <code>takeLast()</code></h4><blockquote><p>有一个参数n, 返回最后n个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).takeLast(<span class="number">2</span>)<span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure><h4 id="4-10-9-takeWhile"><a href="#4-10-9-takeWhile" class="headerlink" title="4.10.9 takeWhile()"></a>4.10.9 <code>takeWhile()</code></h4><blockquote><p>返回从第一次返回<code>false</code>之前的所有元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).skipWhile(list.takeWhile(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))<span class="comment">// []</span></span><br><span class="line">takeUntil()</span><br></pre></td></tr></table></figure><h3 id="4-11-处理数据"><a href="#4-11-处理数据" class="headerlink" title="4.11 处理数据"></a>4.11 处理数据</h3><h4 id="4-11-1-reduce"><a href="#4-11-1-reduce" class="headerlink" title="4.11.1 reduce()"></a>4.11.1 <code>reduce()</code></h4><blockquote><p>和<code>js</code>中数组中的<code>reduce</code>相同,按索引升序的顺序处理元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).reduce(<span class="function">(<span class="params">pre,next,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pre+next)</span><br><span class="line">  <span class="keyword">return</span> pre+next; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3 6 10</span></span><br></pre></td></tr></table></figure><h4 id="4-11-2-reduceRight"><a href="#4-11-2-reduceRight" class="headerlink" title="4.11.2 reduceRight()"></a>4.11.2 <code>reduceRight()</code></h4><blockquote><p>和<code>js</code>中数组中的<code>reduce</code>相同,按索引降序的顺序处理元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).reduceRight(<span class="function">(<span class="params">pre,next,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pre+next)</span><br><span class="line">  <span class="keyword">return</span> pre+next; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 7 9 10</span></span><br></pre></td></tr></table></figure><h4 id="4-11-3-every"><a href="#4-11-3-every" class="headerlink" title="4.11.3 every()"></a>4.11.3 <code>every()</code></h4><blockquote><p>作用：判断整个对象总中所有的元素是不是都满足某一个条件，都满足返回`true，反之返回false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).every(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="4-11-4-some"><a href="#4-11-4-some" class="headerlink" title="4.11.4 some()"></a>4.11.4 <code>some()</code></h4><blockquote><p>判断整个对象总中所有的元素是不是存在满足某一个条件的元素，若存在返回true，反之返回false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).some(<span class="function">(<span class="params">value,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="4-11-5-join"><a href="#4-11-5-join" class="headerlink" title="4.11.5 join()"></a>4.11.5 <code>join()</code></h4><blockquote><p>作用：同<code>js</code>中数组的<code>join</code>方法。把转换为字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).join(<span class="string">','</span>) <span class="comment">//1,2,3,4</span></span><br></pre></td></tr></table></figure><h4 id="4-11-6-isEmpty"><a href="#4-11-6-isEmpty" class="headerlink" title="4.11.6 isEmpty()"></a>4.11.6 <code>isEmpty()</code></h4><blockquote><p>作用：判断是否为空</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS([]).isEmpty(); <span class="comment">// true</span></span><br><span class="line">Immutable.fromJS(&#123;&#125;).isEmpty(); <span class="comment">// true</span></span><br><span class="line">count()</span><br></pre></td></tr></table></figure><h4 id="4-11-7-countBy"><a href="#4-11-7-countBy" class="headerlink" title="4.11.7 countBy()"></a>4.11.7 <code>countBy()</code></h4><blockquote><p>与<code>count</code>不同的是，<code>countBy</code>返回一个对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = Immutable.fromJS([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">const</span> map = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:<span class="number">4</span>&#125;);</span><br><span class="line"></span><br><span class="line">list.countBy(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">//&#123;false: 2, true: 2&#125;</span></span><br><span class="line"></span><br><span class="line">map.countBy(<span class="function">(<span class="params">value,index,list</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">//&#123;false: 2, true: 2&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、fromJS&quot;&gt;&lt;a href=&quot;#一、fromJS&quot; class=&quot;headerlink&quot; title=&quot;一、fromJS&quot;&gt;&lt;/a&gt;一、fromJS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作用：是最最常用的将原生JS数据转换为&lt;code&gt;ImmutableJS&lt;/co
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="Immutable" scheme="http://blog.poetries.top/tags/Immutable/"/>
    
  </entry>
  
  <entry>
    <title>VS Code折腾记</title>
    <link href="http://blog.poetries.top/2018/02/02/vsc-config/"/>
    <id>http://blog.poetries.top/2018/02/02/vsc-config/</id>
    <published>2018-02-02T03:40:43.000Z</published>
    <updated>2018-02-04T08:40:54.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VS-Code常用插件"><a href="#VS-Code常用插件" class="headerlink" title="VS Code常用插件"></a>VS Code常用插件</h2><ul><li><code>Auto Close Tag</code> （自动关闭HTML标签）</li><li><code>Auto Rename Tag</code> (HTML标签自动改名)</li><li><code>Babel ES6/ES7</code> </li><li><code>Beautify css/sass/scss/less</code></li><li><code>Brackets Light</code> (主题)</li><li><code>Complete JSDoc Tags</code> (js文档注释提示)</li><li><code>Git History</code> (查看git提交记录)</li><li><code>HTML CSS Support</code> (HTML中提示可用的class)</li><li><code>npm Intellisense</code> (提示可以require的模块名称)</li><li><code>One Dark Theme</code> (主题)</li><li><code>Path Intellisense</code> (路径补全)</li><li><code>Reactjs code snippets</code> (reactjs代码提示)</li><li><code>Sass</code></li><li><code>SCSS IntelliSense Preview</code>  SCSS智能提醒，配置强大</li><li><code>Sublime Babel</code></li><li><code>VSCode Great Icons</code> (文件图标)</li><li><code>vscode-icons</code> （文件图标）</li><li><code>Beautify</code> - HTML、CSS、JS、JSON语法高亮</li><li><code>Guides</code> - 代码对齐辅助线</li><li><code>OneDark</code>主题</li><li><code>JavaScript (ES6) Code Snippets</code> (代码片段插件)</li><li><code>Project Manager</code> (项目管理器插件) 简单的项目管理器,可以在你的编辑器中快速切换项目</li><li><code>Sync Settings</code> (设置同步插件)在电脑上移植你的插件和设置是轻而易举的事</li><li><code>Git History</code> (<code>Git</code> 历史记录插件) 可视化的 <code>Git</code> 历史记录插件</li><li><code>Document This</code> (<code>JSDoc</code>注释插件)</li><li><code>npm Intellisense</code> (npm 模块导入插件)</li><li><code>Align</code> (代码对齐插件)</li><li><code>amVim</code> (<code>vim</code> 插件)</li><li><code>Faker</code> 可以生成随机的名称，地址，图像，电话号码</li><li><code>Color Info</code> 颜色信息及转换 </li><li><code>SVG Viewer SVG</code>预览</li><li><code>TODO Highlight</code> TODO 高亮</li><li><code>Minify</code> 代码压缩 </li><li><code>Regex Previewer</code> 正则表达式预览</li><li><code>File Tree View</code>  提供几个常见编程语言的函数或状态的树集合展示,可以快速点击跳转!</li><li><code>JavaScript Test Runner Preview</code> 快速执行单元测试,支持 <code>Mocha</code> 和 <code>Jest</code></li><li><code>NPM-Scripts</code> 在侧边栏可视化执行 <code>npm</code> 命令(项目内的 <code>package.json</code>)</li><li><code>colorize</code>会给颜色代码增加一个当前匹配代码颜色的背景</li><li><code>vscode-fake</code>——生成各种假数据类型。（姓名，电话）</li><li><code>vscode-CSS Peek</code>——<code>class</code>类定义跳转</li><li><code>vscode-Git Lens</code>—–增强<code>vscode</code>的<code>git</code>管理工具</li><li><code>vscode-Live Server</code>—–<code>http</code>服务器（相当于使用<code>nodejs</code>的<code>http-server</code> ）</li><li><code>EditorConfig for VS Code EditorConfig</code> 插件</li><li><code>Emoji</code> 在代码中输入<code>emoji</code></li><li><code>File Peek</code> 根据路径字符串，快速定位到文件</li><li><code>Font-awesome codes for html FontAwesome</code>提示代码段</li><li><code>Guides</code> 高亮缩进基准线</li><li><code>JavaScript (ES6) code snippets ES6</code>语法代码段</li><li><code>language-stylus Stylus</code>语法高亮和提示</li><li><code>Lodash Lodash</code>代码段</li><li><code>Prettify JSON</code> 格式化<code>JSON</code></li><li><code>Test Spec Generator</code> 测试用例生成（支持<code>chai</code>、<code>should</code>、<code>jasmine</code>）</li><li><code>vetur</code> 目前比较好的<code>Vue</code>语法高亮</li><li><code>cssrem</code> css值转rem插件</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"workbench.activityBar.visible"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"workbench.iconTheme"</span>: <span class="string">"vscode-icons"</span>,</span><br><span class="line">    <span class="attr">"window.menuBarVisibility"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"editor.minimap.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"cssrem.rootFontSize"</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Atom One Dark"</span>,</span><br><span class="line">    <span class="attr">"editor.fontSize"</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">"liveServer.settings.donotShowInfoMsg"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"editor.cursorStyle"</span>: <span class="string">"block"</span>,</span><br><span class="line">    <span class="attr">"editor.fontFamily"</span>: <span class="string">"Fira Code"</span>,</span><br><span class="line">    <span class="attr">"editor.fontLigatures"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"editor.lineHeight"</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">"editor.lineNumbers"</span>: <span class="string">"on"</span>,</span><br><span class="line">    <span class="attr">"editor.rulers"</span>: [</span><br><span class="line">        <span class="number">120</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"auto-close-tag.SublimeText3Mode"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"vsicons.dontShowNewVersionMessage"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"[javascript]"</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"window.zoomLevel"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"javascript.implicitProjectConfig.experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"Scss2Css.compileAfterSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"fileheader.Author"</span>: <span class="string">"poetryxie"</span>,</span><br><span class="line">    <span class="attr">"fileheader.LastModifiedBy"</span>: <span class="string">"poetryxie"</span>,</span><br><span class="line">    <span class="attr">"todohighlight.isEnable"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workbench.startupEditor"</span>: <span class="string">"newUntitledFile"</span>,</span><br><span class="line">    <span class="attr">"explorer.confirmDragAndDrop"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"gitlens.advanced.messages"</span>: &#123;</span><br><span class="line">        <span class="attr">"suppressCommitHasNoPreviousCommitWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressCommitNotFoundWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressFileNotUnderSourceControlWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressGitVersionWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressLineUncommittedWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressNoRepositoryWarning"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressUpdateNotice"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"suppressWelcomeNotice"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字体美化"><a href="#字体美化" class="headerlink" title="字体美化"></a>字体美化</h2><p>下载链接 <a href="https://pan.baidu.com/s/1jJHRgF0" target="_blank" rel="noopener">https://pan.baidu.com/s/1jJHRgF0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;VS-Code常用插件&quot;&gt;&lt;a href=&quot;#VS-Code常用插件&quot; class=&quot;headerlink&quot; title=&quot;VS Code常用插件&quot;&gt;&lt;/a&gt;VS Code常用插件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Auto Close Tag&lt;/code&gt; 
      
    
    </summary>
    
      <category term="Tools" scheme="http://blog.poetries.top/categories/Tools/"/>
    
    
      <category term="VS Code" scheme="http://blog.poetries.top/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript工程项目的一系列最佳实践</title>
    <link href="http://blog.poetries.top/2018/01/28/js-perfect-rules/"/>
    <id>http://blog.poetries.top/2018/01/28/js-perfect-rules/</id>
    <published>2018-01-28T12:36:43.000Z</published>
    <updated>2018-02-04T08:40:54.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源于互联网</p></blockquote><h2 id="1-Git"><a href="#1-Git" class="headerlink" title="1.Git"></a>1.Git</h2><h3 id="1-1-一些Git规则"><a href="#1-1-一些Git规则" class="headerlink" title="1.1 一些Git规则"></a>1.1 一些Git规则</h3><blockquote><p>这里有一套规则要牢记</p></blockquote><p><strong>在功能分支中执行开发工作</strong></p><ul><li>因为这样，所有的工作都是在专用的分支而不是在主分支上隔离完成的。它允许您提交多个 <code>pull request</code> 而不会导致混乱。您可以持续迭代提交，而不会使得那些很可能还不稳定而且还未完成的代码污染 <code>master</code> 分支</li></ul><p><strong>从 <code>develop</code> 独立出分支</strong></p><ul><li>这样，您可以保持 <code>master</code> 分支中的代码稳定性，这样就不会导致构建问题，并且几乎可以直接用于发布</li></ul><p><strong>永远也不要将分支（直接）推送到 develop 或者 master<br>，请使用合并请求（Pull Request）</strong></p><ul><li>通过这种方式，它可以通知整个团队他们已经完成了某个功能的开发。这样开发伙伴就可以更容易对代码进行 code review，同时还可以互相讨论所提交的需求功能</li></ul><p><strong>在推送所开发的功能并且发起合并请求前，请更新您本地的develop分支并且完成交互式变基操作（interactive rebase）</strong></p><ul><li>ebase 操作会将（本地开发分支）合并到被请求合并的分支（ master 或 develop ）中，并将您本地进行的提交应用于所有历史提交的最顶端，而不会去创建额外的合并提交（假设没有冲突的话），从而可以保持一个漂亮而干净的历史提交记录</li></ul><p><strong>请确保在变基并发起合并请求之前解决完潜在的冲突</strong></p><ul><li>合并分支后删除本地和远程功能分支<ul><li>如果不删除需求分支，大量僵尸分支的存在会导致分支列表的混乱。而且该操作还能确保有且仅有一次合并到master 或 develop。只有当这个功能还在开发中时对应的功能分支才存在</li></ul></li></ul><p><strong>在进行合并请求之前，请确保您的功能分支可以成功构建，并已经通过了所有的测试（包括代码规则检查）</strong></p><ul><li>因为您即将将代码提交到这个稳定的分支。而如果您的功能分支测试未通过，那您的目标分支的构建有很大的概率也会失败。此外，确保在进行合并请求之前应用代码规则检查。因为它有助于我们代码的可读性，并减少格式化的代码与实际业务代码更改混合在一起导致的混乱问题</li></ul><p><strong>使用 这个 <code>.gitignore</code>文件</strong></p><ul><li>此文件已经囊括了不应该和您开发的代码一起推送至远程仓库（remote repository）的系统文件列表。另外，此文件还排除了大多数编辑器的设置文件夹和文件，以及最常见的（工程开发）依赖目录</li></ul><p><strong>保护您的 develop 和 master 分支</strong></p><ul><li>这样可以保护您的生产分支免受意外情况和不可回退的变更</li></ul><h3 id="1-2-Git-工作流"><a href="#1-2-Git-工作流" class="headerlink" title="1.2 Git 工作流"></a>1.2 Git 工作流</h3><blockquote><p>基于以上原因, 我们将 功能分支工作流 ， 交互式变基的使用方法 结合一些 Gitflow中的基础 (比如，命名和使用一个develop branch)一起使用。 主要步骤如下</p></blockquote><p><strong>针对一个新项目, 在您的项目目录初始化您的项目。 如果是（已有项目）随后的功能开发/代码变动，这一步请忽略</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;项目目录&gt;</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p><strong>检出（Checkout） 一个新的功能或故障修复（feature/bug-fix）分支</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;分支名称&gt;</span><br></pre></td></tr></table></figure><p><strong>新增代码变更</strong></p><blockquote><p>git commit -a 会独立启动一个编辑器用来编辑您的说明信息，这样的好处是可以专注于写这些注释说明</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br><span class="line">git commit -a</span><br></pre></td></tr></table></figure><p><strong>（切换至功能分支并且）通过交互式变基从您的develop分支中获取最新的代码提交，以更新您的功能分支</strong></p><blockquote><p>您可以使用 –autosquash 将所有提交压缩到单个提交。没有人会愿意（看到） develop 分支中的单个功能开发就占据如此多的提交历史</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branchname&gt;</span><br><span class="line">git rebase -i --autosquash develop</span><br></pre></td></tr></table></figure><p><strong>如果没有冲突请跳过此步骤，如果您有冲突, 就需要解决它们并且继续变基操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file1&gt; &lt;file2&gt; ...</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure><p><strong>推送您的（功能）分支。变基操作会改变提交历史, 所以您必须使用 -f 强制推送到远程（功能）分支。 如果其他人与您在该分支上进行协同开发，请使用破坏性没那么强的 –force-with-lease 参数</strong></p><blockquote><p>当您进行 rebase 操作时，您会改变功能分支的提交历史。这会导致 Git 拒绝正常的 git push 。那么，您只能使用 -f 或 –force 参数了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure><p><strong>提交一个合并请求（Pull Request）</strong></p><p><strong>Pull Request 会被负责代码审查的同事接受，合并和关闭</strong></p><p><strong>如果您完成了开发，请记得删除您的本地分支。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;分支&gt;</span><br></pre></td></tr></table></figure><p><strong>（使用以下代码）删除所有已经不在远程仓库维护的分支</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -p &amp;&amp; <span class="keyword">for</span> branch <span class="keyword">in</span> <span class="string">`git branch -vv | grep ': gone]' | awk '&#123;print $1&#125;'`</span>; <span class="keyword">do</span> git branch -D $branch; done</span><br></pre></td></tr></table></figure><h3 id="1-3-如何写好-Commit-Message"><a href="#1-3-如何写好-Commit-Message" class="headerlink" title="1.3 如何写好 Commit Message"></a>1.3 如何写好 Commit Message</h3><blockquote><p>坚持遵循关于提交的标准指南，会让在与他人合作使用 Git 时更容易。这里有一些经验法则 </p></blockquote><p><strong>用新的空行将标题和主体两者隔开</strong></p><blockquote><p>Git 非常聪明，它可将您提交消息的第一行识别为摘要。实际上，如果您尝试使用 git shortlog ，而不是 git log ，您会看到一个很长的提交消息列表，只会包含提交的 id 以及摘要（，而不会包含主体部分）</p></blockquote><p><strong>将标题行限制为50个字符，并将主体中一行超过72个字符的部分折行显示</strong></p><blockquote><p>提交应尽可能简洁明了，而不是写一堆冗余的描述</p></blockquote><p><strong>标题首字母大写</strong></p><p><strong>不要用句号结束标题</strong></p><p><strong>使用主体部分去解释 是什么 和 为什么 而不是 怎么做</strong></p><h2 id="2-文档"><a href="#2-文档" class="headerlink" title="2. 文档"></a>2. 文档</h2><ul><li>可以使用这个 模板 作为 <a href="https://github.com/wearehive/project-guidelines/blob/master/README.sample.md" target="_blank" rel="noopener">README （的一个参考）</a></li><li>对于具有多个存储库的项目，请在各自的 README 文件中提供它们的链接</li><li>随项目的进展，持续地更新 README</li><li>给您的代码添加详细的注释，这样就可以清楚每个主要部分的含义</li><li>不要把注释作为坏代码的借口。保持您的代码干净整洁</li><li>也不要把那些清晰的代码作为不写注释的借口</li><li>当代码更新，也请确保注释的同步更新</li></ul><h2 id="3-环境"><a href="#3-环境" class="headerlink" title="3. 环境"></a>3. 环境</h2><p><strong>如果需要，请分别定义 development, test 和 production 三个环境</strong></p><blockquote><p>不同的环境可能需要不同的数据、token、API、端口等。您可能需要一个隔离的 development 环境，它调用 mock 的 API，mock 会返回可预测的数据，使自动和手动测试变得更加容易。或者您可能只想在 production 环境中才启用 Google Analytics（分析）</p></blockquote><p><strong>依据不同的环境变量加载部署的相关配置，不要将这些配置作为常量添加到代码库中</strong></p><blockquote><ul><li>您会有令牌，密码和其他有价值的信息。这些配置应正确地从应用程序内部分离开来，这样代码库就可以随时独立发布，不会包含这些敏感配置信息</li><li>怎么做： 使用 .env 文件来存储环境变量，并将其添加到 .gitignore 中使得排除而不被提交（到仓库）。另外，再提交一个 .env.example 作为开发人员的参考配置。对于生产环境，您应该依旧以标准化的方式设置环境变量</li></ul></blockquote><p><strong>建议您在应用程序启动之前校验一下环境变量</strong> </p><blockquote><p>它可能会将其他人从上小时的故障排查中解救</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> joi = <span class="built_in">require</span>(<span class="string">'joi'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envVarsSchema = joi.object(&#123;  </span><br><span class="line">  NODE_ENV: joi.string()</span><br><span class="line">    .valid([<span class="string">'development'</span>, <span class="string">'production'</span>, <span class="string">'test'</span>, <span class="string">'provision'</span>])</span><br><span class="line">    .required(),</span><br><span class="line">  PORT: joi.number()</span><br><span class="line">    .required(),</span><br><span class="line">  LOGGER_LEVEL: joi.string()</span><br><span class="line">    .valid([<span class="string">'error'</span>, <span class="string">'warn'</span>, <span class="string">'info'</span>, <span class="string">'verbose'</span>, <span class="string">'debug'</span>, <span class="string">'silly'</span>])</span><br><span class="line">    .default(<span class="string">'info'</span>),</span><br><span class="line">  LOGGER_ENABLED: joi.boolean()</span><br><span class="line">    .truthy(<span class="string">'TRUE'</span>)</span><br><span class="line">    .truthy(<span class="string">'true'</span>)</span><br><span class="line">    .falsy(<span class="string">'FALSE'</span>)</span><br><span class="line">    .falsy(<span class="string">'false'</span>)</span><br><span class="line">    .default(<span class="literal">true</span>)</span><br><span class="line">&#125;).unknown()</span><br><span class="line">  .required()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; error, <span class="attr">value</span>: envVars &#125; = joi.validate(process.env, envVarsSchema)  </span><br><span class="line"><span class="keyword">if</span> (error) &#123;  </span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Config validation error: <span class="subst">$&#123;error.message&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;  </span><br><span class="line">  env: envVars.NODE_ENV,</span><br><span class="line">  isTest: envVars.NODE_ENV === <span class="string">'test'</span>,</span><br><span class="line">  isDevelopment: envVars.NODE_ENV === <span class="string">'development'</span>,</span><br><span class="line">  logger: &#123;</span><br><span class="line">    level: envVars.LOGGER_LEVEL,</span><br><span class="line">    enabled: envVars.LOGGER_ENABLED</span><br><span class="line">  &#125;,</span><br><span class="line">  server: &#123;</span><br><span class="line">    port: envVars.PORT</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><h3 id="3-1-一致的开发环境"><a href="#3-1-一致的开发环境" class="headerlink" title="3.1 一致的开发环境"></a>3.1 一致的开发环境</h3><p><strong>在 package.json 里的 engines 中设置您的node版本</strong></p><ul><li>让其他人可以清晰的知道这个项目中用的什么node版本</li></ul><p><strong>另外，使用 nvm 并在您的项目根目录下创建一个 .nvmrc 文件。不要忘了在文档中标注</strong></p><blockquote><p>任何使用nvm的人都可以使用 nvm use 来切换到合适的node版本</p></blockquote><p><strong>最好设置一个检查 <code>node</code> 和 <code>npm</code> 版本的 <code>preinstall</code> 脚本</strong></p><blockquote><p>某些依赖项可能会在新版本的 npm 中安装失败。</p></blockquote><p><strong>如果可以的话最好使用 Docker 镜像</strong></p><blockquote><p>它可以在整个工作流程中为您提供一致的环境，而且不用花太多的时间来解决依赖或配置</p></blockquote><p><strong>使用本地模块，而不是使用全局安装的模块</strong></p><blockquote><p>您不能指望您的同事在自己的全局环境都安装了相应的模块，本地模块可以方便您分享您的工具</p></blockquote><h3 id="3-2-依赖一致性"><a href="#3-2-依赖一致性" class="headerlink" title="3.2 依赖一致性"></a>3.2 依赖一致性</h3><p><strong>确保您的团队成员获得与您完全相同的依赖。</strong></p><blockquote><ul><li>因为您希望代码在任何开发环境中运行都能像预期的一样</li><li>在<code>npm@5</code>或者更高版本中使用 <code>package-lock.json</code></li></ul></blockquote><ul><li><p>我们没有 <code>npm@5</code></p><ul><li>或者，您可以使用 <code>yarn</code> ，并确保在 <code>README.md</code> 中标注了使用 yarn 。您的锁文件和<code>package.json</code>在每次依赖关系更新后应该具有相同的版本</li></ul></li><li><p>我不太喜欢 <code>Yarn</code></p><ul><li>不喜欢 <code>Yarn</code>，太糟糕了。对于旧版本的<code>npm</code>，在安装新的依赖关系时使用 <code>-save --save-exact</code> ，并在发布之前创建<code>npm-shrinkwrap.json</code></li></ul></li></ul><h2 id="4-依赖"><a href="#4-依赖" class="headerlink" title="4. 依赖"></a>4. 依赖</h2><p><strong>持续跟踪您当前的可用依赖包: 举个例子, <code>npm ls --depth=0</code></strong></p><p><strong>查看这些软件包是否未使用或者与开发项目无关: depcheck</strong></p><blockquote><p>您可能会在代码中包含未使用的库，这会增大生产包的大小。请搜索出这些未使用的依赖关系并去掉它们吧</p></blockquote><p><strong>在使用依赖之前，请检查他的下载统计信息，看看它是否被社区大量使用： npm-stat</strong></p><blockquote><p>更多的使用量很大程度上意味着更多的贡献者，这通常意味着拥有更好的维护，这些能确保错误能够被快速地发现并修复</p></blockquote><p><strong>在使用依赖之前，请检查它是否具有良好而成熟的版本发布频率与大量的维护者：例如， npm view async</strong></p><blockquote><p>如果维护者没有足够快地合并修补程序，那么这些贡献者也将会变得不积极不高效</p></blockquote><p><strong>如果需要使用那些不太熟悉的依赖包，请在使用之前与团队进行充分讨论</strong></p><p><strong>始终确保您的应用程序在最新版本的依赖包上面能正常运行，而不是无法使用：npm outdated</strong></p><blockquote><p>依赖关系更新有时包含破坏性更改。当显示需要更新时，请始终先查看其发行说明。并逐一地更新您的依赖项，如果出现任何问题，可以使故障排除更容易。可以使用类似 npm-check-updates 的酷炫工具</p></blockquote><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p><strong>如果需要，请构建一个 test 环境.</strong></p><blockquote><p>虽然有时在 production 模式下端到端测试可能看起来已经足够了，但有一些例外：比如您可能不想在生产环境下启用数据分析功能，只能用测试数据来填充（污染）某人的仪表板。另一个例子是，您的API可能在 production 中才具有速率限制，并在请求达到一定量级后会阻止您的测试请求</p></blockquote><p><strong>将测试文件放在使用 <em> .test.js 或 </em> .spec.js 命名约定的测试模块，比如 moduleName.spec.js</strong></p><blockquote><p>您肯定不想进入一个层次很深的文件夹结构来查找里面的单元测试</p></blockquote><p><strong>将其他测试文件放入独立的测试文件夹中以避免混淆</strong></p><blockquote><p>一些测试文件与任何特定的文件实现没有特别的关系。您只需将它放在最有可能被其他开发人员找到的文件夹中：<strong>test</strong> 文件夹。这个名字：<strong>test</strong>也是现在的标准，被大多数JavaScript测试框架所接受</p></blockquote><p><strong>编写可测试代码，避免副作用（side effects），提取副作用，编写纯函数</strong></p><ul><li>您想要将业务逻辑拆分为单独的测试单元。您必须“尽量减少不可预测性和非确定性过程对代码可靠性的影响”</li><li>纯函数是一种总是为相同的输入返回相同输出的函数。相反地，不纯的函数是一种可能会有副作用，或者取决于来自外部的条件来决定产生对应的输出值的函数。这使得它不那么可预测</li></ul><p><strong>使用静态类型检查器</strong></p><ul><li>有时您可能需要一个静态类型检查器。它为您的代码带来一定程度的可靠性</li></ul><p><strong>先在本地 develop 分支运行测试，待测试通过后，再进行pull请求</strong></p><ul><li>您不想成为一个导致生产分支构建失败的人吧。在您的rebase之后运行测试，然后再将您改动的功能分支推送到远程仓库。</li></ul><p><strong>记录您的测试，包括在 README 文件中的相关说明部分</strong></p><ul><li>这是您为其他开发者或者 DevOps 专家或者 QA 或者其他如此幸运能和您一起协作的人留下的便捷笔记</li></ul><h2 id="6-结构布局与命名"><a href="#6-结构布局与命名" class="headerlink" title="6. 结构布局与命名"></a>6. 结构布局与命名</h2><p><strong>请围绕产品功能/页面/组件，而不是围绕角色来组织文件。此外，请将测试文件放在他们对应实现的旁边</strong></p><ul><li>不规范</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── controllers</span><br><span class="line">|   ├── product.js</span><br><span class="line">|   └── user.js</span><br><span class="line">├── models</span><br><span class="line">|   ├── product.js</span><br><span class="line">|   └── user.js</span><br></pre></td></tr></table></figure><ul><li>规范</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── product</span><br><span class="line">|   ├── index.js</span><br><span class="line">|   ├── product.js</span><br><span class="line">|   └── product.test.js</span><br><span class="line">├── user</span><br><span class="line">|   ├── index.js</span><br><span class="line">|   ├── user.js</span><br><span class="line">|   └── user.test.js</span><br></pre></td></tr></table></figure><blockquote><p>比起一个冗长的列表文件，创建一个单一责权封装的小模块，并在其中包括测试文件。将会更容易浏览，更一目了然</p></blockquote><p><strong>将其他测试文件放在单独的测试文件夹中以避免混淆</strong></p><ul><li>这样可以节约您的团队中的其他开发人员或DevOps专家的时间</li></ul><p><strong>使用 ./config 文件夹，不要为不同的环境制作不同的配置文件。</strong></p><blockquote><p>当您为不同的目的（数据库，API等）分解不同的配置文件;将它们放在具有容易识别名称（如 config ）的文件夹中才是有意义的。请记住不要为不同的环境制作不同的配置文件。这样并不是具有扩展性的做法，如果这样，就会导致随着更多应用程序部署被创建出来，新的环境名称也会不断被创建，非常混乱。 配置文件中使用的值应通过环境变量提供</p></blockquote><p><strong>将脚本文件放在./scripts文件夹中。包括 bash 脚本和 node 脚本。</strong></p><ul><li>很可能最终会出现很多脚本文件，比如生产构建，开发构建，数据库feeders，数据库同步等</li></ul><p><strong>将构建输出结果放在./build文件夹中。将build/添加到.gitignore中以便忽略此文件夹</strong></p><blockquote><p>命名为您最喜欢的就行，dist看起来也蛮酷的。但请确保与您的团队保持一致性。放置在该文件夹下的东西应该是已经生成（打包、编译、转换）或者被移到这里的。您产生什么编译结果，您的队友也可以生成同样的结果，所以没有必要将这些结果提交到远程仓库中。除非您故意希望提交上去。</p></blockquote><p><strong>文件名和目录名请使用 PascalCase camelCase 风格。组件请使用 PascalCase 风格</strong></p><p><strong>CheckBox/index.js 应该代表 CheckBox 组件，也可以写成 CheckBox.js ，但是不能写成冗长的 CheckBox/CheckBox.js 或 checkbox/CheckBox.js</strong></p><p><strong>理想情况下，目录名称应该和 index.js 的默认导出名称相匹配。</strong></p><ul><li>这样您就可以通过简单地导入其父文件夹直接使用您预期的组件或模块</li></ul><h2 id="7-代码风格"><a href="#7-代码风格" class="headerlink" title="7. 代码风格"></a>7. 代码风格</h2><h3 id="7-1-若干个代码风格指导"><a href="#7-1-若干个代码风格指导" class="headerlink" title="7.1 若干个代码风格指导"></a>7.1 若干个代码风格指导</h3><p><strong>对新项目请使用 Stage2 和更高版本的 JavaScript（现代化）语法。对于老项目，保持与老的语法一致，除非您打算把老的项目也更新为现代化风格</strong></p><ul><li>这完全取决于您的选择。我们使用转换器来使用新的语法糖。Stage2更有可能最终成为规范的一部分，而且仅仅只需经过小版本的迭代就会成为规范</li></ul><p><strong>在构建过程中包含代码风格检查</strong></p><ul><li>在构建时中断下一步操作是一种强制执行代码风格检查的方法。强制您认真对待代码。请确保在客户端和服务器端代码都执行代码检查</li></ul><p><strong>使用 ESLint - Pluggable JavaScript linter 去强制执行代码检查</strong></p><ul><li>我们个人很喜欢 eslint ，不强制您也喜欢。它拥有支持更多的规则，配置规则的能力和添加自定义规则的能力</li></ul><p><strong>针对 JavaScript 我们使用Airbnb JavaScript Style Guide , 更多请阅读。 请依据您的项目和您的团队选择使用所需的JavaScript 代码风格</strong></p><p><strong>当使用FlowType的时候，我们使用 ESLint的Flow样式检查规则。</strong></p><ul><li>Flow 引入了很少的语法，而这些语法仍然需要遵循代码风格并进行检查</li></ul><p><strong>使用 .eslintignore 将某些文件或文件夹从代码风格检查中排除</strong></p><ul><li>当您需要从风格检查中排除几个文件时，就再也不需要通过 eslint-disable 注释来污染您的代码了</li></ul><p><strong>在Pull Request之前，请删除任何 eslint 的禁用注释</strong></p><ul><li>在处理代码块时禁用风格检查是正常现象，这样就可以关注在业务逻辑。请记住把那些 eslint-disable 注释删除并遵循风格规则</li></ul><p><strong>根据任务的大小使用 //TODO： 注释或做一个标签（ticket）</strong></p><blockquote><p>这样您就可以提醒自己和他人有这样一个小的任务需要处理（如重构一个函数或更新一个注释）。对于较大的任务，可以使用由一个lint规则（no-warning-comments）强制要求其完成（并移除注释）的//TODO（＃3456），其中的#3456号码是一个标签（ticket），方便查找且防止相似的注释堆积导致混乱</p></blockquote><p><strong>随着代码的变化，始终保持注释的相关性。删除那些注释掉的代码块</strong></p><ul><li>代码应该尽可能的可读，您应该摆脱任何分心的事情。如果您在重构一个函数，就不要注释那些旧代码，直接把要注释的代码删除吧</li></ul><p><strong>避免不相关的和搞笑的的注释，日志或命名</strong></p><p><strong>请使用有意义容易搜索的命名，避免缩写名称。对于函数使用长描述性命名。功能命名应该是一个动词或动词短语，需要能清楚传达意图的命名。</strong></p><p><strong>依据《代码整洁之道》的step-down规则，对您的源代码文件中的函数（的声明）进行组织。高抽象级别的函数（调用了低级别函数的函数）在上，低抽象级别函数在下，（保证了阅读代码时遇到未出现的函数仍然是从上往下的顺序，而不会打断阅读顺序地往前查找并且函数的抽象层次依次递减）。</strong></p><h3 id="7-2-强制的代码风格标准"><a href="#7-2-强制的代码风格标准" class="headerlink" title="7.2 强制的代码风格标准"></a>7.2 强制的代码风格标准</h3><p><strong>让您的编辑器提示您关于代码风格方面的错误。 请将 <a href="https://github.com/prettier/eslint-plugin-prettier" target="_blank" rel="noopener">eslint-plugin-prettier</a> 与 <a href="https://github.com/prettier/eslint-config-prettier" target="_blank" rel="noopener">eslint-config-prettier</a> 和您目前的ESLint配置一起搭配使用</strong></p><p><strong>考虑使用Git钩子</strong></p><ul><li>Git的钩子能大幅度地提升开发者的生产力。在做出改变、提交、推送至暂存区或者生产环境的过程中（充分检验代码），再也不需要担心（推送的代码会导致）构建失败</li></ul><p><strong>将Git的precommit钩子与Prettier结合使用</strong></p><blockquote><p>虽然prettier自身已经非常强大，但是每次将其作为单独的一个npm任务去格式化代码，并不是那么地高效。 这正是lint-staged（还有husky）可以解决的地方。关于如何配置 lint-staged 请阅读这里 以及如何配置 husky 请阅读</p></blockquote><h2 id="8-日志"><a href="#8-日志" class="headerlink" title="8. 日志"></a>8. 日志</h2><p><strong>避免在生产环境中使用客户端的控制台日志</strong></p><ul><li>您在构建过程可以把（应该）它们去掉，但是请确保您在代码风格检查中提供了有关控制台日志的警告信息。</li></ul><p><strong>产出生产环境的可读生产日志记录。一般使用在生产模式下所使用的日志记录库 (比如 winston 或者 node-bunyan)。</strong></p><blockquote><p>它通过添加着色、时间戳、log到控制台或者文件中，甚至是夜以继日地轮流log到文件，来减少故障排除中那些令人不愉快的事情。</p></blockquote><h2 id="9-API"><a href="#9-API" class="headerlink" title="9. API"></a>9. API</h2><h3 id="9-1-API-设计"><a href="#9-1-API-设计" class="headerlink" title="9.1 API 设计"></a>9.1 API 设计</h3><ul><li>因为我们试图实施开发出结构稳健的 Restful 接口，让团队成员和客户可以简单而一致地使用它们</li><li>缺乏一致性和简单性会大大增加集成和维护的成本。这就是为什么API设计这部分会包含在这个文档中的原因</li></ul><p><strong>我们主要遵循资源导向的设计方式。它有三个主要要素：资源，集合和 URLs</strong></p><ul><li>资源具有数据，嵌套，和一些操作方法。</li><li>一组资源称为一个集合。</li><li><code>URL</code>标识资源或集合的线上位置</li></ul><blockquote><p>这是针对开发人员（您的主要API使用者）非常著名的设计方式。除了可读性和易用性之外，它还允许我们在无需了解API细节的情况下编写通用库和一些连接器</p></blockquote><ul><li>使用<code>kebab-case</code>（短横线分割）的<code>URL</code>。</li><li>在查询字符串或资源字段中使用<code>camelCase</code>模式。</li><li>在URL中使用多个<code>kebab-case</code>作为资源名称。</li><li>总是使用复数名词来命名指向一个集合的<code>url：/users</code></li></ul><blockquote><p>基本上，它可读性会更好，并可以保持URL的一致性。</p></blockquote><p><strong>在源代码中，将复数转换为具有列表后缀名描述的变量和属性</strong></p><blockquote><p>复数形式的URL非常好，但在源代码中使用它却很微妙而且容易出错，所以要小心谨慎。</p></blockquote><p><strong>坚持这样一个概念：始终以集合名起始并以标识符结束</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/students/<span class="number">245743</span></span><br><span class="line">/airports/kjfk</span><br></pre></td></tr></table></figure><p><strong>避免这样的网址</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /blogs/:blogId/posts/:postId/summary</span><br></pre></td></tr></table></figure><p><strong>这不是在指向资源，而是在指向属性。您完全可以将属性作为参数传递，以减少响应</strong></p><p><strong>URLs里面请尽量少用动词</strong></p><blockquote><p>因为如果您为每个资源操作使用一个动词，您很快就会维护一个很大的URL列表，而且没有一致的使用模式，这会使开发人员难以学习。此外，我们还要使用动词做别的事情</p></blockquote><p><strong>为非资源型请求使用动词。在这种情况下，您的API并不需要返回任何资源。而是去执行一个操作并返回执行结果。这些不是 CRUD（创建，查询，更新和删除）操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/translate?text=Hallo</span><br></pre></td></tr></table></figure><blockquote><p>因为对于 CRUD，我们在资源或集合URL上使用 HTTP 自己带的方法。我们所说的动词实际上是指Controllers。您通常不会开发这些东西</p></blockquote><p><strong>请求体或响应类型如果是JSON，那么请遵循camelCase规范为JSON属性命名来保持一致性</strong></p><blockquote><p>这是一个 JavaScript 项目指南，其中用于生成JSON的编程语言以及用于解析JSON的编程语言被假定为 JavaScript</p></blockquote><p><strong>如何使用HTTP方法来操作CRUD功能</strong></p><ul><li><code>GET</code>: 查询资源的表示法</li><li><code>POST</code>: 创建一些新的资源或者子资源</li><li><code>PUT</code>: 更新一个存在的资源</li><li><code>PATCH</code>: 更新现有资源。它只更新所提供的字段，不管其他字段</li><li><code>DELETE</code>: 删除一个存在的资源</li></ul><p><strong>对于嵌套资源，请在URL中把他们的关系表现出来。例如，使用id将员工与公司联系起来</strong></p><blockquote><p>这是一种自然的方式，方便资源的认知</p></blockquote><ul><li><code>GET /schools/2/students</code> , 应该从学校2得到所有学生的名单</li><li><code>GET /schools/2/students/31</code> , 应该得到学生31的详细信息，且此学生属于学校2</li><li><code>DELETE /schools/2/students/31</code> , 应删除属于学校2的学生31</li><li><code>PUT /schools/2/students/31</code> , 应该更新学生31的信息，仅在资源URL上使用PUT方式，而不要用收集</li><li><code>POST /schools</code> , 应该创建一所新学校，并返回创建的新学校的细节。在集合<code>URL</code>上使用<code>POST</code></li></ul><p><strong>对于具有v前缀（v1，v2）的版本，使用简单的序数。并将其移到URL的左侧，使其具有最高的范围表述</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//api.domain.com/v1/schools/3/students</span></span><br></pre></td></tr></table></figure><blockquote><p>当您的 API 为第三方公开时，升级API会导致发生一些意料之外的影响，也可能导致使用您API的人无法使用您的服务和产品。而这时使用URL中版本化可以防止这种情况的发生</p></blockquote><p><strong>响应消息必须是自我描述的。一个很好的错误消息响应可能如下所示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">1234</span>,</span><br><span class="line">    <span class="string">"message"</span> : <span class="string">"Something bad happened"</span>,</span><br><span class="line">    <span class="string">"description"</span> : <span class="string">"More details"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>或验证错误:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span> : <span class="number">2314</span>,</span><br><span class="line">    <span class="string">"message"</span> : <span class="string">"Validation Failed"</span>,</span><br><span class="line">    <span class="string">"errors"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"code"</span> : <span class="number">1233</span>,</span><br><span class="line">            <span class="string">"field"</span> : <span class="string">"email"</span>,</span><br><span class="line">            <span class="string">"message"</span> : <span class="string">"Invalid email"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"code"</span> : <span class="number">1234</span>,</span><br><span class="line">            <span class="string">"field"</span> : <span class="string">"password"</span>,</span><br><span class="line">            <span class="string">"message"</span> : <span class="string">"No password provided"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开发人员在使用这些由API​​构建的应用程序时，难免会需要在故障排除和解决问题的关键时刻使用到这些精心设计的错误消息。好的错误消息设计能节约大量的问题排查时间</li><li>_注意：尽可能保持安全异常消息的通用性。例如，别说不正确的密码，您可以换成无效的用户名或密码，以免我们不知不觉地通知用户他的用户名确实是正确的，只有密码不正确。这会让用户很懵逼。</li></ul><p><strong>只使用这8个状态代码，并配合您自定义的响应描述来表述程序工作一切是否正常，客户端应用程序发生了什么错误或API发生错误</strong></p><ul><li><code>200 OK GET</code>, PUT 或 POST 请求响应成功.</li><li><code>201 Created</code> 标识一个新实例创建成功。当创建一个新的实例，请使用POST方法并返回201状态码。</li><li><code>304 Not Modified</code> 发现资源已经缓存在本地，浏览器会自动减少请求次数。</li><li><code>400 Bad Request</code> 请求未被处理，因为服务器不能理解客户端是要什么。</li><li><code>401 Unauthorized</code> 因为请求缺少有效的凭据，应该使用所需的凭据重新发起请求。</li><li><code>403 Forbidden</code> 意味着服务器理解本次请求，但拒绝授权。</li><li><code>404 Not Found</code> 表示未找到请求的资源。</li><li><code>500 Internal Server Error</code> 表示请求本身是有效，但由于某些意外情况，服务器无法实现，服务器发生了故障</li></ul><blockquote><p>大多数 API 提供程序仅仅只使用一小部分 HTTP 状态代码而已。例如，Google GData API 仅使用了10个状态代码，Netflix 使用了9个，而 Digg 只使用了8个。当然，这些响应作为响应主体的附加信息。一共有超过 70 个 HTTP 状态代码。然而，大多数开发者不可能全部记住这 70 个状态码。因此，如果您选择不常用的状态代码，您将使应用程序开发人员厌烦构建应用程序，然后您还要跑到维基百科上面找出您要告诉他们的内容，多累啊</p></blockquote><p><strong>在您的响应中提供资源的总数</strong></p><p><strong>接受limit和offset参数</strong></p><p><strong>还应考虑资源暴露的数据量。API消费者并不总是需要资源的完整表述。可以使用一个字段查询参数，该参数用逗号分隔的字段列表来包括</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /student?fields=id,name,age,class</span><br></pre></td></tr></table></figure><p><strong>分页，过滤和排序功能并不需要从所有资源一开始就要得到支持。记录下那些提供过滤和排序的资源</strong></p><h3 id="9-2-API-安全"><a href="#9-2-API-安全" class="headerlink" title="9.2 API 安全"></a>9.2 API 安全</h3><blockquote><p>这些是一些基本的安全最佳实践</p></blockquote><p><strong>除非通过安全的连接（HTTPS），否则不要只使用基本认证。不要在URL中传输验证令牌：GET /users/123?token=asdf….</strong></p><blockquote><p>因为令牌、用户ID和密码通过网络是明文传递的（它是base64编码，而base64是可逆编码），所以基本认证方案是不安全的</p></blockquote><p><strong>必须使用授权请求头在每个请求上发送令牌：Authorization: Bearer xxxxxx, Extra yyyyy</strong></p><p><strong>授权代码应该是短暂的</strong></p><p><strong>通过不响应任何HTTP请求来拒绝任何非TLS请求，以避免任何不安全的数据交换。响应403 Forbidden的HTTP请求。</strong></p><p><strong>考虑使用速率限制</strong></p><blockquote><p>保护您的API免受每小时数千次的机器人扫描威胁。您应该在早期就考虑实施流控</p></blockquote><p><strong>适当地设置HTTP请求头可以帮助锁定和保护您的Web应用程序</strong></p><p><strong>您的API应将收到的数据转换为规范形式，或直接拒绝响应，并返回400错误请求（400 Bad Request）的错误，并在其中包含有关错误或丢失数据的详细信息</strong></p><p><strong>所有通过Rest API交换的数据必须由API来校验</strong></p><p><strong>序列化JSON</strong></p><blockquote><p>JSON编码器的一个关键问题是阻止任意的可执行代码在浏览器或在服务器中（如果您用nodejs的话）执行。您必须使用适当的JSON序列化程序对用户输入的数据进行正确编码，以防止在浏览器上执行用户提供的输入，这些输入可能会包含恶意代码，而不是正常的用户数据</p></blockquote><p><strong>验证内容类型，主要使用application/*.json（Content-Type 头字段）</strong></p><blockquote><p>例如，接受application/x-www-form-urlencodedMIME类型可以允许攻击者创建一个表单并触发一个简单的POST请求。服务器不应该假定Content-Type。缺少Content-Type请求头或异常的Content-Type请求头，应该让服务器直接以4XX响应内容去拒绝请求</p></blockquote><h3 id="9-3-API-文档"><a href="#9-3-API-文档" class="headerlink" title="9.3 API 文档"></a>9.3 API 文档</h3><ul><li>在README.md模板为 API 填写 API Reference 段落。</li><li>尽量使用示例代码来描述 API 授权方法</li><li>解释 URL 的结构（仅 path，不包括根 URL），包括请求类型（方法）</li></ul><blockquote><p>对于每个端点（endpoint）说明</p></blockquote><p><strong>如果存在 URL 参数就使用 URL 参数，并根据URL中使用到的名称来指定它们</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Required: id=[integer]</span><br><span class="line">Optional: photo_id=[alphanumeric]</span><br></pre></td></tr></table></figure><p><strong>如果请求类型为 POST，请提供如何使用的示例。上述的URL参数规则在这也可以适用。分为可选和必需</strong></p><p><strong>响应成功，应该对应什么样的状态代码，返回了哪些数据？当人们需要知道他们的回调应该是期望的样子，这很有用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code: <span class="number">200</span></span><br><span class="line">Content: &#123; <span class="attr">id</span> : <span class="number">12</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>错误响应，大多数端点都存在许多失败的可能。从未经授权的访问到错误参数等。所有的（错误描述信息）都应该列在这里。虽然有可能会重复，但它却有助于防止别人的猜想（，减少使用时的排错时间）。例如</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">403</span>,</span><br><span class="line">    <span class="string">"message"</span> : <span class="string">"Authentication failed"</span>,</span><br><span class="line">    <span class="string">"description"</span> : <span class="string">"Invalid username or password"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用API​​设计工具，有很多开源工具可用于提供良好的文档</strong></p><h2 id="10-证书"><a href="#10-证书" class="headerlink" title="10. 证书"></a>10. 证书</h2><blockquote><p>确保您有权使用的这些资源。如果您使用其中的软件库，请记住先查询MIT，Apache或BSD（以更好地了解您所能够拥有的权限），但如果您打算修改它们，请查看许可证详细信息。图像和视频的版权可能会导致法律问题</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-Git&quot;&gt;&lt;a href=&quot;#1-Git&quot; class=&quot;headerlink&quot; title=&quot;1.Git&quot;&gt;&lt;/a&gt;1.Git&lt;/h2&gt;&lt;h3 id=&quot;1-1-一些Git规则&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="规范" scheme="http://blog.poetries.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="最佳实践" scheme="http://blog.poetries.top/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>editconfig配置</title>
    <link href="http://blog.poetries.top/2018/01/27/editconfig/"/>
    <id>http://blog.poetries.top/2018/01/27/editconfig/</id>
    <published>2018-01-27T14:48:24.000Z</published>
    <updated>2018-02-04T08:40:54.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>在团队开发中，统一的代码格式是必要的。但是不同开发人员的代码风格不同，代码编辑工具的默认格式也不相同，这样就造成代码的<code>differ</code>。而<code>editorConfig</code>可以帮助开发人员在不同的编辑器和IDE中定义和维护一致的编码风格</p></blockquote><h2 id="editorconfig"><a href="#editorconfig" class="headerlink" title="editorconfig"></a>editorconfig</h2><ul><li>一个<code>editorconfig</code>文件例子，用于设置<code>Python</code>和<code>JavaScript</code>行尾和缩进风格的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EditorConfig is awesome: http://EditorConfig.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># top-most EditorConfig file</span></span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unix-style newlines with a newline ending every file</span></span><br><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Matches multiple files with brace expansion notation</span></span><br><span class="line"><span class="comment"># Set default charset</span></span><br><span class="line">[*.&#123;js,py&#125;]</span><br><span class="line">charset = utf-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 space indentation</span></span><br><span class="line">[*.py]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tab indentation (no size specified)</span></span><br><span class="line">[*.js]</span><br><span class="line">indent_style = tab</span><br><span class="line"></span><br><span class="line"><span class="comment"># Indentation override for all JS under lib directory</span></span><br><span class="line">[lib/**.js]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Matches the exact files either package.json or .travis.yml</span></span><br><span class="line">[&#123;package.json,.travis.yml&#125;]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br></pre></td></tr></table></figure><h2 id="安装editorconfig"><a href="#安装editorconfig" class="headerlink" title="安装editorconfig"></a>安装editorconfig</h2><blockquote><p>当打开一个文件时，<code>EditorConfig</code>插件会在打开文件的目录和其每一级父目录查找<code>.editorconfig</code>文件，直到有一个配置文件<code>root=true</code>。<code>EditorConfig</code>配置文件从上往下读取，并且路径最近的文件最后被读取。匹配的配置属性按照属性应用在代码上，所以最接近代码文件的属性优先级最高。</p></blockquote><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><blockquote><p><code>EditorConfig</code>文件使用INI格式。斜杠<code>(/)</code>作为路径分隔符，<code>#</code>或者<code>;</code>作为注释。<code>EditorConfig</code>文件使用<code>UTF-8</code>格式、<code>CRLF</code>或<code>LF</code>作为换行符</p></blockquote><p><strong>通配符</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配除/之外的任意字符串</td></tr><tr><td><code>**</code></td><td>匹配任意字符串</td></tr><tr><td><code>?</code></td><td>匹配任意单个字符</td></tr><tr><td><code>[name</code>]</td><td>匹配name字符</td></tr><tr><td><code>[!name]</code></td><td>匹配非name字符</td></tr><tr><td><code>{s1,s2,s3}</code></td><td>匹配任意给定的字符串(since 0.11.0)</td></tr></tbody></table><p><strong>属性</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>indent_style</code></td><td>设置缩进风格，tab或者空格。tab是hard tabs，space为soft tabs。</td></tr><tr><td><code>indent_size</code></td><td>缩进的宽度，即列数，整数。如果indent_style为tab，则此属性默认为tab_width。</td></tr><tr><td><code>tab_width</code></td><td>设置tab的列数。默认是indent_size。</td></tr><tr><td><code>end_of_line</code></td><td>换行符，lf、cr和crlf</td></tr><tr><td><code>charset</code></td><td>编码，latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用utf-8-bom。</td></tr><tr><td><code>trim_trailing_whitespace</code></td><td>设为true表示会除去换行行首的任意空白字符。</td></tr><tr><td><code>insert_final_newline</code></td><td>设为true表明使文件以一个空白行结尾</td></tr><tr><td><code>root</code></td><td>表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件</td></tr></tbody></table><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p>下面以<code>sublime text</code>为例，测试<code>editorconfig</code>是否起作用。首先需要给<code>sublime</code>安装<code>EditorConfig</code>插件，然后在项目的根目录新建文件”<code>.editorconfig</code>“，内容如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EditorConfig is awesome: &lt;a onclick="javascript:pageTracker._trackPageview('/outgoing/EditorConfig.org');" href="http://EditorConfig.org"&gt;http://EditorConfig.org&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># top-most EditorConfig file</span></span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unix-style newlines with a newline ending every file</span></span><br><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Matches multiple files with brace expansion notation</span></span><br><span class="line"><span class="comment"># Set default charset</span></span><br><span class="line">[*.&#123;js,html,css&#125;]</span><br><span class="line">charset = utf-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tab indentation (no size specified)</span></span><br><span class="line">[*.js]</span><br><span class="line">indent_style = tab</span><br><span class="line">tab_width = 50</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在团队开发中，统一的代码格式是必要的。但是不同开发人员的代码风格不同，代码编辑工具的默认格式也不相同，这样就造成代
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="规范" scheme="http://blog.poetries.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="editconfig" scheme="http://blog.poetries.top/tags/editconfig/"/>
    
  </entry>
  
  <entry>
    <title>eslint 常用配置</title>
    <link href="http://blog.poetries.top/2018/01/27/eslint-config/"/>
    <id>http://blog.poetries.top/2018/01/27/eslint-config/</id>
    <published>2018-01-27T14:41:24.000Z</published>
    <updated>2018-02-04T08:40:54.847Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'rules'</span>: &#123;</span><br><span class="line">    <span class="comment">// no-var</span></span><br><span class="line">    <span class="string">'no-var'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="comment">// 要求或禁止 var 声明中的初始化</span></span><br><span class="line">    <span class="string">'init-declarations'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 强制使用单引号</span></span><br><span class="line">    <span class="string">'quotes'</span>: [<span class="string">'error'</span>, <span class="string">'single'</span>],</span><br><span class="line">    <span class="comment">// 要求或禁止使用分号而不是 ASI</span></span><br><span class="line">    <span class="string">'semi'</span>: [<span class="string">'error'</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 禁止不必要的分号</span></span><br><span class="line">    <span class="string">'no-extra-semi'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="comment">// 强制使用一致的换行风格</span></span><br><span class="line">    <span class="string">'linebreak-style'</span>: [<span class="string">'error'</span>, <span class="string">'unix'</span>],</span><br><span class="line">    <span class="comment">// 空格2个</span></span><br><span class="line">    <span class="string">'indent'</span>: [<span class="string">'error'</span>, <span class="number">2</span>, &#123;<span class="string">'SwitchCase'</span>: <span class="number">1</span>&#125;],</span><br><span class="line">    <span class="comment">// 指定数组的元素之间要以空格隔开(,后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格</span></span><br><span class="line">    <span class="string">'array-bracket-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 在块级作用域外访问块内定义的变量是否报错提示</span></span><br><span class="line">    <span class="string">'block-scoped-var'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// if while function 后面的&#123;必须与if在同一行，java风格。</span></span><br><span class="line">    <span class="string">'brace-style'</span>: [<span class="number">2</span>, <span class="string">'1tbs'</span>, &#123;<span class="string">'allowSingleLine'</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">    <span class="comment">// 双峰驼命名格式</span></span><br><span class="line">    <span class="string">'camelcase'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号， </span></span><br><span class="line">    <span class="string">'comma-dangle'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 控制逗号前后的空格</span></span><br><span class="line">    <span class="string">'comma-spacing'</span>: [<span class="number">2</span>, &#123;<span class="string">'before'</span>: <span class="literal">false</span>, <span class="string">'after'</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">    <span class="comment">// 控制逗号在行尾出现还是在行首出现</span></span><br><span class="line">    <span class="string">'comma-style'</span>: [<span class="number">2</span>, <span class="string">'last'</span>],</span><br><span class="line">    <span class="comment">// 圈复杂度</span></span><br><span class="line">    <span class="string">'complexity'</span>: [<span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">    <span class="comment">// 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always</span></span><br><span class="line">    <span class="string">'computed-property-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// TODO 关闭 强制方法必须返回值，TypeScript强类型，不配置</span></span><br><span class="line">    <span class="comment">// 'consistent-return': 0</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>更多配置规则说明</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"><span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line"><span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line"><span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"><span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"><span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line"><span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"><span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line"><span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"><span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"><span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line"><span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"><span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line"><span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"><span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"><span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"><span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line"><span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"><span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"><span class="string">"no-empty"</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-label"</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line"><span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"><span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line"><span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"><span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line"><span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"><span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"><span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line"><span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line"><span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line"><span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"><span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line"><span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line"><span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line"><span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line"><span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"><span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"><span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"><span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line"><span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"><span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"><span class="string">"no-labels"</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line"><span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"><span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"><span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"><span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"><span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line"><span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></span><br><span class="line"><span class="string">"no-multi-spaces"</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line"><span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line"><span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line"><span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line"><span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"><span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"><span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"><span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line"><span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line"><span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line"><span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"><span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"><span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line"><span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"><span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"><span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"><span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line"><span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line"><span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line"><span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"><span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line"><span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"><span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"><span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"><span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"><span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line"><span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"><span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"><span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"><span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"><span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"><span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"><span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line"><span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"><span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"><span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></span><br><span class="line"><span class="string">"no-undef"</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line"><span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"><span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line"><span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line"><span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"><span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"><span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line"><span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line"><span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"><span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line"><span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"><span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line"><span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"><span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line"><span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line"><span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"><span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"><span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"><span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"><span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line"><span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></span><br><span class="line"><span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"><span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line"><span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"><span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line"><span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"><span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line"><span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"><span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line"><span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></span><br><span class="line"><span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"><span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"><span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line"><span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"><span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line"><span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"><span class="string">"eqeqeq"</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line"><span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line"><span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"><span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"><span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"><span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line"><span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line"><span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line"><span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line"><span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"><span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line"><span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line"><span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line"><span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"><span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line"><span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"><span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line"><span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"><span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"><span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"><span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line"><span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"><span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"><span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"><span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line"><span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line"><span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line"><span class="string">"quotes"</span>: [<span class="number">1</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></span><br><span class="line"><span class="string">"quote-props"</span>:[<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"><span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"><span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line"><span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line"><span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line"><span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line"><span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line"><span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"><span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"><span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"><span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"><span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"><span class="string">"space-return-throw-case"</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"><span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"><span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"><span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line"><span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"><span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line"><span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"><span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"><span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"><span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"><span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="规范" scheme="http://blog.poetries.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="eslint" scheme="http://blog.poetries.top/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>广告行业一些术语</title>
    <link href="http://blog.poetries.top/2018/01/27/ad-term/"/>
    <id>http://blog.poetries.top/2018/01/27/ad-term/</id>
    <published>2018-01-27T14:21:24.000Z</published>
    <updated>2018-02-04T08:40:54.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、平台"><a href="#一、平台" class="headerlink" title="一、平台"></a>一、平台</h2><p><strong>DSP</strong></p><blockquote><p><code>DSP</code>广告简单来说主要涉及：广告主，媒体，访客</p></blockquote><ul><li><code>DSP</code>广告对接多个<code>Ad Exchange</code>，<code>Ad Exchange</code>中有大量的媒体广告位</li></ul><p><strong>DMP</strong></p><blockquote><p>Data-ManagementPlatform，数据管理平台</p></blockquote><ul><li><p>定义：数据管理平台能够帮助所有涉及广告库存购买和出售的各方管理其数据、更方便地使用第三方数据、增强他们对所有这些数据的理解、传回数据或将定制数据传入某一平台，以进行更好地定位</p></li><li><p>是把分散的数据进行整合纳入统一的技术平台</p></li></ul><h2 id="二、专业术语"><a href="#二、专业术语" class="headerlink" title="二、专业术语"></a>二、专业术语</h2><p><strong>信息流广告</strong></p><ul><li><p>信息流广告是目前移动APP上常见的广告形式之一</p><ul><li>简述特点如下<ul><li>出现位置：穿插在产品原有内容信息当中出现（包括当下社交平台的feeds，资讯新闻类产品的文章列表）</li><li>展现形式：常见的有文字图片加链接形式，现也有以视频流的形式播放出现</li><li>投放特点：基于用户行为以及平台上积累的大数据，精准投放；（包括用户在平台上的浏览、评论、分享等各种互动行为，了解用户偏好，匹配相关度高的广告）</li><li>收费形式：CPM（按展示次数收费）和CPC（按点击次数收费）为主</li></ul></li></ul></li><li><p>优点</p><ul><li>与原有内容融合在一起出现，在用户视觉焦点中，不容易被忽视</li><li>精准投放，转化率高</li><li>对用户的打扰性低</li><li>可以通过让用户参与互动（评论、分享、投票）等形式提升广告效果</li></ul></li></ul><h3 id="2-1-行业相关"><a href="#2-1-行业相关" class="headerlink" title="2.1 行业相关"></a>2.1 行业相关</h3><ul><li><strong>Rich Media 富媒体</strong>，这种应用采取了所有适合的最先进技术，以最好的传达广告主的信息，甚至与用户进行互动，如视频、flash广告等</li><li><strong>植入式广告</strong> 在电影或电视剧或者其它综艺节目插入相关的广告，如变形金刚，非诚勿扰等</li><li><strong>SEM</strong>：Search EngineMarketing的缩写，即搜索引擎营销</li><li><strong>SEO</strong>：SearchEngineOptimization的缩写，即搜索引擎优化</li><li><strong>EDM</strong>：Electronic Direct Marketing的缩写，就是电子邮件营销</li><li><strong>AdWords</strong>：Google的关键词竞价广告</li><li><strong>Banner</strong>：横幅广告</li><li><strong>Button</strong>：图标广告</li><li><strong>PR推广</strong>：软文推广</li><li><strong>Adertorial</strong>：软文广告的一种，即付费文章，故意设计成像一篇普通的文章</li><li><strong>Banner Ad</strong>：横幅广告，网页顶部、底部或者侧边的广告展示位置</li><li><strong>DSP展示广告</strong>：是<code>Demand-SidePlatform</code>的缩写，即需求方平台</li></ul><h3 id="2-2-计费相关"><a href="#2-2-计费相关" class="headerlink" title="2.2 计费相关"></a>2.2 计费相关</h3><ul><li><strong>CPS</strong>：<code>Cost Per Sales</code>的缩写，即销售分成</li><li><strong>CPA</strong>：<code>Cost Per Action</code>，每次动作成本</li><li><strong>CPM</strong>：<code>Cost Per Mille</code>，或者<code>Cost Per Thousand</code>，即每千人成本</li><li><strong>CPC</strong>：<code>Cost Per Click</code>，<code>Cost Per Thousand Click-Through</code>，即每点击成本</li><li><strong>CPR</strong>：<code>Cost Per Response</code>，即每回应成本</li><li><strong>CPP</strong>：<code>Cost Per Purchase</code>，即每购买成本</li><li><strong>UV</strong>：<code>Unique Vister</code>的缩写，独立访客</li><li><strong>PV</strong>：<code>page view</code>，即网站被浏览的总次数</li><li><strong>IP</strong>：即<code>internet protocol</code>,指独立<code>IP</code>数，一天内相同IP地址只被计算一次</li><li><strong>PR值</strong>：全称为<code>Pagerank</code>(网页级别)，是用于评测一个网页“重要性”的一种方法</li><li><strong>Alexa</strong>：<code>Alexa.com</code>是专门发布网站世界排名的网站，网站排名有两种：综合排名和分类排名</li><li><strong>Click</strong>：(点击量/点击次数)即<code>Click through</code>，用户点击广告的次数，评估广告效果的指标之一</li><li><strong>Click Rate</strong>：(点击率/点进率)即<code>Clickthrough-Rate</code>，即网络广告被点击的次数与访问次数的比例，即<code>clicks/impressions</code>.如果这个页面被访问了100次，而页面上的广告也被点击了20次，那么CTR为20%，CTR是评估广告效果的指标之一</li></ul><h3 id="2-3-转化相关"><a href="#2-3-转化相关" class="headerlink" title="2.3 转化相关"></a>2.3 转化相关</h3><ul><li><p><strong>ROI</strong> <code>Return OnInvestment</code>的缩写，投资报酬率</p></li><li><p><strong>CR转化率</strong> <code>Conversion Rate</code>的缩写，是指访问某一网站访客中，转化的访客占全部访客的比例</p></li><li><p><strong>二跳率</strong> 网站页面展开后，用户在页面上产生的首次点击被称为“二跳”，二跳的次数即为”二跳量”，二跳量与浏览量的比值称为页面的二跳率</p></li><li><p><strong>跳出率</strong> 跳出率是指浏览了一个页面就离开的用户占一组页面或一个页面访问次数的百分比</p></li><li><p><strong>人均访问页面</strong> <code>PV总和除以IP=人均访问页面</code>。人均访问页面<code>大于等于10</code>个，才算优质用户</p></li><li><p><strong>重复购买率</strong> 指消费者在网站中的重复购买次数</p></li><li><p><strong>客单价</strong> 是指每一个订单的平均购买商品金额，也就是平均交易金额</p></li></ul><h3 id="2-4-理论"><a href="#2-4-理论" class="headerlink" title="2.4 理论"></a>2.4 理论</h3><p><strong>马太效应：（Matthew Effect）</strong> </p><ul><li>指强者愈强、弱者愈弱、好的愈好，坏的愈坏，多的愈多，少的愈少的现象，广泛应用于社会心理学、教育、金融以及科学等众多领域。</li></ul><p><strong>羊群效应</strong></p><ul><li>指人们经常受到多数人影响，从而跟从大众的思想或行为，也被称为“从众效应”。人们会追随大众所同意的，将自己的意见默认否定，且不会主观上思考事件的意义。羊群效应是诉诸群众谬误的基础</li></ul><p><strong>霍桑效应</strong></p><ul><li>指那些意识到自己正在被别人观察的个人具有改变自己行为的倾向</li></ul><p><strong>病毒式营销</strong></p><ul><li>源于英文词汇viralmarketing。常用于进行网站推广、品牌推广等。利用的是用户口碑传播的原理，在互联网上，这种“口碑传播”更为方便，可以像病毒一样迅速蔓延，因此病毒性营销成为一种高效的信息传播方式，而且，由于这种传播是用户之间自发进行的，因此几乎是不需要费用的网络营销手段。</li></ul><p><strong>斯德哥尔摩综合征</strong></p><ul><li>指犯罪的被害者对于犯罪者产生情感，甚至反过来帮助犯罪者的一种情结。这个情感造成被害人对加害人产生好感、依赖心、甚至协助加害人。人质会对劫持者产生一种心理上的依赖感。他们的生死操控在劫持者手里，劫持者让他们活下来，他们便不胜感激。他们与劫持者共命运，把劫持者的前途当成自己的前途，把劫持者的安危视为自己的安危。于是，他们采取了“我们反对他们”的态度，把解救者当成了敌人</li></ul><p><strong>长尾理论</strong> </p><ul><li>网络时代兴起的一种新理论，由于成本和效率的因素，当商品储存流通展示的场地和渠道足够宽广，商品生产成本急剧下降以至于个人都可以进行生产，并且商品的销售成本急剧降低时，几乎任何以前看似需求极低的产品，只要有卖，都会有人买。这些需求和销量不高的产品所占据的共同市场份额，可以和主流产品的市场份额相比，甚至更大</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、平台&quot;&gt;&lt;a href=&quot;#一、平台&quot; class=&quot;headerlink&quot; title=&quot;一、平台&quot;&gt;&lt;/a&gt;一、平台&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;DSP&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;DSP&lt;/code&gt;广告简单来
      
    
    </summary>
    
      <category term="Ad" scheme="http://blog.poetries.top/categories/Ad/"/>
    
    
      <category term="广告术语" scheme="http://blog.poetries.top/tags/%E5%B9%BF%E5%91%8A%E6%9C%AF%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>移动设备分辨率预览</title>
    <link href="http://blog.poetries.top/2018/01/27/mobile-device-size/"/>
    <id>http://blog.poetries.top/2018/01/27/mobile-device-size/</id>
    <published>2018-01-27T13:20:43.000Z</published>
    <updated>2018-02-04T08:40:54.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源 <a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions" target="_blank" rel="noopener">https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions</a></p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-006d909cb0d4729c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源 &lt;a href=&quot;https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://w
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="移动端" scheme="http://blog.poetries.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="适配" scheme="http://blog.poetries.top/tags/%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>图解前端性能优化</title>
    <link href="http://blog.poetries.top/2018/01/12/fed-performance-optimization/"/>
    <id>http://blog.poetries.top/2018/01/12/fed-performance-optimization/</id>
    <published>2018-01-12T03:24:03.000Z</published>
    <updated>2018-02-04T08:40:54.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、css和js的装载与执行"><a href="#一、css和js的装载与执行" class="headerlink" title="一、css和js的装载与执行"></a>一、css和js的装载与执行</h2><h3 id="1-1-HTML-页面加载渲染的过程"><a href="#1-1-HTML-页面加载渲染的过程" class="headerlink" title="1.1 HTML 页面加载渲染的过程"></a>1.1 HTML 页面加载渲染的过程</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-db7c77d1567a95cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="1-2-HTML渲染过程的一些特点"><a href="#1-2-HTML渲染过程的一些特点" class="headerlink" title="1.2 HTML渲染过程的一些特点"></a>1.2 HTML渲染过程的一些特点</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-e1e6feedcc2fdb1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="1-3-css-阻塞和-js-阻塞"><a href="#1-3-css-阻塞和-js-阻塞" class="headerlink" title="1.3 css 阻塞和 js 阻塞"></a>1.3 css 阻塞和 js 阻塞</h3><h4 id="1-3-1-CSS阻塞"><a href="#1-3-1-CSS阻塞" class="headerlink" title="1.3.1 CSS阻塞"></a>1.3.1 CSS阻塞</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-508aa2aef18de2b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="1-3-2-JS阻塞"><a href="#1-3-2-JS阻塞" class="headerlink" title="1.3.2 JS阻塞"></a>1.3.2 JS阻塞</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d43c8d6cc854ba71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、资源的压缩与合并"><a href="#二、资源的压缩与合并" class="headerlink" title="二、资源的压缩与合并"></a>二、资源的压缩与合并</h2><h3 id="2-1-文件合并"><a href="#2-1-文件合并" class="headerlink" title="2.1 文件合并"></a>2.1 文件合并</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-bf9c0905ae7544a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-2-css、js-及-HTML压缩"><a href="#2-2-css、js-及-HTML压缩" class="headerlink" title="2.2 css、js 及 HTML压缩"></a>2.2 css、js 及 HTML压缩</h3><h4 id="2-2-1-CSS压缩"><a href="#2-2-1-CSS压缩" class="headerlink" title="2.2.1 CSS压缩"></a>2.2.1 CSS压缩</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-b7e0b78856dd41ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="2-2-2-JS压缩"><a href="#2-2-2-JS压缩" class="headerlink" title="2.2.2 JS压缩"></a>2.2.2 JS压缩</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-28bca2afc251aaad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="2-2-3-HTML压缩"><a href="#2-2-3-HTML压缩" class="headerlink" title="2.2.3 HTML压缩"></a>2.2.3 HTML压缩</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-6216398956a2b443.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-3-http-清求的过程及潜在的性能优化点"><a href="#2-3-http-清求的过程及潜在的性能优化点" class="headerlink" title="2.3 http 清求的过程及潜在的性能优化点"></a>2.3 http 清求的过程及潜在的性能优化点</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-42ba978daacbdbfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-c228e0f7ea3026a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="三、图片相关的优化"><a href="#三、图片相关的优化" class="headerlink" title="三、图片相关的优化"></a>三、图片相关的优化</h2><h3 id="3-1-不同格式图片常用的业务场景"><a href="#3-1-不同格式图片常用的业务场景" class="headerlink" title="3.1 不同格式图片常用的业务场景"></a>3.1 不同格式图片常用的业务场景</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-bb112b24d483508f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="3-2-图片压缩几种方法-雪碧图、Image-inline"><a href="#3-2-图片压缩几种方法-雪碧图、Image-inline" class="headerlink" title="3.2 图片压缩几种方法-雪碧图、Image inline"></a>3.2 图片压缩几种方法-雪碧图、Image inline</h3><h4 id="3-2-1-使用矢量图"><a href="#3-2-1-使用矢量图" class="headerlink" title="3.2.1 使用矢量图"></a>3.2.1 使用矢量图</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-7268251dc26df726.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="3-2-2-在安卓下使用webp"><a href="#3-2-2-在安卓下使用webp" class="headerlink" title="3.2.2 在安卓下使用webp"></a>3.2.2 在安卓下使用webp</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-a2efc91b021b0908.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="四、-懒加载与预加载"><a href="#四、-懒加载与预加载" class="headerlink" title="四、 懒加载与预加载"></a>四、 懒加载与预加载</h2><h3 id="4-1-懒加载原理"><a href="#4-1-懒加载原理" class="headerlink" title="4.1 懒加载原理"></a>4.1 懒加载原理</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-e224d3c1b30b1166.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="4-2-预加载原理"><a href="#4-2-预加载原理" class="headerlink" title="4.2 预加载原理"></a>4.2 预加载原理</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-15d023ecf8135497.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="4-3-懒加载、预加载使用场景"><a href="#4-3-懒加载、预加载使用场景" class="headerlink" title="4.3 懒加载、预加载使用场景"></a>4.3 懒加载、预加载使用场景</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-32e8e5e65e22520d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-cfb25a3e684a3f63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-909720cb7fba2464.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d4d97036deeca145.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="4-4-预加载原生-js-和-PreloadJS-实现"><a href="#4-4-预加载原生-js-和-PreloadJS-实现" class="headerlink" title="4.4 预加载原生 js 和 PreloadJS 实现"></a>4.4 预加载原生 js 和 PreloadJS 实现</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-70497a61965504c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d9032f68dce4346a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="五、缓存"><a href="#五、缓存" class="headerlink" title="五、缓存"></a>五、缓存</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d7d9edfaf5aa7579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1dbc343a9ec775eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-366777492f307674.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-39b360c7512a00a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-0ace88d37f29a1ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-aaea0d655b517f8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-ded1efe433d4c007.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-0cc71bee891f5d44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-abe977f4a60605b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-657b9b61ba419d9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-a47a8e5fb1099791.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1b339df2c203a1fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="六、重绘与回流"><a href="#六、重绘与回流" class="headerlink" title="六、重绘与回流"></a>六、重绘与回流</h2><h3 id="6-1-什么是重绘与回流"><a href="#6-1-什么是重绘与回流" class="headerlink" title="6.1 什么是重绘与回流"></a>6.1 什么是重绘与回流</h3><h4 id="6-1-1-重绘"><a href="#6-1-1-重绘" class="headerlink" title="6.1.1 重绘"></a>6.1.1 重绘</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-83af5a7aaf32ad70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="6-1-2-回流"><a href="#6-1-2-回流" class="headerlink" title="6.1.2 回流"></a>6.1.2 回流</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4bddd29e462cc371.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-76cf21bf4a432931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-2-避免重绘回流的两种方法"><a href="#6-2-避免重绘回流的两种方法" class="headerlink" title="6.2 避免重绘回流的两种方法"></a>6.2 避免重绘回流的两种方法</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4b5d315909066dd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-f05cb8a0cc10c2a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-923dc6a9637d50dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1c752f8cc61cd4ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-3-css-性能让-Javacript-变慢？"><a href="#6-3-css-性能让-Javacript-变慢？" class="headerlink" title="6.3 css 性能让 Javacript 变慢？"></a>6.3 css 性能让 Javacript 变慢？</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-cea456689dc81a54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-4-案例解析-重绘、回流及图层"><a href="#6-4-案例解析-重绘、回流及图层" class="headerlink" title="6.4 案例解析-重绘、回流及图层"></a>6.4 案例解析-重绘、回流及图层</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-04085f94a1992a54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-a08ea0e9ad2ab135.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-16e25f3c65f2d858.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d8046867832235a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-4a868eef59433cc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-14b4d57b2f9a2f78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-8b044762ba6ed086.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="6-5-实战优化点总结"><a href="#6-5-实战优化点总结" class="headerlink" title="6.5 实战优化点总结"></a>6.5 实战优化点总结</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-897fa5f8ec6a24d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="七、浏览器存储"><a href="#七、浏览器存储" class="headerlink" title="七、浏览器存储"></a>七、浏览器存储</h2><h3 id="7-1-cookies"><a href="#7-1-cookies" class="headerlink" title="7.1 cookies"></a>7.1 cookies</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-dd1a4cbc59e979dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-754f247c65ebb613.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-eef80297b5c5a12c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-fe67b7381cd4f871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-d098205326c03acf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-0e54d54b577be81d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-317dd9d7b61a0659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-2-LocalStorage、SessionStorage"><a href="#7-2-LocalStorage、SessionStorage" class="headerlink" title="7.2 LocalStorage、SessionStorage"></a>7.2 LocalStorage、SessionStorage</h3><h4 id="7-2-1-LocalStorage"><a href="#7-2-1-LocalStorage" class="headerlink" title="7.2.1 LocalStorage"></a>7.2.1 LocalStorage</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-6c8d497e2ba18890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="7-2-2-SessionStorage"><a href="#7-2-2-SessionStorage" class="headerlink" title="7.2.2 SessionStorage"></a>7.2.2 SessionStorage</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-3aa67b0c1d03ae03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-3-IndexedDB"><a href="#7-3-IndexedDB" class="headerlink" title="7.3 IndexedDB"></a>7.3 IndexedDB</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4be5537b37c85261.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-4-案例解析"><a href="#7-4-案例解析" class="headerlink" title="7.4 案例解析"></a>7.4 案例解析</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-948146becfc107ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-beaec4315a195788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1ad8d12033872186.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-5-PWA与Service-Workers"><a href="#7-5-PWA与Service-Workers" class="headerlink" title="7.5 PWA与Service Workers"></a>7.5 PWA与Service Workers</h3><h4 id="7-5-1-PWA"><a href="#7-5-1-PWA" class="headerlink" title="7.5.1 PWA"></a>7.5.1 PWA</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-85ab5759c2779ef9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="7-5-2-Service-Workers"><a href="#7-5-2-Service-Workers" class="headerlink" title="7.5.2 Service Workers"></a>7.5.2 Service Workers</h4><p><img src="http://upload-images.jianshu.io/upload_images/1480597-7b6fa17f0d752474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-54c4d665cb592c7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-1aae704c7a32cfd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="7-6-Service-Workers-离线应用"><a href="#7-6-Service-Workers-离线应用" class="headerlink" title="7.6 Service Workers-离线应用"></a>7.6 Service Workers-离线应用</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-af1c1d5a7359e24b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-fcff980c6603351b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="八、移动H5前端性能优化指南"><a href="#八、移动H5前端性能优化指南" class="headerlink" title="八、移动H5前端性能优化指南"></a>八、移动H5前端性能优化指南</h2><p><img src="https://camo.githubusercontent.com/db045941b5adebe26eae1202b9286fe8c39e5fa2/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3934383631342d313735326635633839393363633161302e6a7065673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、css和js的装载与执行&quot;&gt;&lt;a href=&quot;#一、css和js的装载与执行&quot; class=&quot;headerlink&quot; title=&quot;一、css和js的装载与执行&quot;&gt;&lt;/a&gt;一、css和js的装载与执行&lt;/h2&gt;&lt;h3 id=&quot;1-1-HTML-页面加载渲染的过
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="性能优化" scheme="http://blog.poetries.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>echart使用小结</title>
    <link href="http://blog.poetries.top/2018/01/12/echart/"/>
    <id>http://blog.poetries.top/2018/01/12/echart/</id>
    <published>2018-01-12T02:05:43.000Z</published>
    <updated>2018-02-04T08:40:54.847Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>十一个组件选项主要用来进行交互</p></blockquote><h2 id="一、Timeline选项"><a href="#一、Timeline选项" class="headerlink" title="一、Timeline选项"></a>一、Timeline选项</h2><ul><li>时间轴，每个图表最多仅有一个时间轴控件</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-6a02bd853069b904.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、Title选项"><a href="#二、Title选项" class="headerlink" title="二、Title选项"></a>二、Title选项</h2><ul><li>每个图表最多仅有一个标题控件，每个标题控件可设主副标题</li></ul><blockquote><p>可以对标题文字的大小样式进行设置</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-aeae6a9ace95a4aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="三、toolbox"><a href="#三、toolbox" class="headerlink" title="三、toolbox"></a>三、toolbox</h2><ul><li>工具箱，每个图表最多仅有一个工具箱。工具箱里面可以实现图表类型的切换，保存图片，刷新，查看数据等功能。可以对其像素进行设置</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-dcc780629ce8ad78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    mark : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : &#123;</span><br><span class="line"></span><br><span class="line">            mark : <span class="string">'辅助线开关'</span>,</span><br><span class="line"></span><br><span class="line">            markUndo : <span class="string">'删除辅助线'</span>,</span><br><span class="line"></span><br><span class="line">            markClear : <span class="string">'清空辅助线'</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        lineStyle : &#123;</span><br><span class="line"></span><br><span class="line">            width : <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">            color : <span class="string">'#1e90ff'</span>,</span><br><span class="line"></span><br><span class="line">            type : <span class="string">'dashed'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    dataZoom : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : &#123;</span><br><span class="line"></span><br><span class="line">            dataZoom : <span class="string">'区域缩放'</span>,</span><br><span class="line"></span><br><span class="line">            dataZoomReset : <span class="string">'区域缩放后退'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    dataView : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : <span class="string">'数据视图'</span>,</span><br><span class="line"></span><br><span class="line">        readOnly: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        lang: [<span class="string">'数据视图'</span>, <span class="string">'关闭'</span>, <span class="string">'刷新'</span>]</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    magicType: &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : &#123;</span><br><span class="line"></span><br><span class="line">            line : <span class="string">'折线图切换'</span>,</span><br><span class="line"></span><br><span class="line">            bar : <span class="string">'柱形图切换'</span>,</span><br><span class="line"></span><br><span class="line">            stack : <span class="string">'堆积'</span>,</span><br><span class="line"></span><br><span class="line">            tiled : <span class="string">'平铺'</span>,</span><br><span class="line"></span><br><span class="line">            force: <span class="string">'力导向布局图切换'</span>,</span><br><span class="line"></span><br><span class="line">            chord: <span class="string">'和弦图切换'</span>,</span><br><span class="line"></span><br><span class="line">            pie: <span class="string">'饼图切换'</span>,</span><br><span class="line"></span><br><span class="line">            funnel: <span class="string">'漏斗图切换'</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        option: &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// line: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// bar: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// stack: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// tiled: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// force: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// chord: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// pie: &#123;...&#125;,</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// funnel: &#123;...&#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        type : []</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    restore : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : <span class="string">'还原'</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    saveAsImage : &#123;</span><br><span class="line"></span><br><span class="line">        show : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        title : <span class="string">'保存为图片'</span>,</span><br><span class="line"></span><br><span class="line">        type : <span class="string">'png'</span>,</span><br><span class="line"></span><br><span class="line">        lang : [<span class="string">'点击保存'</span>]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、tooltip"><a href="#四、tooltip" class="headerlink" title="四、tooltip"></a>四、tooltip</h2><ul><li>提示框，鼠标悬浮交互时的信息提示</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-b9c8f725f2f4a50a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="五、legend"><a href="#五、legend" class="headerlink" title="五、legend"></a>五、legend</h2><ul><li>图例，每个图表最多仅有一个图例，混搭图表共享</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-0d79caad2b169951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="六、dataRange"><a href="#六、dataRange" class="headerlink" title="六、dataRange"></a>六、dataRange</h2><ul><li>值域选择，每个图表最多仅有一个值域控件</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-c0df8ad67dbd51b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="七、dataZoom"><a href="#七、dataZoom" class="headerlink" title="七、dataZoom"></a>七、dataZoom</h2><ul><li><a href="http://echarts.baidu.com/echarts2/doc/example/dataZoom.html" target="_blank" rel="noopener">数据区域缩放</a>。与toolbox.feature.dataZoom同步，仅对直角坐标系图表有效</li></ul><h2 id="roamController"><a href="#roamController" class="headerlink" title="roamController"></a>roamController</h2><ul><li><a href="http://echarts.baidu.com/echarts2/doc/example/map1.html" target="_blank" rel="noopener">缩放漫游组件</a>，仅对地图有效</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-15c5718cc0299a2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="八、grid"><a href="#八、grid" class="headerlink" title="八、grid"></a>八、grid</h2><blockquote><p>直角坐标系内绘图网格</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-264f17badedea9f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="九、xAxis"><a href="#九、xAxis" class="headerlink" title="九、xAxis"></a>九、xAxis</h2><blockquote><p>直角坐标系中横轴数组，数组中每一项代表一条横轴坐标轴，仅有一条时可省略数组。最多同时存在2条横轴，单条横轴时可指定安放于grid的底部（默认）或顶部，2条同时存在时位置互斥，默认第一条安放于底部，第二条安放于顶部</p></blockquote><h2 id="十、yAxis"><a href="#十、yAxis" class="headerlink" title="十、yAxis"></a>十、yAxis</h2><blockquote><p>直角坐标系中纵轴数组，数组中每一项代表一条纵轴坐标轴，仅有一条时可省略数组。最多同时存在2条纵轴，单条纵轴时可指定安放于grid的左侧（默认）或右侧，2条同时存在时位置互斥，默认第一条安放于左侧，第二条安放于右侧</p></blockquote><ul><li>坐标轴有三种类型，类目型、数值型和时间型，纵轴通常为数值型，但条形图时则纵轴为类目型</li></ul><h2 id="十一、series（通用）"><a href="#十一、series（通用）" class="headerlink" title="十一、series（通用）"></a>十一、series（通用）</h2><blockquote><p>驱动图表生成的数据内容数组，数组中每一项为一个系列的选项及数据，其中个别选项仅在部分图表类型中有效，请注意适用类型</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;十一个组件选项主要用来进行交互&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、Timeline选项&quot;&gt;&lt;a href=&quot;#一、Timeline选项&quot; class=&quot;headerlink&quot; title=&quot;一、Timeline选项&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Echart" scheme="http://blog.poetries.top/tags/Echart/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常用API合集</title>
    <link href="http://blog.poetries.top/2017/12/24/js-api/"/>
    <id>http://blog.poetries.top/2017/12/24/js-api/</id>
    <published>2017-12-24T03:10:43.000Z</published>
    <updated>2018-02-04T08:40:54.863Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源于互联网</p></blockquote><h2 id="一、节点"><a href="#一、节点" class="headerlink" title="一、节点"></a>一、节点</h2><p><strong>1.1 节点属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Node.nodeName   <span class="comment">//返回节点名称，只读</span></span><br><span class="line">Node.nodeType   <span class="comment">//返回节点类型的常数值，只读</span></span><br><span class="line">Node.nodeValue  <span class="comment">//返回Text或Comment节点的文本值，只读</span></span><br><span class="line">Node.textContent  <span class="comment">//返回当前节点和它的所有后代节点的文本内容，可读写</span></span><br><span class="line">Node.baseURI    <span class="comment">//返回当前网页的绝对路径</span></span><br><span class="line"></span><br><span class="line">Node.ownerDocument  <span class="comment">//返回当前节点所在的顶层文档对象，即document</span></span><br><span class="line">Node.nextSibling  <span class="comment">//返回紧跟在当前节点后面的第一个兄弟节点</span></span><br><span class="line">Node.previousSibling  <span class="comment">//返回当前节点前面的、距离最近的一个兄弟节点</span></span><br><span class="line">Node.parentNode   <span class="comment">//返回当前节点的父节点</span></span><br><span class="line">Node.parentElement  <span class="comment">//返回当前节点的父Element节点</span></span><br><span class="line">Node.childNodes   <span class="comment">//返回当前节点的所有子节点</span></span><br><span class="line">Node.firstChild  <span class="comment">//返回当前节点的第一个子节点</span></span><br><span class="line">Node.lastChild   <span class="comment">//返回当前节点的最后一个子节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//parentNode接口</span></span><br><span class="line">Node.children  <span class="comment">//返回指定节点的所有Element子节点</span></span><br><span class="line">Node.firstElementChild  <span class="comment">//返回当前节点的第一个Element子节点</span></span><br><span class="line">Node.lastElementChild   <span class="comment">//返回当前节点的最后一个Element子节点</span></span><br><span class="line">Node.childElementCount  <span class="comment">//返回当前节点所有Element子节点的数目。</span></span><br></pre></td></tr></table></figure><p><strong>1.2 操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Node.appendChild(node)   <span class="comment">//向节点添加最后一个子节点</span></span><br><span class="line">Node.hasChildNodes()   <span class="comment">//返回布尔值，表示当前节点是否有子节点</span></span><br><span class="line">Node.cloneNode(<span class="literal">true</span>);  <span class="comment">// 默认为false(克隆节点), true(克隆节点及其属性，以及后代)</span></span><br><span class="line">Node.insertBefore(newNode,oldNode)  <span class="comment">// 在指定子节点之前插入新的子节点</span></span><br><span class="line">Node.removeChild(node)   <span class="comment">//删除节点，在要删除节点的父节点上操作</span></span><br><span class="line">Node.replaceChild(newChild,oldChild)  <span class="comment">//替换节点</span></span><br><span class="line">Node.contains(node)  <span class="comment">//返回一个布尔值，表示参数节点是否为当前节点的后代节点。</span></span><br><span class="line">Node.compareDocumentPosition(node)   <span class="comment">//返回一个7个比特位的二进制值，表示参数节点和当前节点的关系</span></span><br><span class="line">Node.isEqualNode(noe)  <span class="comment">//返回布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。</span></span><br><span class="line">Node.normalize()   <span class="comment">//用于清理当前节点内部的所有Text节点。它会去除空的文本节点，并且将毗邻的文本节点合并成一个。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ChildNode接口</span></span><br><span class="line">Node.remove()  <span class="comment">//用于删除当前节点</span></span><br><span class="line">Node.before()  <span class="comment">//</span></span><br><span class="line">Node.after()</span><br><span class="line">Node.replaceWith()</span><br></pre></td></tr></table></figure><p><strong>1.3 Document节点</strong></p><p><strong>1.3.1 Document节点的属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.doctype   <span class="comment">//</span></span><br><span class="line"><span class="built_in">document</span>.documentElement  <span class="comment">//返回当前文档的根节点</span></span><br><span class="line"><span class="built_in">document</span>.defaultView   <span class="comment">//返回document对象所在的window对象</span></span><br><span class="line"><span class="built_in">document</span>.body   <span class="comment">//返回当前文档的&lt;body&gt;节点</span></span><br><span class="line"><span class="built_in">document</span>.head   <span class="comment">//返回当前文档的&lt;head&gt;节点</span></span><br><span class="line"><span class="built_in">document</span>.activeElement  <span class="comment">//返回当前文档中获得焦点的那个元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//节点集合属性</span></span><br><span class="line"><span class="built_in">document</span>.links  <span class="comment">//返回当前文档的所有a元素</span></span><br><span class="line"><span class="built_in">document</span>.forms  <span class="comment">//返回页面中所有表单元素</span></span><br><span class="line"><span class="built_in">document</span>.images  <span class="comment">//返回页面中所有图片元素</span></span><br><span class="line"><span class="built_in">document</span>.embeds  <span class="comment">//返回网页中所有嵌入对象</span></span><br><span class="line"><span class="built_in">document</span>.scripts  <span class="comment">//返回当前文档的所有脚本</span></span><br><span class="line"><span class="built_in">document</span>.styleSheets  <span class="comment">//返回当前网页的所有样式表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文档信息属性</span></span><br><span class="line"><span class="built_in">document</span>.documentURI  <span class="comment">//表示当前文档的网址</span></span><br><span class="line"><span class="built_in">document</span>.URL  <span class="comment">//返回当前文档的网址</span></span><br><span class="line"><span class="built_in">document</span>.domain  <span class="comment">//返回当前文档的域名</span></span><br><span class="line"><span class="built_in">document</span>.lastModified  <span class="comment">//返回当前文档最后修改的时间戳</span></span><br><span class="line"><span class="built_in">document</span>.location  <span class="comment">//返回location对象，提供当前文档的URL信息</span></span><br><span class="line"><span class="built_in">document</span>.referrer  <span class="comment">//返回当前文档的访问来源</span></span><br><span class="line"><span class="built_in">document</span>.title    <span class="comment">//返回当前文档的标题</span></span><br><span class="line"><span class="built_in">document</span>.characterSet属性返回渲染当前文档的字符集，比如UTF<span class="number">-8</span>、ISO<span class="number">-8859</span><span class="number">-1</span>。</span><br><span class="line"><span class="built_in">document</span>.readyState  <span class="comment">//返回当前文档的状态</span></span><br><span class="line"><span class="built_in">document</span>.designMode  <span class="comment">//控制当前文档是否可编辑，可读写</span></span><br><span class="line"><span class="built_in">document</span>.compatMode  <span class="comment">//返回浏览器处理文档的模式</span></span><br><span class="line"><span class="built_in">document</span>.cookie   <span class="comment">//用来操作Cookie</span></span><br></pre></td></tr></table></figure><p><strong>1.3.2 Document节点的方法</strong></p><p><strong>（1）读写方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.open()   <span class="comment">//用于新建并打开一个文档</span></span><br><span class="line"><span class="built_in">document</span>.close()   <span class="comment">//不安比open方法所新建的文档</span></span><br><span class="line"><span class="built_in">document</span>.write()   <span class="comment">//用于向当前文档写入内容</span></span><br><span class="line"><span class="built_in">document</span>.writeIn()  <span class="comment">//用于向当前文档写入内容，尾部添加换行符。</span></span><br></pre></td></tr></table></figure><p><strong>（2）查找节点</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(selectors)   <span class="comment">//接受一个CSS选择器作为参数，返回第一个匹配该选择器的元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(selectors)  <span class="comment">//接受一个CSS选择器作为参数，返回所有匹配该选择器的元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(tagName)  <span class="comment">//返回所有指定HTML标签的元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(className)   <span class="comment">//返回包括了所有class名字符合指定条件的元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByName(name)   <span class="comment">//用于选择拥有name属性的HTML元素（比如&lt;form&gt;、&lt;radio&gt;、&lt;img&gt;、&lt;frame&gt;、&lt;embed&gt;和&lt;object&gt;等）</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(id)   <span class="comment">//返回匹配指定id属性的元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.elementFromPoint(x,y)  <span class="comment">//返回位于页面指定位置最上层的Element子节点。</span></span><br></pre></td></tr></table></figure><p><strong>（3）生成节点</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(tagName)   <span class="comment">//用来生成HTML元素节点。</span></span><br><span class="line"><span class="built_in">document</span>.createTextNode(text)   <span class="comment">//用来生成文本节点</span></span><br><span class="line"><span class="built_in">document</span>.createAttribute(name)  <span class="comment">//生成一个新的属性对象节点，并返回它。</span></span><br><span class="line"><span class="built_in">document</span>.createDocumentFragment()  <span class="comment">//生成一个DocumentFragment对象</span></span><br></pre></td></tr></table></figure><p><strong>（4）事件方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createEvent(type)   <span class="comment">//生成一个事件对象，该对象能被element.dispatchEvent()方法使用</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(type,listener,capture)  <span class="comment">//注册事件</span></span><br><span class="line"><span class="built_in">document</span>.removeEventListener(type,listener,capture)  <span class="comment">//注销事件</span></span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(event)  <span class="comment">//触发事件</span></span><br></pre></td></tr></table></figure><p><strong>（5）其他</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.hasFocus()   //返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点。</span><br><span class="line">document.adoptNode(externalNode)  //将某个节点，从其原来所在的文档移除，插入当前文档，并返回插入后的新节点。</span><br><span class="line">document.importNode(externalNode, deep)   //从外部文档拷贝指定节点，插入当前文档。</span><br></pre></td></tr></table></figure><p><strong>1.4 Element节点</strong></p><p><strong>1.4.1 Element节点的属性</strong></p><p><strong>（1）特性属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Element.attributes  <span class="comment">//返回当前元素节点的所有属性节点</span></span><br><span class="line">Element.id  <span class="comment">//返回指定元素的id属性，可读写</span></span><br><span class="line">Element.tagName  <span class="comment">//返回指定元素的大写标签名</span></span><br><span class="line">Element.innerHTML   <span class="comment">//返回该元素包含的HTML代码，可读写</span></span><br><span class="line">Element.outerHTML  <span class="comment">//返回指定元素节点的所有HTML代码，包括它自身和包含的的所有子元素，可读写</span></span><br><span class="line">Element.className  <span class="comment">//返回当前元素的class属性，可读写</span></span><br><span class="line">Element.classList  <span class="comment">//返回当前元素节点的所有class集合</span></span><br><span class="line">Element.dataset   <span class="comment">//返回元素节点中所有的data-*属性。</span></span><br></pre></td></tr></table></figure><p><strong>（2）尺寸属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Element.clientHeight   <span class="comment">//返回元素节点可见部分的高度</span></span><br><span class="line">Element.clientWidth   <span class="comment">//返回元素节点可见部分的宽度</span></span><br><span class="line">Element.clientLeft   <span class="comment">//返回元素节点左边框的宽度</span></span><br><span class="line">Element.clientTop   <span class="comment">//返回元素节点顶部边框的宽度</span></span><br><span class="line">Element.scrollHeight  <span class="comment">//返回元素节点的总高度</span></span><br><span class="line">Element.scrollWidth  <span class="comment">//返回元素节点的总宽度</span></span><br><span class="line">Element.scrollLeft   <span class="comment">//返回元素节点的水平滚动条向右滚动的像素数值,通过设置这个属性可以改变元素的滚动位置</span></span><br><span class="line">Element.scrollTop   <span class="comment">//返回元素节点的垂直滚动向下滚动的像素数值</span></span><br><span class="line">Element.offsetHeight   <span class="comment">//返回元素的垂直高度(包含border,padding)</span></span><br><span class="line">Element.offsetWidth    <span class="comment">//返回元素的水平宽度(包含border,padding)</span></span><br><span class="line">Element.offsetLeft    <span class="comment">//返回当前元素左上角相对于Element.offsetParent节点的垂直偏移</span></span><br><span class="line">Element.offsetTop   <span class="comment">//返回水平位移</span></span><br><span class="line">Element.style  <span class="comment">//返回元素节点的行内样式</span></span><br></pre></td></tr></table></figure><p><strong>（3）节点相关属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Element.children   <span class="comment">//包括当前元素节点的所有子元素</span></span><br><span class="line">Element.childElementCount   <span class="comment">//返回当前元素节点包含的子HTML元素节点的个数</span></span><br><span class="line">Element.firstElementChild  <span class="comment">//返回当前节点的第一个Element子节点  </span></span><br><span class="line">Element.lastElementChild   <span class="comment">//返回当前节点的最后一个Element子节点  </span></span><br><span class="line">Element.nextElementSibling  <span class="comment">//返回当前元素节点的下一个兄弟HTML元素节点</span></span><br><span class="line">Element.previousElementSibling  <span class="comment">//返回当前元素节点的前一个兄弟HTML节点</span></span><br><span class="line">Element.offsetParent   <span class="comment">//返回当前元素节点的最靠近的、并且CSS的position属性不等于static的父元素。</span></span><br></pre></td></tr></table></figure><p><strong>1.4.2 Element节点的方法</strong></p><p><strong>（1）位置方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">getBoundingClientRect()  </span><br><span class="line"><span class="comment">// getBoundingClientRect返回一个对象，包含top,left,right,bottom,width,height // width、height 元素自身宽高</span></span><br><span class="line"><span class="comment">// top 元素上外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// right 元素右外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// bottom 元素下外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// left 元素左外边界距窗口最上面的距离</span></span><br><span class="line"><span class="comment">// width 元素自身宽(包含border,padding) </span></span><br><span class="line"><span class="comment">// height 元素自身高(包含border,padding) </span></span><br><span class="line"></span><br><span class="line">getClientRects()   <span class="comment">//返回当前元素在页面上形参的所有矩形。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素在页面上的偏移量  </span></span><br><span class="line"><span class="keyword">var</span> rect = el.getBoundingClientRect()  </span><br><span class="line"><span class="keyword">return</span> &#123;   </span><br><span class="line">  top: rect.top + <span class="built_in">document</span>.body.scrollTop,   </span><br><span class="line">  left: rect.left + <span class="built_in">document</span>.body.scrollLeft  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）属性方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Element.getAttribute()：读取指定属性  </span><br><span class="line">Element.setAttribute()：设置指定属性  </span><br><span class="line">Element.hasAttribute()：返回一个布尔值，表示当前元素节点是否有指定的属性  </span><br><span class="line">Element.removeAttribute()：移除指定属性</span><br></pre></td></tr></table></figure><p><strong>（3）查找方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Element.querySelector()  </span><br><span class="line">Element.querySelectorAll()  </span><br><span class="line">Element.getElementsByTagName()  </span><br><span class="line">Element.getElementsByClassName()</span><br></pre></td></tr></table></figure><p><strong>（4）事件方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Element.addEventListener()：添加事件的回调函数  </span><br><span class="line">Element.removeEventListener()：移除事件监听函数  </span><br><span class="line">Element.dispatchEvent()：触发事件</span><br><span class="line"></span><br><span class="line"><span class="comment">//ie8</span></span><br><span class="line">Element.attachEvent(oneventName,listener)</span><br><span class="line">Element.detachEvent(oneventName,listener)</span><br><span class="line"></span><br><span class="line"><span class="comment">// event对象  </span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">window</span>.event||event;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件的目标节点  </span></span><br><span class="line"><span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件代理  </span></span><br><span class="line">ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;   </span><br><span class="line">  <span class="keyword">if</span> (event.target.tagName.toLowerCase() === <span class="string">'li'</span>) &#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(event.target.innerHTML)   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>（5）其他</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Element.scrollIntoView()   <span class="comment">//滚动当前元素，进入浏览器的可见区域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析HTML字符串，然后将生成的节点插入DOM树的指定位置。</span></span><br><span class="line">Element.insertAdjacentHTML(where, htmlString); </span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'beforeBegin'</span>, htmlString); <span class="comment">// 在该元素前插入  </span></span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'afterBegin'</span>, htmlString); <span class="comment">// 在该元素第一个子元素前插入 </span></span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'beforeEnd'</span>, htmlString); <span class="comment">// 在该元素最后一个子元素后面插入 </span></span><br><span class="line">Element.insertAdjacentHTML(<span class="string">'afterEnd'</span>, htmlString); <span class="comment">// 在该元素后插入</span></span><br><span class="line"></span><br><span class="line">Element.remove()  <span class="comment">//用于将当前元素节点从DOM中移除</span></span><br><span class="line">Element.focus()   <span class="comment">//用于将当前页面的焦点，转移到指定元素上</span></span><br></pre></td></tr></table></figure><h2 id="二、CSS操作"><a href="#二、CSS操作" class="headerlink" title="二、CSS操作"></a>二、CSS操作</h2><p><strong>（1）类名操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ie8以下</span></span><br><span class="line">Element.className  <span class="comment">//获取元素节点的类名</span></span><br><span class="line">Element.className += <span class="string">' '</span> + newClassName  <span class="comment">//新增一个类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否有某个类名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element,className</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(className,<span class="string">'gi'</span>).test(element.className);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">element,className</span>)</span>&#123;</span><br><span class="line">  element.className = element.className.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|\\b)'</span> + className.split(<span class="string">' '</span>).join(<span class="string">'|'</span>) + <span class="string">'(\\b|$)'</span>, <span class="string">'gi'</span>),<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ie10 </span></span><br><span class="line">element.classList.add(className)  <span class="comment">//新增</span></span><br><span class="line">element.classList.remove(className)  <span class="comment">//删除</span></span><br><span class="line">element.classList.contains(className)  <span class="comment">//是否包含</span></span><br><span class="line">element.classList.toggle(className)  <span class="comment">//toggle class</span></span><br></pre></td></tr></table></figure><p><strong>（2）style操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">element.setAttribute(<span class="string">'style'</span>,<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">element.style.backgroundColor = <span class="string">'red'</span></span><br><span class="line"></span><br><span class="line">element.style.cssText <span class="comment">//用来读写或删除整个style属性</span></span><br><span class="line"></span><br><span class="line">element.style.setProperty(propertyName,value)  <span class="comment">//设置css属性</span></span><br><span class="line">element.style.getPropertyValue(property)  <span class="comment">//获取css属性</span></span><br><span class="line">element.style.removeProperty(property)  <span class="comment">//删除css属性</span></span><br><span class="line">操作非内联样式</span><br><span class="line"><span class="comment">//ie8</span></span><br><span class="line">element.currentStyle[attrName]</span><br><span class="line"><span class="comment">//ie9+</span></span><br><span class="line"><span class="built_in">window</span>.getComputedStyle(el,<span class="literal">null</span>)[attrName] </span><br><span class="line"><span class="built_in">window</span>.getComputedStyle(el,<span class="literal">null</span>).getPropertyValue(attrName)</span><br><span class="line"><span class="comment">//伪类</span></span><br><span class="line"><span class="built_in">window</span>.getComputedStyle(el,<span class="string">':after'</span>)[attrName]</span><br></pre></td></tr></table></figure><h2 id="三、对象"><a href="#三、对象" class="headerlink" title="三、对象"></a>三、对象</h2><p><strong>3.1 Object对象</strong></p><p><strong>（1）生成实例对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br></pre></td></tr></table></figure><p><strong>（2）属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype   <span class="comment">//返回原型对象</span></span><br></pre></td></tr></table></figure><p><strong>（3）方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(o)   <span class="comment">//遍历对象的可枚举属性</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyName(o)   <span class="comment">//遍历对象不可枚举的属性</span></span><br></pre></td></tr></table></figure><p><strong>对象实例的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">valueOf()：返回当前对象对应的值。  </span><br><span class="line">toString()：返回当前对象对应的字符串形式。  </span><br><span class="line">toLocaleString()：返回当前对象对应的本地字符串形式。  </span><br><span class="line">hasOwnProperty()：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。 </span><br><span class="line">isPrototypeOf()：判断当前对象是否为另一个对象的原型。</span><br><span class="line">propertyIsEnumerable()：判断某个属性是否可枚举。</span><br></pre></td></tr></table></figure><p><strong>3.2 Array对象</strong></p><p><strong>（1）生成实例对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br></pre></td></tr></table></figure><p><strong>（2）属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.length  <span class="comment">//长度</span></span><br></pre></td></tr></table></figure><p><strong>（3）Array.isArray()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray(a)   <span class="comment">//用来判断一个值是否为数组</span></span><br></pre></td></tr></table></figure><p><strong>（4）Array实例的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a.valueof()   <span class="comment">//返回数组本身</span></span><br><span class="line">a.toString()  <span class="comment">//返回数组的字符串形式</span></span><br><span class="line">a.push(value,vlaue....)   <span class="comment">//用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。</span></span><br><span class="line">pop()   <span class="comment">//用于删除数组的最后一个元素，并返回该元素</span></span><br><span class="line">join()  <span class="comment">//以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默认用逗号分隔。</span></span><br><span class="line">concat()  <span class="comment">//用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一个新数组，原数组不变。</span></span><br><span class="line">shift()  <span class="comment">//用于删除数组的第一个元素，并返回该元素。</span></span><br><span class="line">unshift(value)  <span class="comment">//用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。</span></span><br><span class="line">reverse()   <span class="comment">//用于颠倒数组中元素的顺序，返回改变后的数组</span></span><br><span class="line">slice(start_index, upto_index);   <span class="comment">//用于提取原数组的一部分，返回一个新数组，原数组不变。第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。负数表示倒数第几个。</span></span><br><span class="line">splice(index, count_to_remove, addElement1, addElement2, ...);   <span class="comment">//用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。第一个参数是删除的起始位置，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。</span></span><br><span class="line">sort()   <span class="comment">//对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于0，表示第一个元素排在第二个元素后面；其他情况下，都是第一个元素排在第二个元素前面。</span></span><br><span class="line">map()   <span class="comment">//对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。</span></span><br><span class="line">map(elem,index,arr)   <span class="comment">//map方法接受一个函数作为参数。该函数调用时，map方法会将其传入三个参数，分别是当前成员、当前位置和数组本身。</span></span><br><span class="line">forEach()   <span class="comment">//遍历数组的所有成员，执行某种操作,参数是一个函数。它接受三个参数，分别是当前位置的值、当前位置的编号和整个数组。</span></span><br><span class="line">filter()   <span class="comment">//参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。</span></span><br><span class="line">some()    <span class="comment">//用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。只要有一个数组成员的返回值是true，则整个some方法的返回值就是true，否则false。</span></span><br><span class="line">every()   <span class="comment">//用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。所有数组成员的返回值都是true，才返回true，否则false。</span></span><br><span class="line">reduce()   <span class="comment">//依次处理数组的每个成员，最终累计为一个值。从左到右处理（从第一个成员到最后一个成员）</span></span><br><span class="line">reduceRight()  <span class="comment">//依次处理数组的每个成员，最终累计为一个值。从右到左（从最后一个成员到第一个成员）</span></span><br><span class="line">indexOf(s)   <span class="comment">//返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置</span></span><br><span class="line">lastIndexOf()  <span class="comment">//返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。</span></span><br></pre></td></tr></table></figure><p><strong>3.3 Number对象</strong></p><p><strong>（1）生成对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> <span class="built_in">Number</span>()</span><br></pre></td></tr></table></figure><p><strong>（2）Number对象的属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.POSITIVE_INFINITY：正的无限，指向<span class="literal">Infinity</span>。  </span><br><span class="line"><span class="built_in">Number</span>.NEGATIVE_INFINITY：负的无限，指向-<span class="literal">Infinity</span>。  </span><br><span class="line"><span class="built_in">Number</span>.NaN：表示非数值，指向<span class="literal">NaN</span>。  </span><br><span class="line"><span class="built_in">Number</span>.MAX_VALUE：表示最大的正数，相应的，最小的负数为-<span class="built_in">Number</span>.MAX_VALUE。  </span><br><span class="line"><span class="built_in">Number</span>.MIN_VALUE：表示最小的正数（即最接近<span class="number">0</span>的正数，在<span class="number">64</span>位浮点数体系中为<span class="number">5e-324</span>），相应的，最接近<span class="number">0</span>的负数为-<span class="built_in">Number</span>.MIN_VALUE。  </span><br><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER：表示能够精确表示的最大整数，即<span class="number">9007199254740991</span>。  </span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER：表示能够精确表示的最小整数，即<span class="number">-9007199254740991</span>。</span><br></pre></td></tr></table></figure><p><strong>（4）Number对象实例的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toString()   <span class="comment">//用来将一个数值转为字符串形式.可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。</span></span><br><span class="line">toFixed()   <span class="comment">//用于将一个数转为指定位数的小数，返回这个小数对应的字符串。</span></span><br><span class="line">toExponential()  <span class="comment">//用于将一个数转为科学计数法形式。可传入一个参数，参数表示小数点后有效数字的位数，范围为0到20，超出这个范围，会抛出一个RangeError。</span></span><br><span class="line">toPrecision()  <span class="comment">//用于将一个数转为指定位数的有效数字。</span></span><br></pre></td></tr></table></figure><p><strong>3.4 String 对象</strong></p><p><strong>（1）生成实例对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">String</span>()</span><br></pre></td></tr></table></figure><p><strong>（2）String对象的属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.length   <span class="comment">//返回字符串的长度</span></span><br></pre></td></tr></table></figure><p><strong>（3）方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s.chatAt(index)   <span class="comment">//返回指定位置的字符</span></span><br><span class="line">s.fromCharCode()    <span class="comment">//该方法的参数是一系列Unicode码点，返回对应的字符串。</span></span><br><span class="line">s.charCodeAt(index)    <span class="comment">//返回给定位置字符的Unicode码点（十进制表示）</span></span><br><span class="line">s.concat(s2)  <span class="comment">//用于连接两个字符串</span></span><br><span class="line">s.slice(start,end)   <span class="comment">//用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。</span></span><br><span class="line">s.substring(start,end)  <span class="comment">//用于从原字符串取出子字符串并返回，不改变原字符串.第一个参数表示子字符串的开始位置，第二个位置表示结束位置。</span></span><br><span class="line">s.substr(start,length)   <span class="comment">//用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的长度。如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。</span></span><br><span class="line">s.indexOf(s)   <span class="comment">//返回给定元素在字符串中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置 </span></span><br><span class="line">s.lastIndexOf()  <span class="comment">//返回给定元素在字符串中最后一次出现的位置，如果没有出现则返回-1。</span></span><br><span class="line">s.trim()  <span class="comment">//用于去除字符串两端的空格，返回一个新字符串</span></span><br><span class="line">s.toLowerCase()  <span class="comment">//用于将一个字符串全部转为小写,返回一个新字符串，不改变原字符串。</span></span><br><span class="line">s.toUpperCase()  <span class="comment">//全部转为大写</span></span><br><span class="line">s.localeCompare(s2)  <span class="comment">//用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。</span></span><br><span class="line">s.match(regexp)   <span class="comment">//用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null。</span></span><br><span class="line">s.search()  <span class="comment">//返回值为匹配的第一个位置。如果没有找到匹配，则返回-1。</span></span><br><span class="line">s.replace(oldValue,newValue)  <span class="comment">//用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式）。</span></span><br><span class="line">s.split()  <span class="comment">//按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。还可传入第二个参数，决定了返回数组的成员数。</span></span><br></pre></td></tr></table></figure><p><strong>3.5 Math对象</strong></p><p><strong>（1）属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.E：常数e。  </span><br><span class="line"><span class="built_in">Math</span>.LN2：<span class="number">2</span>的自然对数。  </span><br><span class="line"><span class="built_in">Math</span>.LN10：<span class="number">10</span>的自然对数。  </span><br><span class="line"><span class="built_in">Math</span>.LOG2E：以<span class="number">2</span>为底的e的对数。  </span><br><span class="line"><span class="built_in">Math</span>.LOG10E：以<span class="number">10</span>为底的e的对数。  </span><br><span class="line"><span class="built_in">Math</span>.PI：常数Pi。  </span><br><span class="line"><span class="built_in">Math</span>.SQRT1_2：<span class="number">0.5</span>的平方根。  </span><br><span class="line"><span class="built_in">Math</span>.SQRT2：<span class="number">2</span>的平方根。</span><br></pre></td></tr></table></figure><p><strong>（2）数学方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs()：返回参数的绝对值  </span><br><span class="line"><span class="built_in">Math</span>.ceil()：向上取整，接受一个参数，返回大于该参数的最小整数。 </span><br><span class="line"><span class="built_in">Math</span>.floor()：向下取整  </span><br><span class="line"><span class="built_in">Math</span>.max(n,n1,...)：可接受多个参数，返回最大值  </span><br><span class="line"><span class="built_in">Math</span>.min(n,n1,..)：可接受多个参数，返回最小值  </span><br><span class="line"><span class="built_in">Math</span>.pow(n,e)：指数运算, 返回以第一个参数为底数、第二个参数为幂的指数值。 </span><br><span class="line"><span class="built_in">Math</span>.sqrt()：返回参数值的平方根。如果参数是一个负值，则返回<span class="literal">NaN</span>。  </span><br><span class="line"><span class="built_in">Math</span>.log()：返回以e为底的自然对数值。</span><br><span class="line"><span class="built_in">Math</span>.exp()：返回e的指数，也就是常数e的参数次方。</span><br><span class="line"><span class="built_in">Math</span>.round()：四舍五入  </span><br><span class="line"><span class="built_in">Math</span>.random()：返回<span class="number">0</span>到<span class="number">1</span>之间的一个伪随机数，可能等于<span class="number">0</span>，但是一定小于<span class="number">1</span>。</span><br></pre></td></tr></table></figure><p><strong>（3）三角函数方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.sin()：返回参数的正弦  </span><br><span class="line"><span class="built_in">Math</span>.cos()：返回参数的余弦  </span><br><span class="line"><span class="built_in">Math</span>.tan()：返回参数的正切  </span><br><span class="line"><span class="built_in">Math</span>.asin()：返回参数的反正弦（弧度值）  </span><br><span class="line"><span class="built_in">Math</span>.acos()：返回参数的反余弦（弧度值）  </span><br><span class="line"><span class="built_in">Math</span>.atan()：返回参数的反正切（弧度值）</span><br></pre></td></tr></table></figure><p><strong>3.6 JSON对象</strong></p><p><strong>（1）方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify()   </span><br><span class="line"><span class="comment">//用于将一个值转为字符串。该字符串应该符合JSON格式，并且可以被JSON.parse方法还原。</span></span><br><span class="line"><span class="comment">//（JSON.stringify(obj, selectedProperties)）还可以接受一个数组，作为第二个参数，指定需要转成字符串的属性。</span></span><br><span class="line"><span class="comment">//还可以接受第三个参数，用于增加返回的JSON字符串的可读性。如果是数字，表示每个属性前面添加的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.parse()   <span class="comment">//用于将JSON字符串转化成对象。</span></span><br></pre></td></tr></table></figure><p><strong>3.7 console对象</strong></p><p><strong>（1）方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(text,text2,...)   <span class="comment">//用于在console窗口输出信息。它可以接受多个参数，将它们的结果连接起来输出。如果第一个参数是格式字符串（使用了格式占位符），console.log方法将依次用后面的参数替换占位符，然后再进行输出。</span></span><br><span class="line"><span class="built_in">console</span>.info()   <span class="comment">//在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。</span></span><br><span class="line"><span class="built_in">console</span>.debug()  <span class="comment">//在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。</span></span><br><span class="line"><span class="built_in">console</span>.warn()  <span class="comment">//输出信息时，在最前面加一个黄色三角，表示警告；</span></span><br><span class="line"><span class="built_in">console</span>.error()  <span class="comment">//输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈</span></span><br><span class="line"><span class="built_in">console</span>.table()  <span class="comment">//可以将复合类型的数据转为表格显示。</span></span><br><span class="line"><span class="built_in">console</span>.count()  <span class="comment">//用于计数，输出它被调用了多少次。</span></span><br><span class="line"><span class="built_in">console</span>.dir()    <span class="comment">//用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。</span></span><br><span class="line"><span class="built_in">console</span>.dirxml()  <span class="comment">//用于以目录树的形式，显示DOM节点。</span></span><br><span class="line"><span class="built_in">console</span>.assert()  <span class="comment">//接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这两个方法用于计时，可以算出一个操作所花费的准确时间。</span></span><br><span class="line"><span class="built_in">console</span>.time()</span><br><span class="line"><span class="built_in">console</span>.timeEnd()</span><br><span class="line"><span class="comment">//time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。调用timeEnd方法之后，console窗口会显示“计时器名称: 所耗费的时间”。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.profile()  <span class="comment">//用来新建一个性能测试器（profile），它的参数是性能测试器的名字。</span></span><br><span class="line"><span class="built_in">console</span>.profileEnd()  <span class="comment">//用来结束正在运行的性能测试器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.group()</span><br><span class="line"><span class="built_in">console</span>.groupend()</span><br><span class="line"><span class="comment">//上面这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠/展开。</span></span><br><span class="line"><span class="built_in">console</span>.groupCollapsed()  <span class="comment">//用于将显示的信息分组，该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.trace()  <span class="comment">//显示当前执行的代码在堆栈中的调用路径。</span></span><br><span class="line"><span class="built_in">console</span>.clear()  <span class="comment">//用于清除当前控制台的所有输出，将光标回置到第一行。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、节点&quot;&gt;&lt;a href=&quot;#一、节点&quot; class=&quot;headerlink&quot; title=&quot;一、节点&quot;&gt;&lt;/a&gt;一、节点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.1 节点属性&lt;/str
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="API" scheme="http://blog.poetries.top/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>React之Immutable学习记录（十二）</title>
    <link href="http://blog.poetries.top/2017/11/20/react-study-Immutable/"/>
    <id>http://blog.poetries.top/2017/11/20/react-study-Immutable/</id>
    <published>2017-11-20T12:10:24.000Z</published>
    <updated>2018-02-04T08:40:54.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理于互联网</p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>从问题说起：熟悉 <code>React</code> 组件生命周期的话都知道：调用 <code>setState</code> 方法总是会触发 <code>render</code> 方法从而进行 <code>vdom re-render</code> 相关逻辑，哪怕实际上你没有更改到 <code>Component.state</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="number">0</span>&#125;);<span class="comment">// 组件 state 并未被改变，但仍会触发 render 方法</span></span><br></pre></td></tr></table></figure><ul><li>为了避免这种性能上的浪费，<code>React</code> 提供了一个 <code>shouldComponentUpdate</code> 来控制触发 <code>vdom re-render</code> 逻辑的条件。于是 <code>PureRenderMixin</code> 作为一种优化技巧被使用。它仅仅是浅比较对象，深层次的数据结构根本不管用</li></ul><p><strong>js中的Immutable Data</strong></p><blockquote><p>在<code>javascript</code>中我们可以通过<code>deep clone</code>来模拟<code>Immutable Data</code>，就是每次对数据进行操作，新对数据进行<code>deep clone</code>出一个新数据</p></blockquote><ul><li>deep clone</li><li>当然你或许意识到了，这样非常的慢</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;  </span><br><span class="line"><span class="keyword">var</span> cloneDeep = <span class="built_in">require</span>(<span class="string">'lodash.clonedeep'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123;  </span><br><span class="line">    id: <span class="string">'data'</span>,</span><br><span class="line">    author: &#123;</span><br><span class="line">        name: <span class="string">'mdemo'</span>,</span><br><span class="line">        github: <span class="string">'https://github.com/demohi'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data1 = cloneDeep(data);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'equal:'</span>, data1===data); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">data1.id = <span class="string">'data1'</span>;  </span><br><span class="line">data1.author.name = <span class="string">'demohi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.id);<span class="comment">// data  </span></span><br><span class="line"><span class="built_in">console</span>.log(data1.id);<span class="comment">// data1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.author.name);<span class="comment">//mdemo  </span></span><br><span class="line"><span class="built_in">console</span>.log(data1.author.name);<span class="comment">//demohi</span></span><br></pre></td></tr></table></figure><blockquote><p>这时候 immutableJS 就派得上用场了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map1 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:&#123;<span class="attr">b</span>:&#123;<span class="attr">c</span>:&#123;<span class="attr">d</span>:&#123;<span class="attr">e</span>:<span class="number">7</span>&#125;&#125;&#125;&#125;&#125;);</span><br><span class="line"><span class="keyword">var</span> map2 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:&#123;<span class="attr">b</span>:&#123;<span class="attr">c</span>:&#123;<span class="attr">d</span>:&#123;<span class="attr">e</span>:<span class="number">7</span>&#125;&#125;&#125;&#125;&#125;);</span><br><span class="line">Immutable.is(map1, map2);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>遍历对象不再用<code>for-in</code>，可以这样:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;).map(<span class="function"><span class="keyword">function</span>(<span class="params">value, key</span>) </span>&#123; <span class="comment">/* do some thing */</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="二、什么是-Immutable-Data"><a href="#二、什么是-Immutable-Data" class="headerlink" title="二、什么是 Immutable Data"></a>二、什么是 Immutable Data</h2><ul><li><code>Immutable Data</code> 就是一旦创建，就不能再被更改的数据。对 <code>Immutable</code> 对象的任何修改或添加删除操作都会返回一个新的 <code>Immutable</code> 对象</li><li><code>Immutable</code> 实现的原理是 <code>Persistent Data Structure</code>（持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变</li><li>同时为了避免 <code>deepCopy</code> 把所有节点都复制一遍带来的性能损耗，<code>Immutable</code> 使用了 <code>Structural Sharing····</code>（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。</li></ul><p><img src="https://segmentfault.com/image?src=http://img.alicdn.com/tps/i2/TB1zzi_KXXXXXctXFXXbrb8OVXX-613-575.gif&amp;objectId=1190000003910357&amp;token=4f994e3bf65c373b010a157dfbab240f" alt=""></p><blockquote><p>打印<code>immutableJS</code>看看有什么东西</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-ddbb8fec9c23aa7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>一个说明不可变的例子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生对象</span></span><br><span class="line"><span class="keyword">let</span> a1 = &#123;</span><br><span class="line">    b: <span class="number">1</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">        c1: <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b1 = a1;</span><br><span class="line">b1.b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a1.b, b1.b); <span class="comment">// 2, 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === b1); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a1.c === b1.c); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// immutable.js 的Map</span></span><br><span class="line"><span class="keyword">let</span> a2 = Immutable.fromJS(&#123;</span><br><span class="line">    b: <span class="number">1</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">        c1: <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b2 = a2.set(<span class="string">'b'</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.get(<span class="string">'b'</span>), b2.get(<span class="string">'b'</span>)); <span class="comment">// 1, 2  对象 a2 的 b 值并没有变成2。</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === b2); <span class="comment">//  false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.get(<span class="string">'c'</span>) === b2.get(<span class="string">'c'</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="三、为什么要在React-js中使用Immutable"><a href="#三、为什么要在React-js中使用Immutable" class="headerlink" title="三、为什么要在React.js中使用Immutable"></a>三、为什么要在React.js中使用Immutable</h2><blockquote><ul><li>它是一个完全独立的库，无论基于什么框架都可以用它。意义在于它弥补了<code>Javascript</code> 没有不可变数据结构的问题</li><li>由于是不可变的，可以放心的对对象进行任意操作。在<code>React</code>开发中，频繁操作state对象或是<code>store</code>，配合<code>immutableJS</code>快、安全、方便</li></ul></blockquote><ul><li>熟悉<code>React.js</code>的都应该知道，<code>React.js</code>是一个<code>UI = f(states)</code>的框架，为了解决更新的问题，<code>React.js</code>使用了<code>virtual dom</code>，<code>virtual dom</code>通过<code>diff</code>修改<code>dom</code>，来实现高效的<code>dom</code>更新。</li><li>但是有一个问题。当<code>state</code>更新时，如果数据没变，你也会去做<code>virtual dom</code>的<code>diff</code>，这就产生了浪费。这种情况其实很常见</li></ul><blockquote><ul><li>当然你可能会说，你可以使用<code>PureRenderMixin</code>来解决呀，<code>PureRenderMixin</code>是个好东西，我们可以用它来解决一部分的上述问题</li><li>但<code>PureRenderMixin</code>只是简单的浅比较，不使用于多层比较。那怎么办？自己去做复杂比较的话，性能又会非常差</li></ul></blockquote><ul><li>方案就是使用<code>immutable.js</code>可以解决这个问题。因为每一次<code>state</code>更新只要有数据改变，那么<code>PureRenderMixin</code>可以立刻判断出数据改变，可以大大提升性能</li></ul><p><strong>Immutable 优点</strong></p><ul><li><strong>Immutable 降低了 Mutable 带来的复杂度</strong></li></ul><blockquote><p>可变（<code>Mutable</code>）数据耦合了 <code>Time</code>和 <code>Value</code> 的概念，造成了数据很难被回溯</p></blockquote><ul><li><strong>节省内存</strong></li></ul><blockquote><p><code>Immutable.js</code> 使用了 <code>Structure Sharing</code> 会尽量复用内存，甚至以前使用的对象也可以再次被复用。没有被引用的对象会被垃圾回收</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>&#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Map</span>(&#123;</span><br><span class="line">  select: <span class="string">'users'</span>,</span><br><span class="line">  filter: <span class="built_in">Map</span>(&#123; <span class="attr">name</span>: <span class="string">'Cam'</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> b = a.set(<span class="string">'select'</span>, <span class="string">'people'</span>);</span><br><span class="line"></span><br><span class="line">a === b; <span class="comment">// false</span></span><br><span class="line">a.get(<span class="string">'filter'</span>) === b.get(<span class="string">'filter'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</strong></li></ul><blockquote><p>因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。</p></blockquote><ul><li><strong>并发安全</strong></li></ul><blockquote><p>传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 <code>Immutable</code> 之后，数据天生是不可变的，并发锁就不需要了。</p></blockquote><ul><li><strong>拥抱函数式编程</strong></li></ul><blockquote><p><code>Immutable</code> 本身就是函数式编程中的概念，纯函数式编程比面向对象更适用于前端开发。因为只要输入一致，输出必然一致，这样开发的组件更易于调试和组装。</p></blockquote><p><strong>Immutable 缺点</strong></p><ul><li>需要学习新的 API</li><li>增加了资源文件大小</li><li>容易与原生对象混淆</li></ul><h2 id="四、Immutable-的几种数据类型"><a href="#四、Immutable-的几种数据类型" class="headerlink" title="四、Immutable 的几种数据类型"></a>四、Immutable 的几种数据类型</h2><ul><li><code>List</code>: 有序索引集，类似<code>JavaScript</code>中的<code>Array</code>。</li><li><code>Map</code>: 无序索引集，类似<code>JavaScript</code>中的<code>Object</code>。</li><li><code>OrderedMap</code>: 有序的<code>Map</code>，根据数据的<code>set()</code>进行排序。</li><li><code>Set</code>: 没有重复值的集合。</li><li><code>OrderedSet</code>: 有序的<code>Set</code>，根据数据的<code>add</code>进行排序。</li><li><code>Stack</code>: 有序集合，支持使用<code>unshift（）</code>和<code>shift（）</code>添加和删除。</li><li><code>Range()</code>: 返回一个<code>Seq.Indexed</code>类型的集合，这个方法有三个参数，<code>start</code>表示开始值，默认值为<code>0</code>，<code>end</code>表示结束值，默认为无穷大，<code>step</code>代表每次增大的数值，默认为<code>1</code>.如果<code>start = end</code>,则返回空集合。</li><li><code>Repeat()</code>: 返回一个<code>vSeq.Indexe</code>类型的集合，这个方法有两个参数，<code>value</code>代表需要重复的值，<code>times</code>代表要重复的次数，默认为无穷大。</li><li><code>Record</code>: 一个用于生成<code>Record</code>实例的类。类似于<code>JavaScript</code>的<code>Object</code>，但是只接收特定字符串为<code>key</code>，具有默认值。</li><li><code>Seq</code>: 序列，但是可能不能由具体的数据结构支持。</li><li><code>Collection</code>: 是构建所有数据结构的基类，不可以直接构建</li></ul><blockquote><p>上面那么多常用的也就是 <code>List</code>和<code>Map</code></p></blockquote><h2 id="五、几个重要的API"><a href="#五、几个重要的API" class="headerlink" title="五、几个重要的API"></a>五、几个重要的API</h2><p><strong>1、fromJS()</strong></p><ul><li><code>fromJS()</code> 是最最最常用的将原生<code>JS</code>数据转换为<code>ImmutableJS</code>数据的转换方法。使用方式类似于 <code>JSON.parse()</code>，接收两个参数：<code>json</code> 数据和 <code>reviver</code>函数</li><li>在不传递<code>reviver</code>函数的情况下，默认将原生<code>JS</code>的<code>Array</code>转为<code>List</code>，<code>Object</code>转为<code>Map</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常见</span></span><br><span class="line"><span class="keyword">const</span> t1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不常用</span></span><br><span class="line"><span class="keyword">const</span> t2 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定制转换方式，下这种就是将Array转换为List，Object转换为Map</span></span><br><span class="line">    <span class="keyword">const</span> isIndexed = Immutable.Iterable.isIndexed(value);</span><br><span class="line">    <span class="keyword">return</span> isIndexed ? value.toList() : value.toOrderedMap();</span><br><span class="line">    <span class="comment">// true, "b", &#123;b: [10, 20, 30]&#125;</span></span><br><span class="line">    <span class="comment">// false, "a", &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;</span></span><br><span class="line">    <span class="comment">// false, "", &#123;"": &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;&#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t2);</span><br></pre></td></tr></table></figure><p><strong>2、is()</strong></p><blockquote><p>先来看官网的一段话: <code>immutable</code>数据应该被当作值而不是对象，值是表示该事件在特定时刻的状态。这个原则对理解不可变数据的适当使用是最重要的。为了将<code>Immutable.js</code>数据视为值，就必须使用<code>Immutable.is()</code>函数或<code>.equals()</code>方法来确定值相等，而不是确定对象引用标识的 <code>===</code> 操作符</p></blockquote><ul><li>所以<code>is()</code>就是用来对两个<code>immutable</code>对象进行值比较的。使用方式类似于 <code>Object.is(obj1, obj2)</code>，接收两个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> map2 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个不同的对象</span></span><br><span class="line"><span class="built_in">console</span>.log(map1 === map2); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 进行值比较</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(map1, map2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不仅仅只能比较ImmutableJS的类型的数据</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">undefined</span>, <span class="literal">undefined</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">null</span>, <span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">null</span>, <span class="literal">null</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区别于 Object.is</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>) ,Immutable.is(<span class="number">-0</span>, <span class="number">0</span>)); <span class="comment">// false , true</span></span><br></pre></td></tr></table></figure><p><strong>3、Map</strong></p><blockquote><p><code>Map</code> 数据类型，对应原生 <code>Object</code> 数组。最最常用的 数据结构之一，循环时无序(<code>orderedMap</code>有序)，对象的 <code>key</code> 可以是任意值。具体看下面的例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(List.of(<span class="number">1</span>), <span class="string">'list-of-one'</span>).get(List.of(<span class="number">1</span>)));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(<span class="literal">NaN</span>, <span class="string">'NaN'</span>).get(<span class="literal">NaN</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(<span class="literal">undefined</span>, <span class="string">'undefined'</span>).get(<span class="literal">undefined</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(<span class="literal">null</span>, <span class="string">'null'</span>).get(<span class="literal">null</span>));</span><br></pre></td></tr></table></figure><ul><li><strong>简单介绍 OrderedMap</strong></li></ul><blockquote><p><code>OrderedMap</code> 是 <code>Map</code> 的变体，它除了具有 <code>Map</code> 的特性外，还具有顺序性，当开发者遍历 <code>OrderedMap</code> 的实例时，遍历顺序为该实例中元素的声明、添加顺序。<code>OrderedMap</code>比非有序<code>Map</code>更昂贵，并且可能消耗更多的内存。如果真要求遍历有序，请使用<code>List</code></p></blockquote><p><strong>4、List</strong></p><blockquote><p><code>List</code> 数据类型，对应原生 <code>Array</code>数组。和原生数组，最大区别不存在’空位’。<code>[, , , , ]</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List([,,,,]).toJS());<span class="comment">// [undefined, undefined, undefined, undefined]</span></span><br></pre></td></tr></table></figure><h2 id="六、API"><a href="#六、API" class="headerlink" title="六、API"></a>六、API</h2><blockquote><p>我们主要介绍<code>Map</code>和 <code>List</code></p></blockquote><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p><strong>1、通过构造函数 Map()</strong></p><blockquote><p>构造函数不常用，一般都是通过<code>Immutable.fromJS()</code>将一个<code>JS</code>原生对象转换为一个<code>Immutable</code>对象</p></blockquote><p><strong>2、Map()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iter: Iterable.Keyed&lt;K, V&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iter: Iterable&lt;any, Array&lt;any&gt;&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(obj: Array&lt;Array&lt;any&gt;&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;V&gt;(obj: &#123;[key: string]: V&#125;): Map&lt;string, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iterator: Iterator&lt;Array&lt;any&gt;&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iterable: Object): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().toJS()); <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>(&#123;<span class="attr">key</span>: <span class="string">"value"</span>&#125;).toJS()); <span class="comment">// &#123;key: "value"&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>同Key覆盖问题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最后的&#123;key: value2&#125; 覆盖了前面的 &#123;key: value&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>([[<span class="string">"key"</span>, <span class="string">"value"</span>], [<span class="string">"key"</span>, <span class="string">"value2"</span>], [<span class="string">"key1"</span>, <span class="string">"value1"</span>]]).toJS());<span class="comment">// &#123;key: "value2", key1: "value1"&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、List()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iter: Iterable.Indexed&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iter: Iterable.Set&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;K, V&gt;(iter: Iterable.Keyed&lt;K, V&gt;): List&lt;any&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(array: Array&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iterator: Iterator&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iterable: Object): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(List().toJS()); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(List([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,&#123;<span class="attr">a</span>:<span class="number">123</span>&#125;]).toJS()); <span class="comment">// [ 1, 2, 3, 4, &#123;a: 123&#125;]</span></span><br></pre></td></tr></table></figure><p><strong>4、另一种方式</strong></p><p><strong>Map.of()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.of(<span class="string">'key1'</span>,<span class="string">'value1'</span>,<span class="string">'key2'</span>,<span class="string">'value2'</span>,<span class="string">'key3'</span>,<span class="string">'value3'</span>).toJS()); <span class="comment">// &#123;key1: "value1", key2: "value2", key3: "value3"&#125;</span></span><br></pre></td></tr></table></figure><p><strong>List.of()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List.of(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, <span class="number">2</span>, [<span class="number">3</span>], <span class="number">4</span>).toJS()); <span class="comment">// [&#123;x:1&#125;, 2, [3], 4]</span></span><br></pre></td></tr></table></figure><h3 id="判断是否是一个Map或者List"><a href="#判断是否是一个Map或者List" class="headerlink" title="判断是否是一个Map或者List"></a>判断是否是一个Map或者List</h3><p><strong>1、Map判断</strong></p><ul><li>判断是否是一个<code>Map</code> , 对原生<code>Object</code>不生效</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.isMap(&#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.isMap(<span class="built_in">Map</span>(&#123;&#125;))); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>2、List判断</strong></p><blockquote><p>判断是否是一个<code>List</code> , 对原生<code>Array</code>不生效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List.isList([])); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(List.isList(List([]))); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="获取大小"><a href="#获取大小" class="headerlink" title="获取大小"></a>获取大小</h3><p><strong>1、size</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(List([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).size);<span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).size);<span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).size);<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.of(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, <span class="number">2</span>, [<span class="number">3</span>], <span class="number">4</span>).size);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>count()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以定制条件，来确定大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">key1</span>: <span class="number">34</span>&#125;).count(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 1 value大于3的有两个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以制定条件，来确定 大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 2 大于3的有两个</span></span><br></pre></td></tr></table></figure><p><strong>countBy()</strong></p><blockquote><p><code>countBy()</code>和<code>count()</code>的区别就是它的返回值是一个对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">key1</span>: <span class="number">34</span>&#125;).countBy(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;false: 1, true: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).countBy(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;false: 2, true: 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p><strong>1、Set</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 将 key 位置的元素替换为 value</span></span><br><span class="line"><span class="keyword">const</span> $obj1 = <span class="built_in">Map</span>(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'a'</span>, <span class="number">0</span>).toJS()); <span class="comment">// &#123;a: 0, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'e'</span>, <span class="number">99</span>).toJS());  <span class="comment">// &#123;a: 1, b: 2, c: 3, d: 444, e: 99&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 将 index 位置的元素替换为 value，即使索引越界也是安全的, 空位 undefined</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">-1</span>, <span class="number">0</span>).toJS()); <span class="comment">// [1, 2, 0]  注意-1 等效于 $arr1.set($arr1.size + -1, 0)</span></span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">4</span>, <span class="number">0</span>).toJS());  <span class="comment">// [ 1, 2, 3, undefined, 0 ]  空位置为了undefined</span></span><br></pre></td></tr></table></figure><p><strong>2、setIn</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="List-特有的添加元素"><a href="#List-特有的添加元素" class="headerlink" title="List 特有的添加元素"></a>List 特有的添加元素</h3><p><strong>1、插入元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert(index: number, value: T)</span></span><br><span class="line"><span class="comment">// 向 index 位置插入 value</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).insert(<span class="number">1</span>, <span class="number">1.5</span>).toJS()); <span class="comment">// [ 1, 1.5, 2, 3 ]</span></span><br></pre></td></tr></table></figure><p><strong>2、设置size</strong></p><ul><li>默认值<code>undefined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List([]).setSize(<span class="number">2</span>).toJS()); <span class="comment">// [undefined, undefined]</span></span><br></pre></td></tr></table></figure><p><strong>3、pop、push、shift、unshift</strong></p><blockquote><p><code>List</code>数据类型也拥有<code>pop</code>、<code>push</code>、<code>shift</code>、<code>unshift</code>这四种操作方法，和原生<code>Array</code>的四种方法使用方式一致，但唯一区别就是返回新的<code>List</code>，并且不改变原来的数组本身，而原生则是会改变元素本身</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ImmutableJS：返回新的List，并且不改变元素本身</span></span><br><span class="line"><span class="keyword">const</span> $test = List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($test.pop().toJS(), $test.toJS()); <span class="comment">// [1, 2, 3] [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// 原生：返回被改变的值，改变元素本身</span></span><br><span class="line"><span class="keyword">const</span> test = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(test.pop(), test); <span class="comment">// 4 [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>4、花样插入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interpose</span></span><br><span class="line"><span class="comment">// 插入xxx之间</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).interpose(<span class="number">5555</span>).toJS()); <span class="comment">// [1, 5555, 2, 5555, 5, 5555, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interleave</span></span><br><span class="line"><span class="comment">// 被操作的两个数组，每个的第一项、第二项、第三项... 组成新的数组。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).interleave(Immutable.fromJS([<span class="number">555</span>, <span class="number">666</span>])).toJS()); <span class="comment">// [1, 555, 2, 666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// zip</span></span><br><span class="line"><span class="comment">// 被操作的两个数组，抽离第一项和第二项组成新的子数组，放入到一个大数组中，形成二维数组。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).zip(Immutable.fromJS([<span class="number">555</span>, <span class="number">666</span>]).toJS())); <span class="comment">// [ [1, 555], [2, 666]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义插入规则。</span></span><br><span class="line"><span class="comment">// zipWith</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).zipWith(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;, Immutable.fromJS([<span class="number">555</span>, <span class="number">666</span>]).toJS())); <span class="comment">// [ 556, 668]</span></span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p><strong>1、delete(key)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// delete(index: number)</span></span><br><span class="line"><span class="comment">// 删除 index 位置的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).delete(<span class="number">1</span>).toJS(), $arr1.toJS());<span class="comment">// [ 1, 3 ] [ 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).delete(<span class="number">77</span>).toJS(), $arr1.toJS(), <span class="string">'超过范围不会强制报错'</span>);<span class="comment">// [ 1, 2, 3] [ 1, 2, 3] 超过范围不会强制报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).delete(<span class="string">'c'</span>).toJS(), $obj1.toJS());<span class="comment">// &#123;a: 1, b: 2, d: 444&#125;  &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).delete(<span class="string">'asdfasfd'</span>).toJS(), $obj1.toJS());<span class="comment">// &#123;a: 1, b: 2, c: 3, d: 444&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2、deleteIn</strong></p><blockquote><p>和 <code>setIn</code>使用方式一致</p></blockquote><p><strong>3、清空元素 lear()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).clear().toJS());<span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).clear().toJS());<span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><blockquote><p>修改某一个元素</p></blockquote><p><strong>1、set setIn</strong></p><blockquote><p>上面已经介绍过</p></blockquote><p><strong>2、update</strong></p><blockquote><p>update(key: K, notSetValue: V, updater: (value: V) =&gt; V): Map<k, v=""></k,></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.update(<span class="string">'2'</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $arr1.toJS());<span class="comment">// [1, 2, 6] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($arr1.update(<span class="string">'6'</span>, <span class="number">1</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $arr1.toJS());<span class="comment">// [1, 2, 3, undefined, undefined, undefined, 2] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($arr1.update(<span class="string">'6'</span>, <span class="number">0</span>, (value)=&gt; &#123; <span class="comment">// 默认值必须大于0 感觉有BUG，所以还是不要用了。</span></span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $arr1.toJS());<span class="comment">// [1, 2, 3] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $obj1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.update(<span class="string">'a'</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $obj1.toJS());<span class="comment">// &#123;a: 2, b: 2, c: 3, d: 444&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($obj1.update(<span class="string">'e'</span>, <span class="number">1</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $obj1.toJS());<span class="comment">//   &#123;a: 1, b: 2, c: 3, d: 444, e: 2&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($obj1.update(<span class="string">'e'</span>, <span class="number">0</span>, (value)=&gt; &#123; <span class="comment">// 默认值入手是number必须大于0 感觉有BUG，所以还是不要用了。</span></span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $obj1.toJS());<span class="comment">//  &#123;a: 1, b: 2, c: 6, d: 444&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、updateIn</strong></p><blockquote><p>使用方式和setIn一样。</p></blockquote><h3 id="获取某个元素值"><a href="#获取某个元素值" class="headerlink" title="获取某个元素值"></a>获取某个元素值</h3><p><strong>1、get getIn</strong></p><ul><li>使用方式：<code>get(key: number, notSetValue?: T)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS([<span class="number">1111111</span>, <span class="number">22222</span>, &#123;<span class="attr">a</span>: <span class="number">888123</span>&#125;]);</span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="number">0</span>)); <span class="comment">// 1111111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有数组可以用 number 类型 的key</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="number">1</span>: <span class="string">'abc'</span>&#125;).get(<span class="number">1</span>), Immutable.fromJS(&#123;<span class="number">1</span>: <span class="string">'abc'</span>&#125;).get(<span class="string">'1'</span>));<span class="comment">// undefined "abc" | 只有数组可以用 number 类型 的key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// notSetValue 默认值，了解</span></span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="number">11</span>, <span class="string">'no have value'</span>)); <span class="comment">// no have value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getIn</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'2'</span>, <span class="string">'a'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// 888123</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'2'</span>, <span class="string">'b'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// child no have value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="string">'a'</span>)); <span class="comment">// 1111111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// notSetValue 默认值，了解</span></span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="string">'v'</span>, <span class="string">'no have value'</span>)); <span class="comment">// no have value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getIn</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'a'</span>, <span class="string">'a1'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// 222</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'d'</span>, <span class="string">'b1'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// child no have value</span></span><br></pre></td></tr></table></figure><p><strong>2、获取头、尾元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.first());<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log($arr1.last());<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.first());<span class="comment">// &#123;a1: 34&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log($obj1.last());<span class="comment">// 444</span></span><br></pre></td></tr></table></figure><h3 id="查找某个元素"><a href="#查找某个元素" class="headerlink" title="查找某个元素"></a>查找某个元素</h3><p><strong>1、find() findLast()</strong></p><blockquote><p><code>find()</code>、<code>findLast()</code>返回 <code>value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">56</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).find(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index === <span class="number">3</span>;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a: &#123;b: 111&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).find(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>2、findKey() findLastKey()</strong></p><blockquote><p><code>findKey()</code>、<code>findLastKey()</code> 返回 <code>key</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).findKey(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).findKey(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// c</span></span><br></pre></td></tr></table></figure><p><strong>3、findEntry() findLastEntry()</strong></p><blockquote><p><code>findEntry()</code>、<code>findLastEntry()</code> 返回 <code>key:value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).findEntry(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// [3, Map]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).findEntry(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Immutable.is(value, Immutable.fromJS(&#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;));</span><br><span class="line">&#125;));<span class="comment">// ["a", Map]</span></span><br></pre></td></tr></table></figure><p><strong>4、keyOf() lastKeyOf()</strong></p><blockquote><p><code>keyOf()</code>、<code>lastKeyOf()</code> 根据 <code>value</code> 返回<code>key</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/ List</span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).keyOf(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;))); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).keyOf(<span class="number">2</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).keyOf(Immutable.fromJS(&#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;))); <span class="comment">// a</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).keyOf(<span class="number">2</span>)); <span class="comment">// b</span></span><br></pre></td></tr></table></figure><h3 id="List-特有查找某个元素"><a href="#List-特有查找某个元素" class="headerlink" title="List 特有查找某个元素"></a>List 特有查找某个元素</h3><p><strong>1、indexOf() lastIndexOf()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找不到 返回 -1</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).indexOf(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;))); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>2、findIndex() findLastIndex()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).findIndex(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value/<span class="number">3</span> === <span class="number">1</span>;</span><br><span class="line">&#125;)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="查找最大、最小元素"><a href="#查找最大、最小元素" class="headerlink" title="查找最大、最小元素"></a>查找最大、最小元素</h3><blockquote><p><code>max()</code>、<code>maxBy()</code>默认比较规则为<code>&gt;</code>，<code>min()</code>、<code>minBy()</code>默认比较规则为<code>&gt;</code></p></blockquote><p><strong>1、max()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">301</span>, <span class="number">88</span>]).max()); <span class="comment">// 301</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">301</span>, <span class="number">88</span>]).max(<span class="function">(<span class="params">valueA, valueB</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;)); <span class="comment">// 301</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">8888</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).max()); <span class="comment">// 8888</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">8888</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).max(<span class="function">(<span class="params">valueA, valueB</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;)); <span class="comment">// 8888</span></span><br></pre></td></tr></table></figure><p><strong>2、maxBy()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 自定义比较的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">a</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">2301</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">222</span>&#125;]).maxBy(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>);</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a: 2301&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较的元素，和比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">a</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">2301</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">222</span>&#125;]).maxBy(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>);</span><br><span class="line">&#125;, (valueA, valueB) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a: 2301&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 自定义比较的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: &#123;<span class="attr">a1</span>: <span class="number">11</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a1</span>: <span class="number">33</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a1</span>: <span class="number">54654</span>&#125;&#125;).maxBy(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a1'</span>);</span><br><span class="line">&#125;).toJS());<span class="comment">//  &#123;a1: 54654&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较的元素，和比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: &#123;<span class="attr">a1</span>: <span class="number">11</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a1</span>: <span class="number">33</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a1</span>: <span class="number">54654</span>&#125;&#125;).maxBy(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a1'</span>);</span><br><span class="line">&#125;, (valueA, valueB) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a1: 54654&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、min()</strong></p><ul><li>同<code>max()</code></li></ul><p><strong>4、minBy()</strong></p><ul><li>同<code>maxBy()</code></li></ul><p><strong>5、keys() values() entries()</strong></p><blockquote><p>获取<code>ES6 Iterable</code> 迭代器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test = List([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = $test.keys();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> values = $test.values();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> values) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> entries = $test.entries();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> entries) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = $test.keys();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// a b c d</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> values = $test.values();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> values) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// &#123;a1: 222&#125; 2 3 444</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> entries = $test.entries();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> entries) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);<span class="comment">// ["a", Map] ["b", 2] ["c", 3] ["d", 444]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h3><p><strong>1、slice()</strong></p><blockquote><p>和原生<code>Array slice()</code>用法一致</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).slice(<span class="number">0</span>).toJS());<span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).slice(<span class="number">0</span>).toJS());<span class="comment">// &#123;a: Object, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).slice(<span class="number">1</span>).toJS());<span class="comment">// &#123;b: 2, c: 3, d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2、rest() butLast()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/ List</span><br><span class="line"><span class="comment">// rest() 返回删除第一个元素后的 List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).rest().rest().toJS()); <span class="comment">// [&#123;a: 1&#125;, 3, 4, 5, 6]</span></span><br><span class="line"><span class="comment">// butLast() 返回删除最后一个元素后的 List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).butLast().toJS()); <span class="comment">// [1, &#123;a: 1&#125;, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// rest() 返回删除第一个元素后的 Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).rest().rest().toJS()); <span class="comment">// &#123;c: 3, d: 444&#125;</span></span><br><span class="line"><span class="comment">// butLast() 返回删除最后一个元素后的 Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).butLast().toJS()); <span class="comment">// &#123;a: &#123;a1: 222&#125;, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、skip() skipLast() skipWhile() skipUntil()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skip(number)</span></span><br><span class="line"><span class="comment">// 从头按照条件抛出number个元素，对剩余元素进行截取</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).skip(<span class="number">2</span>).toJS()); <span class="comment">// [3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部按照条件抛出number个元素，对剩余元素进行截取</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).skipLast(<span class="number">2</span>).toJS()); <span class="comment">// [1, &#123;a: 1&#125;, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">111</span>, <span class="number">33</span> , <span class="number">22</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).skipWhile(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">31</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// [22, 44, 55, 66]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">32</span>, <span class="number">33</span> , <span class="number">40</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).skipWhile(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">39</span>;<span class="comment">// 抛出直到小于39的元素。</span></span><br><span class="line">&#125;).toJS()); <span class="comment">// [40, 44, 55, 66]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// skip(number)</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skip(<span class="number">2</span>).toJS()); <span class="comment">// &#123;c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部按照条件抛出number个元素，对剩余元素进行截取</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skipLast(<span class="number">2</span>).toJS()); <span class="comment">// &#123;a: &#123;a1: 222&#125;, b: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skipWhile(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="number">1</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skipWhile(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">39</span>;<span class="comment">// 抛出直到小于39的元素。</span></span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>4、take() takeLast() takeWhile() takeUntil()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// take(number)</span></span><br><span class="line"><span class="comment">// 从头获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).take(<span class="number">2</span>).toJS()); <span class="comment">// [1, &#123;a: 1&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).takeLast(<span class="number">2</span>).toJS()); <span class="comment">// [5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">111</span>, <span class="number">33</span> , <span class="number">22</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).takeWhile(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">31</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//[111, 33]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">32</span>, <span class="number">33</span> , <span class="number">40</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).takeUntil(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">41</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//[32, 33 , 40]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// take(number)</span></span><br><span class="line"><span class="comment">// 从头获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).take(<span class="number">2</span>).toJS()); <span class="comment">// &#123;a: 5, b: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).takeLast(<span class="number">2</span>).toJS()); <span class="comment">// &#123;c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).takeWhile(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//&#123;a: 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).takeUntil(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">39</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//&#123;a: 5, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h3><p><strong>1、map() filter() every() some() forEach() reduce() reduceRight()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">//1. map()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).map(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. filter()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).filter(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// [2, 4]</span></span><br><span class="line"><span class="comment">// filterNot() ...这个没有什么卵用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. every()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).every(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. some()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).some(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. forEach() 返回迭代的条目数（包括返回false的最后一个迭代）</span></span><br><span class="line"><span class="comment">// 与Array 的 forEach不同，如果sideEffect的任何调用返回false，迭代将停止。 返回迭代的条目数（包括返回false的最后一个迭代）。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>&#125;]).forEach(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value, index, array.toJS(), <span class="string">'forEach'</span>);</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">5</span>;</span><br><span class="line">&#125;)); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. reduce()</span></span><br><span class="line"><span class="comment">// 同原生用法</span></span><br><span class="line"><span class="comment">//7. reduceRight()</span></span><br><span class="line"><span class="comment">// 同原生用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">//1. map()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).map(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;a: 10, b: 4, c: 6, d: 888&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. filter()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).filter(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;b: 2, d: 444&#125;</span></span><br><span class="line"><span class="comment">// filterNot() ...这个没有什么卵用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. every()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).every(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. some()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).some(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. forEach() 返回迭代的条目数（包括返回false的最后一个迭代）</span></span><br><span class="line"><span class="comment">// 与Array 的 forEach不同，如果sideEffect的任何调用返回false，迭代将停止。 返回迭代的条目数（包括返回false的最后一个迭代）。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).forEach(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">444</span>;</span><br><span class="line">&#125;)); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. reduce()</span></span><br><span class="line"><span class="comment">// 同原List用法</span></span><br><span class="line"><span class="comment">//7. reduceRight()</span></span><br><span class="line"><span class="comment">// 同List用法</span></span><br></pre></td></tr></table></figure><h3 id="Map-特有-mapKeys-mapEntries"><a href="#Map-特有-mapKeys-mapEntries" class="headerlink" title="Map 特有 mapKeys() mapEntries()"></a>Map 特有 mapKeys() mapEntries()</h3><blockquote><p>对<code>Map</code>元素进行处理，返回处理后的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapKeys() 返回对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).mapKeys(<span class="function">(<span class="params">key</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key + <span class="string">'hhh'</span>;</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// &#123;ahhh: 5, bhhh: 2, chhh: 3, dhhh: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapEntries() 返回对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).mapEntries(<span class="function">(<span class="params">[key, value]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [key + <span class="string">'aaa'</span>, value+<span class="string">'hhhh'</span>];</span><br><span class="line">&#125;).toJS());<span class="comment">//   &#123;aaaa: "5hhhh", baaa: "2hhhh", caaa: "3hhhh", daaa: "444hhhh"&#125;</span></span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><strong>merge() mergeDeep() mergeWith() mergeDeepWith()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">55</span>, <span class="attr">c</span>: <span class="number">66</span>&#125;&#125;]);</span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">333</span>, <span class="attr">d</span>: <span class="number">67</span>&#125;&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.merge($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test [1, 2, 3, 6, &#123;b: 333, d: 67&#125;] [1, 2, 3, 7, &#123;a: &#123;b: 55, c: 66&#125;&#125;]</span></span><br><span class="line"><span class="comment">// 深merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeep($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test [1, 2, 3, 6, &#123;b: 333, c: 66, d: 67&#125;] [1, 2, 3, 7, &#123;a: &#123;b: 55, c: 66&#125;&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br><span class="line"><span class="comment">// 深merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeepWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a2</span>: <span class="number">234</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.merge($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test &#123;a: &#123;a1: 222, a2: 234&#125;, b: 2, c: 3, d: 444&#125; &#123;a: &#123;a1: 222, a3: 456&#125;, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="comment">// 深merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeep($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test &#123;a: &#123;a1: 222, a2: 234, a3: 456&#125;, b: 2, c: 3, d: 444&#125; &#123;a: &#123;a1: 222, a3: 456&#125;, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br><span class="line"><span class="comment">// 深merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeepWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br></pre></td></tr></table></figure><h3 id="jonin-转换为字符串"><a href="#jonin-转换为字符串" class="headerlink" title="jonin() 转换为字符串"></a>jonin() 转换为字符串</h3><blockquote><p>使用方式和原生<code>Array</code>的<code>join()</code>一样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: <span class="number">321</span>&#125;]).join()); <span class="comment">// 1,2,3,Map &#123; "a": 123, "b": 321 &#125;</span></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).join()); <span class="comment">// 2,Map &#123; "a1": 222, "a3": 456 &#125;,3,444</span></span><br></pre></td></tr></table></figure><h3 id="isEmpty-判空"><a href="#isEmpty-判空" class="headerlink" title="isEmpty() 判空"></a>isEmpty() 判空</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断空List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([]).isEmpty()); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 判断Map是否为空 比原生方便</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;&#125;).isEmpty()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="has-hasIn-检查是否有某个key"><a href="#has-hasIn-检查是否有某个key" class="headerlink" title="has() hasIn() 检查是否有某个key"></a>has() hasIn() 检查是否有某个key</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: <span class="number">321</span>&#125;]).has(<span class="string">'0'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: <span class="number">321</span>&#125;]).hasIn([<span class="number">3</span>, <span class="string">'b'</span>])); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).has(<span class="string">'a'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).hasIn([<span class="string">'a'</span>, <span class="string">'a3'</span>])); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="includes-是否包含某些元素"><a href="#includes-是否包含某些元素" class="headerlink" title="includes() 是否包含某些元素"></a>includes() 是否包含某些元素</h3><blockquote><p><code>includes()</code>、<code>contains()</code>这俩等效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 对象是否包含某个元素，对Immutable元素使用Immutable.is 进行比较</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">89</span>]).includes(<span class="string">'89'</span>));<span class="comment">// 数组没有字符89，所以返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'89'</span>]).contains(<span class="string">'89'</span>));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])]).contains(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 对象是否包含某个元素，对Immutable元素使用Immutable.is 进行比较</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">89</span>&#125;).includes(<span class="string">'89'</span>));<span class="comment">// 数组没有字符89，所以返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="string">'89'</span>&#125;).contains(<span class="string">'89'</span>));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])&#125;).contains(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="isSubset-子集判断"><a href="#isSubset-子集判断" class="headerlink" title="isSubset() 子集判断"></a>isSubset() 子集判断</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// isSubset()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]]).isSubset(Immutable.fromJS([[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>], <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'89'</span>])));<span class="comment">// true</span></span><br><span class="line"><span class="comment">// isSuperset 就是 isSubset 参数掉个个儿</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>], <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'89'</span>]).isSuperset(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]])));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// isSubset()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;&#125;).isSubset(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;)));<span class="comment">// true</span></span><br><span class="line"><span class="comment">// isSuperset 就是 isSubset 参数掉个个儿</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).isSuperset(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;&#125;)));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="reverse-反转"><a href="#reverse-反转" class="headerlink" title="reverse() 反转"></a>reverse() 反转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).reverse().toJS());</span><br><span class="line"><span class="comment">// [6, 5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).reverse().toJS());</span><br><span class="line"><span class="comment">// &#123;d: 5, c: 3, a: &#123;a1: 222, a3: 456&#125;, b: 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote><p><code>sort()</code>和<code>sortBy()</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// sort(comparator?: (valueA: V, valueB: V) =&gt; number): Iterable&lt;K, V&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]).sort().toJS());</span><br><span class="line"><span class="comment">// 传入比较函数</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// sortBy</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    sortBy&lt;C&gt;(</span></span><br><span class="line"><span class="comment">    comparatorValueMapper: (value: T, key: number, iter: Iterable&lt;number, T&gt;) =&gt; C,</span></span><br><span class="line"><span class="comment">    comparator?: (valueA: C, valueB: C) =&gt; number</span></span><br><span class="line"><span class="comment">    ): Iterable&lt;number, T&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;,</span><br><span class="line">    &#123;<span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">9</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;]).sortBy(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;,(a, b) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">88</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).sort().toJS());<span class="comment">// &#123;b: 2, c: 3, d: 5, a: 88&#125;</span></span><br><span class="line"><span class="comment">// 传入比较函数</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">88</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;b: 2, c: 3, d: 5, a: 88&#125;</span></span><br><span class="line"><span class="comment">// sortBy</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sortBy&lt;C&gt;(</span></span><br><span class="line"><span class="comment">comparatorValueMapper: (value: T, key: number, iter: Iterable&lt;number, T&gt;) =&gt; C,</span></span><br><span class="line"><span class="comment">comparator?: (valueA: C, valueB: C) =&gt; number</span></span><br><span class="line"><span class="comment">): Iterable&lt;number, T&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: &#123;<span class="attr">a</span>: <span class="number">2</span>&#125;, <span class="attr">a</span>: &#123;<span class="attr">a</span>: <span class="number">88</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a</span>: <span class="number">5</span>&#125;&#125;).sortBy(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;,(a, b) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;b: &#123;a: 2&#125;, c: &#123;a: 3&#125;, d: &#123;a: 5&#125;, a: &#123;a: 88&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="flatten-平铺"><a href="#flatten-平铺" class="headerlink" title="flatten() 平铺"></a>flatten() 平铺</h3><blockquote><p>参数默认情况下，<code>false</code> 深度平铺，<code>true</code> 浅度平铺1层</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">11</span>, <span class="number">111</span>, <span class="number">12344</span>], &#123;<span class="attr">a</span>: <span class="number">1234</span>, <span class="attr">b</span>: &#123;<span class="attr">bb</span>: [<span class="number">777</span>, <span class="number">888</span>]&#125;&#125;, <span class="number">5</span>, <span class="number">6</span>]).flatten().toJS());</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 1, 11, 111, 12344, 1234, 777, 888, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">11</span>, <span class="number">111</span>, <span class="number">12344</span>], &#123;<span class="attr">a</span>: <span class="number">1234</span>, <span class="attr">b</span>: &#123;<span class="attr">bb</span>: [<span class="number">777</span>, <span class="number">888</span>]&#125;&#125;, <span class="number">5</span>, <span class="number">6</span>]).flatten(<span class="literal">true</span>).toJS());</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 1, 11, 111, 12344, 1234, Object, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).flatten().toJS());</span><br><span class="line"><span class="comment">// &#123;0: 1, 1: 2, 2: 3, b: 2, a5: 333, c: 3, d: 5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).flatten(<span class="literal">true</span>).toJS());</span><br><span class="line"><span class="comment">// &#123;b: 2, a1: Object, a3: Array[3], c: 3, d: 5&#125;</span></span><br></pre></td></tr></table></figure><h3 id="groupBy-分组"><a href="#groupBy-分组" class="headerlink" title="groupBy() 分组"></a>groupBy() 分组</h3><blockquote><p>返回值是<code>OrderedMap</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">v</span>: <span class="number">0</span>, <span class="attr">a</span>: <span class="number">111</span>&#125;, &#123;<span class="attr">v</span>: <span class="number">1</span>, <span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;&#125;, &#123;<span class="attr">v</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">333</span>&#125;, &#123;<span class="attr">v</span>: <span class="number">0</span>, <span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;&#125;, &#123;<span class="attr">v</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">333</span>&#125;]).groupBy(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// OrderedMap &#123;111: Array[1], 333: Array[2], Map &#123; "b": List [ 1, 2, 3 ] &#125;: Array[2]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a5</span>: <span class="number">334</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a5</span>: <span class="number">334</span>&#125;&#125;).groupBy(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a5'</span>)</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// OrderedMap  &#123;333: &#123;b: &#123;a5: 333&#125;, a: &#123;a5: 333&#125;&#125;, 334: &#123;c: &#123;a5: 334&#125;, d: &#123;a5: 334&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="flip-Map-特有翻转"><a href="#flip-Map-特有翻转" class="headerlink" title="flip() Map 特有翻转"></a>flip() Map 特有翻转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="string">'b1'</span>, <span class="attr">a</span>: <span class="string">'a1'</span>, <span class="attr">c</span>: <span class="string">'c1'</span>, <span class="attr">d</span>: <span class="string">'d1'</span>&#125;).flip().toJS()); <span class="comment">// &#123;b1: "b", a1: "a", c1: "c", d1: "d"&#125;</span></span><br></pre></td></tr></table></figure><h3 id="连接-concat"><a href="#连接-concat" class="headerlink" title="连接 concat()"></a>连接 concat()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line"><span class="keyword">const</span> $test2 = Immutable.fromJS([<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($test1.concat($test2).toJS()); <span class="comment">//[1, 2, 3, 4, 5, 6, 111, 222, 333, 444, 555, 666]</span></span><br><span class="line"><span class="built_in">console</span>.log($test1.toJS(), $test2.toJS()); <span class="comment">//[1, 2, 3, 4, 5, 6] [111, 222, 333, 444, 555, 666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> $test2 = Immutable.fromJS(&#123;<span class="attr">b1</span>: <span class="number">22</span>, <span class="attr">b</span>: <span class="number">34</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($test1.concat($test2).toJS()); <span class="comment">//&#123;b: 34, a: Object, c: 3, d: 5, b1: 22&#125; 属性 b 被覆盖</span></span><br><span class="line"><span class="built_in">console</span>.log($test1.toJS(), $test2.toJS()); <span class="comment">//&#123;b: 2, a: &#123;a1: &#123;a5: 333&#125;, c: 3, d: 5&#125; b1: 22, b: 34&#125;</span></span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><strong>1、转换为原生类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 浅层</span></span><br><span class="line"><span class="comment">// toArray</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1234</span>, <span class="number">22</span>]&#125;&#125;]).toArray());<span class="comment">// [1, 2, 3, 4, 5, 6, Map]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">1234</span>, <span class="number">22</span>]]).toArray());<span class="comment">// [1, 2, 3, 4, 5, 6, List]</span></span><br><span class="line"><span class="comment">// toObject</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1234</span>, <span class="number">22</span>]&#125;&#125;]).toObject());<span class="comment">// &#123;0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: Map&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">1234</span>, <span class="number">22</span>]]).toObject());<span class="comment">// &#123;0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: List&#125;</span></span><br><span class="line"><span class="comment">//深层</span></span><br><span class="line"><span class="comment">// 就是一直在用的 toJS(); 不到万不得已，尽量不用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 浅层</span></span><br><span class="line"><span class="comment">// toArray</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).toArray());<span class="comment">// [2, Map, 3, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).toArray());<span class="comment">// [2, List, 3, 5]</span></span><br><span class="line"><span class="comment">// toObject</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).toObject());<span class="comment">// &#123;b: 2, a: Map, c: 3, d: 5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]&#125;).toObject());<span class="comment">// &#123;b: 2, a: List&#125;</span></span><br><span class="line"><span class="comment">//深层</span></span><br><span class="line"><span class="comment">// 就是一直在用的 toJS(); 不到万不得已，尽量不用。</span></span><br></pre></td></tr></table></figure><p><strong>2、转换为其他ImmutableJS数据类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toMap()</span></span><br><span class="line"><span class="comment">// toOrderedMap()</span></span><br><span class="line"><span class="comment">// toSet()</span></span><br><span class="line"><span class="comment">// toOrderedSet()</span></span><br><span class="line"><span class="comment">// toList()</span></span><br><span class="line"><span class="comment">// toStack()</span></span><br></pre></td></tr></table></figure><h2 id="七、和React-Redux-架构的结合"><a href="#七、和React-Redux-架构的结合" class="headerlink" title="七、和React Redux 架构的结合"></a>七、和React Redux 架构的结合</h2><blockquote><p>利用 <code>immutable.js</code> 不可变的特性，可以极大的优化<code>React render</code>的冗余执行。<code>React</code> 官方提供的<code>PureRenderMixin</code>是浅比较</p></blockquote><p><strong>1、immutable-pure-render-decorator</strong></p><blockquote><p>专门针对<code>immutable</code>的<code>PureRenderMixin</code>，用来装饰<code>React</code>组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;React&#125; <span class="keyword">from</span> <span class="string">'base'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pureRenderDecorator <span class="keyword">from</span> <span class="string">'../../../widgets/libs/immutable-pure-render-decorator'</span>;</span><br><span class="line"></span><br><span class="line">@pureRenderDecorator</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PartA</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="comment">// 舍弃React.addons.PureRenderMixin</span></span><br><span class="line">        <span class="comment">// this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件PartA，render执行了'</span>);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">this</span>.props.data;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;section&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;p&gt;我是组件PartA&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;p&gt;&#123;data.toJSON ? JSON.stringify(data.toJSON()) : data&#125;&lt;/</span>p&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>section&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、优化shouldComponentUpdate()</strong></p><blockquote><p>我们都知道官方提供的<code>React.addons.PureRenderMixin</code>提供的<code>shouldComponentUpdate()</code>，只能进行浅比较，对于引用类型<code>Object</code>、<code>Array</code>比较无力，而如果使用<code>Immutable</code>的<code>Map</code>和<code>List</code>替换<code>Object</code>、<code>Array</code>，则可以使用<code>Immutable.is()</code>来比较两个引用类型，从而补充了<code>React.addons.PureRenderMixin</code>的漏洞。</p></blockquote><p><strong>3、高阶组件封装</strong></p><blockquote><p>对于使用<code>immutable.js</code>的项目，在应用公共组件的时候，由于公共组件的内部实现一定是原<code>生</code>JS<code>数据，所以我们只能传递原生</code>JS<code>数据到公共组件，但是如果转换成了原生</code>JS<code>数据，就又会出现&quot;</code>React.addons.PureRenderMixin<code>提供的</code>shouldComponentUpdate()`是浅比较”问题，对此可以使用下面的高阶组件进行封装</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;React&#125; <span class="keyword">from</span> <span class="string">'base'</span>;</span><br><span class="line"><span class="comment">// 通过Immutable.is 封装过的 shouldComponentUpdate</span></span><br><span class="line"><span class="keyword">import</span> &#123;shouldComponentUpdate&#125; <span class="keyword">from</span> <span class="string">'../immutable-pure-render-decorator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ComposedComponent =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.shouldComponentUpdate = shouldComponentUpdate.bind(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> props = <span class="keyword">this</span>.props.toJS ? <span class="keyword">this</span>.props.toJS() : <span class="keyword">this</span>.props;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ComposedComponent</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...props</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br></pre></td></tr></table></figure><p><strong>3、Demo</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;React&#125; <span class="keyword">from</span> <span class="string">'base'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> highComponent <span class="keyword">from</span> <span class="string">'../../../../widgets/libs/utils/highComponent'</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'../../actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公共组件</span></span><br><span class="line"><span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">'@alife/dialog'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import Immutable from 'immutable';</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        open: state.getIn([<span class="string">'dialog'</span>, <span class="string">'open'</span>]),</span><br><span class="line">        title: state.getIn([<span class="string">'dialog'</span>, <span class="string">'title'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        onPrimaryTouchTap: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">            dispatch(actions.toggleDialog(<span class="literal">false</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">        onSecondaryTouchTap: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">            dispatch(actions.toggleDialog(<span class="literal">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(highComponent(Dialog))<span class="comment">//通过高阶组件封装</span></span><br></pre></td></tr></table></figure><h2 id="八、思维导图总结API"><a href="#八、思维导图总结API" class="headerlink" title="八、思维导图总结API"></a>八、思维导图总结API</h2><ul><li><a href="https://www.processon.com/view/link/5a12c0ede4b0d53d979b33da" target="_blank" rel="noopener">https://www.processon.com/view/link/5a12c0ede4b0d53d979b33da</a></li></ul><h2 id="九、更多参考"><a href="#九、更多参考" class="headerlink" title="九、更多参考"></a>九、更多参考</h2><ul><li>facebook.github.io/immutable-js/docs/</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;整理于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;从问题说起：熟悉
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="Immutable" scheme="http://blog.poetries.top/tags/Immutable/"/>
    
  </entry>
  
  <entry>
    <title>React之React Router 4（十一）</title>
    <link href="http://blog.poetries.top/2017/11/19/react-study-router-4-xx/"/>
    <id>http://blog.poetries.top/2017/11/19/react-study-router-4-xx/</id>
    <published>2017-11-19T16:06:10.000Z</published>
    <updated>2018-02-04T08:40:54.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、React-router-V4版本修改内容及一些坑"><a href="#一、React-router-V4版本修改内容及一些坑" class="headerlink" title="一、React-router V4版本修改内容及一些坑"></a>一、React-router V4版本修改内容及一些坑</h2><p><strong>1、所有组件更改为从react-router-dom导入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v2</span></span><br><span class="line"><span class="keyword">import</span> &#123;Router,Route,hashHistory&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.xx写法</span></span><br><span class="line"><span class="comment">//v4</span></span><br><span class="line"><span class="keyword">import</span> &#123;Route,BrowserRouter <span class="keyword">as</span> Router, Switch&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果搭配redux，你还需要使用react-router-redux</span></span><br></pre></td></tr></table></figure><p><strong>2、将所有<router>替换为<browserrouter></browserrouter></router></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v2</span></span><br><span class="line"> &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;PCIndex&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  &lt;Route path=<span class="string">"/details/:uniqueky"</span> component=&#123;PCNewsDetails&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  &lt;Route path=<span class="string">"/usercenter"</span> component=&#123;PCUserCenter&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"> &lt;<span class="regexp">/Router&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在需要更改为<code>BrowserRouter</code></p></blockquote><ul><li>这里的代码不仅仅是将<code>Router</code>替换为<code>BrowserRouter</code>,而且还把所有的<code>Route</code>中用<code>Switch</code>包裹起来.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v4</span></span><br><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">  &lt;Switch&gt;</span><br><span class="line">   &lt;Route exact path=<span class="string">"/"</span> component=&#123;MobileIndex&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">   &lt;Route path=<span class="string">"/details/:uniqueky"</span> component=&#123;MobileNewsDetails&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">   &lt;Route path=<span class="string">"/usercenter"</span> component=&#123;MobileUserCenter&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>BrowserRouter&gt;</span><br></pre></td></tr></table></figure><p><strong>3、<browserrouter>只能有一个子节点</browserrouter></strong></p><blockquote><p><code>&lt;BroserRouter&gt;</code>只能有一个子节点,所以官网建议的是使用<code>&lt;Switch&gt;</code>进行包裹</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v3</span></span><br><span class="line">&lt;Route path=<span class="string">'/'</span> component=&#123;App&#125;&gt;</span><br><span class="line"> &lt;IndexRoute component=&#123;Home&#125; /&gt;</span><br><span class="line"> &lt;Route path=<span class="string">'about'</span> component=&#123;About&#125; /&gt;</span><br><span class="line"> &lt;Route path=<span class="string">'contact'</span> component=&#123;Contact&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v4</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line"> &lt;Switch&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">'/'</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">'/about'</span> component=&#123;About&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">'/contact'</span> component=&#123;Contact&#125; /&gt;</span><br><span class="line"> &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p><strong>4、最坑的地方:在当前目录下的文件路径不再使用<code>./</code>, 而是直接用<code>/.</code></strong></p><blockquote><p>在进行文件引用的时候 ,<code>./src/js</code>的写法需要更改文’<code>/src/js</code>‘, 这是更改之后最坑的地方</p></blockquote><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><blockquote><p><code>react-router-dom</code>暴露出<code>react-router</code>中暴露的对象与方法，因此你只需要安装并引用<code>react-router-dom</code>即可</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure><h2 id="三、路由器-Router"><a href="#三、路由器-Router" class="headerlink" title="三、路由器(Router)"></a>三、路由器(Router)</h2><blockquote><p>在你开始项目前，你需要决定你使用的路由器的类型。对于网页项目，存在<code>&lt;BrowserRouter&gt;</code>与<code>&lt;HashRouter&gt;</code>两种组件。当存在服务器来管理动态请求时，需要使用<code>&lt;BrowserRouter&gt;</code>组件，而<code>&lt;HashRouter&gt;</code>被用于静态网站。通常，我们更倾向选择<code>&lt;BrowserRouter&gt;</code>，但如果你的网站仅用来呈现静态文件，那么<code>&lt;HashRouter&gt;</code>将会是一个好选择</p></blockquote><h2 id="四、历史-History"><a href="#四、历史-History" class="headerlink" title="四、历史(History)"></a>四、历史(History)</h2><blockquote><p>每个路由器都会创建一个<code>history</code>对象并用其保持追踪当前location[注1]并且在有变化时对网站进行重新渲染。这个<code>history</code>对象保证了<code>React Router</code>提供的其他组件的可用性，所以其他组件必须在<code>router</code>内部渲染。一个<code>React Router</code>组件如果向父级上追溯却找不到<code>router</code>组件，那么这个组件将无法正常工作</p></blockquote><h2 id="五、渲染"><a href="#五、渲染" class="headerlink" title="五、渲染"></a>五、渲染<router></router></h2><blockquote><p>路由器组件无法接受两个及以上的子元素。基于这种限制的存在，创建一个<code>&lt;App&gt;</code>组件来渲染应用其余部分是一个有效的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line">ReactDOM.render((</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/BrowserRouter&gt;</span></span><br><span class="line"><span class="regexp">), document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><h2 id="六、-lt-App-gt"><a href="#六、-lt-App-gt" class="headerlink" title="六、&lt;App&gt;"></a>六、<code>&lt;App&gt;</code></h2><blockquote><p>应用通过<code>&lt;App&gt;</code>组件定义。简化一下，我们将应用拆分成两个部分。<code>&lt;Header&gt;</code>组件包含网站的导航链接。<code>&lt;Main&gt;</code>组件则呈现其余内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &lt;Main /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h2 id="七、路由-Route"><a href="#七、路由-Route" class="headerlink" title="七、路由(Route)"></a>七、路由(Route)</h2><blockquote><p><code>&lt;Route&gt;</code>组件是<code>React Router</code>中主要的结构单元。在任意位置只要匹配了<code>URL</code>的路径名(<code>pathname</code>)你就可以创建<code>&lt;Route&gt;</code>元素进行渲染</p></blockquote><p><strong>1、路径(Path)</strong></p><blockquote><p><code>&lt;Route&gt;</code>接受一个数为<code>string</code>类型的<code>path</code>，该值路由匹配的路径名的类型。例如：<code>&lt;Route path=&#39;/roster&#39;/&gt;</code>会匹配以<code>/roster</code>开头的路径名。在当前<code>path</code>参数与当前<code>location</code>的路径相匹配时，路由就会开始渲染<code>React</code>元素。若不匹配，路由不会进行任何操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">'/roster'</span>/&gt;</span><br><span class="line"><span class="comment">// 当路径名为'/'时, path不匹配</span></span><br><span class="line"><span class="comment">// 当路径名为'/roster'或'/roster/2'时, path匹配</span></span><br><span class="line"><span class="comment">// 当你只想匹配'/roster'时，你需要使用"exact"参数</span></span><br><span class="line"><span class="comment">// 则路由仅匹配'/roster'而不会匹配'/roster/2'</span></span><br><span class="line">&lt;Route exact path=<span class="string">'/roster'</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：在匹配路由时，<code>React Router</code>只关注<code>location</code>的路径名。当<code>URL</code>如下时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.example.com/my-projects/one?extra=false</span></span><br></pre></td></tr></table></figure><ul><li><code>React Router</code>去匹配的只是<code>&#39;/my-projects/one&#39;</code>这一部分</li></ul><p><strong>2、匹配路径</strong></p><blockquote><p><code>path-to-regexp</code>包用来决定<code>route</code>元素的<code>path</code>参数与当前<code>location</code>是否匹配。它将路径字符串编译成正则表达式，并与当前<code>location</code>的路径名进行匹配比较</p></blockquote><ul><li>当路由地址匹配成功后，会创建一个含有以下属性的<code>match</code>对象：<ul><li><code>url</code> ：与当前<code>location</code>路径名所匹配部分</li><li><code>path</code>：路由的地址</li><li><code>isExact</code> ：<code>path</code> 是否等于 <code>pathname</code></li><li><code>params</code>：从<code>path-to-regexp</code>获取的路径中取出的值都被包含在这个对象中</li></ul></li></ul><p>使用<a href="https://pshrmn.github.io/route-tester/#/" target="_blank" rel="noopener">route tester</a>这款工具来对路由与URL进行检验</p><p><strong>3、创建你的路由</strong></p><blockquote><p>可以在路由器(router)组件中的任意位置创建多个<code>&lt;Route&gt;</code>，但通常我们会把它们放在同一个位置。使用<code>&lt;Switch&gt;</code>组件来包裹一组<code>&lt;Route&gt;</code>。<code>&lt;Switch&gt;</code>会遍历自身的子元素（即路由）并对第一个匹配当前路径的元素进行渲染</p></blockquote><ul><li>我们希望匹配一下路径<ul><li><code>/</code>：主页</li><li><code>/roster</code>： 团体列表</li><li><code>/roster/:number</code>：运动员页面，使用运动员的编号作为标识</li><li><code>/schedule</code>：团队的赛程表</li></ul></li></ul><p>为了在应用中能匹配路径，在创建<code>&lt;Route&gt;</code>元素时必须带有需要匹配的<code>path</code>作为参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">'/'</span> component=&#123;Home&#125;/&gt;</span><br><span class="line">  &#123;<span class="comment">/* both /roster and /roster/:number begin with /roster */</span>&#125;</span><br><span class="line">  &lt;Route path=<span class="string">'/roster'</span> component=&#123;Roster&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">'/schedule'</span> component=&#123;Schedule&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4、<code>&lt;Route&gt;</code>是如何渲染的？</strong></p><blockquote><p>当一个路由的<code>path</code>匹配成功后，路由用来确定渲染结果的参数有三种。只需要提供其中一个即可</p></blockquote><ul><li><code>component</code> ： 一个<code>React</code>组件。当带有<code>component</code>参数的<code>route</code>匹配成功后，<code>route</code>会返回一个新的元素，其为<code>component</code>参数所对应的<code>React</code>组件（使用<code>React.createElement</code>创建）。</li><li><code>render</code> ： 一个返回<code>React element</code>的函数。当匹配成功后调用该函数。该过程与传入<code>component</code>参数类似，并且对于行级渲染与需要向元素传入额外参数的操作会更有用。</li><li><code>children</code> ： 一个返回<code>React element</code>的函数。与上述两个参数不同，无论<code>route</code>是否匹配当前<code>location</code>，其都会被渲染</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">'/page'</span> component=&#123;Page&#125; /&gt;</span><br><span class="line"><span class="keyword">const</span> extraProps = &#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;</span><br><span class="line">&lt;Route path=<span class="string">'/page'</span> render=&#123;(props) =&gt; (</span><br><span class="line">  &lt;Page &#123;...props&#125; data=&#123;extraProps&#125;/&gt;</span><br><span class="line">)&#125;/&gt;</span><br><span class="line">&lt;Route path=<span class="string">'/page'</span> children=&#123;(props) =&gt; (</span><br><span class="line">  props.match</span><br><span class="line">    ? <span class="xml"><span class="tag">&lt;<span class="name">Page</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line">    : &lt;EmptyPage &#123;...props&#125;/&gt;</span><br><span class="line">)&#125;/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>通常<code>component</code>参数与<code>render</code>参数被更经常地使用。<code>children</code>参数偶尔会被使用，它更常用在<code>path</code>无法匹配时呈现的’空’状态。在本例中并不会有额外的状态，所以我们将使用<code>&lt;Route&gt;</code>的<code>component</code>参数</p></blockquote><ul><li>通过<code>&lt;Route&gt;</code>渲染的元素会被传入一些参数。分别是<code>match</code>对象，当前<code>location</code>对象以及<code>history</code>对象（由<code>router</code>创建）</li></ul><p><strong>5、<code>&lt;Main&gt;</code></strong></p><blockquote><p>现在我们清楚了根路由的结构，我们需要实际渲染我们的路由。对于这个应用，我们将会在<code>&lt;Main&gt;</code>组件中渲染<code>&lt;Switch&gt;</code>与<code>&lt;Route&gt;</code>，这一过程会将<code>route</code>匹配生成的<code>HTML</code>放在<code>&lt;main&gt;</code>节点中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Switch, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">const</span> Main = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route exact path=<span class="string">'/'</span> component=&#123;Home&#125;/&gt;</span><br><span class="line">      &lt;Route path=<span class="string">'/roster'</span> component=&#123;Roster&#125;/&gt;</span><br><span class="line">      &lt;Route path=<span class="string">'/schedule'</span> component=&#123;Schedule&#125;/&gt;</span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/m</span>ain&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：主页路由包含额外参数。该参数用来保证路由能准确匹配<code>path</code></li></ul><p><strong>6、嵌套路由</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v3</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, IndexRoute, Link, browserHistory &#125; <span class="keyword">from</span> <span class="string">"react-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">props</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">    &lt;header&gt;Our React Router <span class="number">3</span> App&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Link to="/</span><span class="string">"&gt;Home&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;Link to="</span>/user<span class="string">"&gt;User&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;main&gt;</span></span><br><span class="line"><span class="string">      &#123;props.children&#125;</span></span><br><span class="line"><span class="string">    &lt;/main&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const HomePage = () =&gt; &lt;h1&gt;Home Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string">const UsersPage = () =&gt; &lt;h1&gt;User Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const App = () =&gt;</span></span><br><span class="line"><span class="string">  &lt;Router history=&#123;browserHistory&#125;&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path="</span>/<span class="string">" component=&#123;PrimaryLayout&#125;&gt;</span></span><br><span class="line"><span class="string">      &lt;IndexRoute component=&#123;HomePage&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/user<span class="string">" component=&#123;UsersPage&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render(&lt;App /&gt;, document.getElementById("</span>root<span class="string">"));</span></span><br></pre></td></tr></table></figure><ul><li><strong>上面代码中有几个关键的点在 V4 中就不复存在了</strong><ul><li>集中式 <code>router</code></li><li>通过 <code>&lt;Route&gt;</code> 嵌套，实现<code>Layout</code> 和 <code>page</code> 嵌套</li><li><code>Layout</code> 和 <code>page</code>组件 是作为 <code>router</code> 的一部分</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v4</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">    &lt;header&gt;Our React Router <span class="number">4</span> App&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Link to="/</span><span class="string">"&gt;Home&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;Link to="</span>/User<span class="string">"&gt;User&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;main&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/<span class="string">" exact component=&#123;HomePage&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/user<span class="string">" component=&#123;UsersPage&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/main&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const HomePage = () =&gt; &lt;h1&gt;Home Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string">const UsersPage = () =&gt; &lt;h1&gt;User Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const App = () =&gt;</span></span><br><span class="line"><span class="string">  &lt;BrowserRouter&gt;</span></span><br><span class="line"><span class="string">    &lt;PrimaryLayout /&gt;</span></span><br><span class="line"><span class="string">  &lt;/BrowserRouter&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render(&lt;App /&gt;, document.getElementById("</span>root<span class="string">"));</span></span><br></pre></td></tr></table></figure><blockquote><p>首先，<code>V3</code> 中的 <code>router</code> 不在了，在 <code>V3</code> 中，我们是将整个庞大的<code>router</code> 直接丢给 <code>DOM</code>，而在 <code>V4</code> 中，除了 <code>BrowserRouter</code>， 我们丢给 <code>DOM</code> 的是我们的应用程序本身</p></blockquote><ul><li><code>V4</code>中，我们不再使用 <code>{props.children}</code> 来嵌套组件了，替代的 <code>&lt;Route&gt;</code>，当 <code>route</code>匹配时，子组件会被渲染到 <code>&lt;Route&gt;</code>书写的地方</li></ul><ul><li>基本使用</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-cec7efc659034ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>react-router 4.0</code> 对于接受参数采用 <code>{ this.props.match.params.id }</code> 如下例子：<code>&lt;Route path=&quot;list/:id&quot;&gt;&lt;/Router&gt;</code>、 <code>&lt;Link to=&quot;list/123456&quot;&gt;&lt;/Link&gt;</code></p></blockquote><ul><li>一个完整的嵌套路由的例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import &#123; Router, Route, Link, Switch &#125; from ‘react-router‘;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  HashRouter,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  Switch</span><br><span class="line">&#125; <span class="keyword">from</span> ‘react-router-dom‘;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;App&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;&lt;Link to="/</span><span class="string">"&gt;Home&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;Link to="</span>/about<span class="string">"&gt;About&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;Link to="</span>/inbox<span class="string">"&gt;Inbox&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const About = () =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;About&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Home = () =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;Home&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Message = (&#123; match &#125;) =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;new messages&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;&#123;match.params.id&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Inbox = (&#123; match &#125;) =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Topics&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path=&#123;`$&#123;match.url&#125;/messages/:id`&#125; component=&#123;Message&#125;/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ReactDOM.render(</span></span><br><span class="line"><span class="string">  (&lt;HashRouter&gt;</span></span><br><span class="line"><span class="string">    &lt;App&gt;</span></span><br><span class="line"><span class="string">        &lt;Route exact path="</span>/<span class="string">" component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/about<span class="string">" component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/inbox<span class="string">" component=&#123;Inbox&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/App&gt;</span></span><br><span class="line"><span class="string">  &lt;/HashRouter&gt;),</span></span><br><span class="line"><span class="string">  document.getElementById(‘root‘)</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure><ul><li>嵌套布局</li></ul><blockquote><p>方式一</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">      &lt;PrimaryHeader /&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/user"</span> exact component=&#123;BrowseUsersPage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/user/:userId"</span> component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products"</span> exact component=&#123;BrowseProductsPage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products/:productId"</span> component=&#123;ProductProfilePage&#125; /&gt;</span><br><span class="line">          &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/m</span>ain&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><ul><li><code>userId</code> 通过 <code>props.match.params</code> 获取</li><li><code>props.match</code> 赋予给了 <code>&lt;Route&gt;</code> 中的任何组件。</li><li>除此之外，如果组件不通过<code>&lt;Route&gt;</code> 来渲染，要访问 <code>props.match</code>，可以使用 <code>withRouter()</code>高阶组件来实现</li></ul><blockquote><p>方式二</p></blockquote><ul><li>解决了第一种方式中的生命周期，重复渲染的问题</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">      &lt;PrimaryHeader /&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/user"</span> component=&#123;UserSubLayout&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products"</span> component=&#123;ProductSubLayout&#125; /&gt;</span><br><span class="line">          &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/m</span>ain&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><ul><li>我们用 <code>2</code>个 <code>routes</code> 替换之前的 <code>4</code>个<code>routes</code></li><li>注意，这里我们没有再使用 <code>exact</code>，因为，我们希望 <code>/user</code> 可以匹配任何以 <code>/user</code> 开始的 <code>route</code>，<code>products</code> 同理</li></ul><blockquote><p>使用这种策略，子布局也开始承担起了渲染 <code>routes</code> 的责任，现在，<code>UserSubLayout</code> 长这样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayout = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="/u</span>ser<span class="string">" exact component=&#123;BrowseUsersPage&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/user/:userId<span class="string">" component=&#123;UserProfilePage&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;;</span></span><br></pre></td></tr></table></figure><ul><li>但有一点值得注意的是，<code>routes</code> 需要识别它的完整路径才能匹配，为了减少我们的重复输入，我们可以使用 <code>props.match.path</code>来代替</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayout = <span class="function"><span class="params">props</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path=&#123;props.match.path&#125; exact component=&#123;BrowseUsersPage&#125; /</span>&gt;</span><br><span class="line">        &lt;Route</span><br><span class="line">          path=&#123;<span class="string">`<span class="subst">$&#123;props.match.path&#125;</span>/:userId`</span>&#125;</span><br><span class="line">          component=&#123;UserProfilePage&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><p><strong>7、路径参数</strong></p><p>有时路径名中存在我们需要获取的参数。例如，在运动员界面，我们需要获取运动员的编号。我们可以向<code>route</code>的路径字符串中添加<code>path</code>参数</p><ul><li>如<code>&#39;/roster/:number&#39;</code>中<code>:number</code>这种写法意味着<code>/roster/</code>后的路径名将会被获取并存在<code>match.params.number</code>中。例如，路径名<code>&#39;/roster/6&#39;</code>会获取到一个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">number</span>: <span class="string">'6'</span> &#125; <span class="comment">// 注获取的值是字符串类型的</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;Player&gt;</code>组件可以使用<code>props.match.params</code>对象来确定需要被渲染的运动员的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回运动员对象的API</span></span><br><span class="line"><span class="keyword">import</span> PlayerAPI <span class="keyword">from</span> <span class="string">'./PlayerAPI'</span></span><br><span class="line"><span class="keyword">const</span> Player = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> player = PlayerAPI.get(</span><br><span class="line">    <span class="built_in">parseInt</span>(props.match.params.number, <span class="number">10</span>)</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> (!player) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Sorry, but the player was not found<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;player.name&#125; (#&#123;player.number&#125;)&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;player.position&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>除了<code>&lt;Player&gt;</code>组件，我们的页面还包含<code>&lt;FullRoster&gt;</code>, <code>&lt;Schedule&gt;</code>以及 <code>&lt;Home&gt;</code>组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FullRoster = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        PlayerAPI.all().map(<span class="function"><span class="params">p</span> =&gt;</span> (</span><br><span class="line">          &lt;li key=&#123;p.number&#125;&gt;</span><br><span class="line">            &lt;Link to=&#123;<span class="string">`/roster/<span class="subst">$&#123;p.number&#125;</span>`</span>&#125;&gt;&#123;p.name&#125;&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">        ))</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> Schedule = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;<span class="number">6</span>/<span class="number">5</span> @ Evergreens&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;6/</span><span class="number">8</span> vs Kickers&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;6/</span><span class="number">14</span> @ United&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">const Home = () =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h1&gt;Welcome to the Tornadoes Website!&lt;/</span>h1&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h2 id="八、inclusive-routing"><a href="#八、inclusive-routing" class="headerlink" title="八、inclusive routing"></a>八、inclusive routing</h2><blockquote><p>当访问 <code>/user</code> 时，两个组价都会被渲染</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const PrimaryLayout = () =&gt;</span><br><span class="line">  &lt;div className=&quot;primary-layout&quot;&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      Our React Router 4 App</span><br><span class="line">      &lt;Route path=&quot;/user&quot; component=&#123;UsersMenu&#125; /&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">      &lt;Route path=&quot;/user&quot; component=&#123;UsersPage&#125; /&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  &lt;/div&gt;;</span><br></pre></td></tr></table></figure><h2 id="九、Exclusive-Routing"><a href="#九、Exclusive-Routing" class="headerlink" title="九、Exclusive Routing"></a>九、Exclusive Routing</h2><blockquote><p>如果你只想匹配一个 <code>route</code>，那么你也可以使用 <code>&lt;Switch&gt;</code> 来 <code>exclusive routing</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">    &lt;PrimaryHeader /&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/user/add"</span> component=&#123;UserAddPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/user"</span> component=&#123;UsersPage&#125; /&gt;</span><br><span class="line">        &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/m</span>ain&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>&lt;Switch&gt;</code> 中只有一个 <code>&lt;Route&gt;</code> 会被渲染，另外，我们还是要给 <code>HomePage</code>所在 <code>&lt;Route&gt;</code>添加 <code>exact</code>，否则，在访问 <code>/user</code> 或 <code>/user/add</code>的时候还是会匹配到 <code>/</code>，从而，只渲染 H<code>omePage</code></li><li>我们将 <code>/user/add</code>放在 <code>/user</code> 前面是保证正确匹配的很有策略性的一步，因为，<code>/user/add</code>会同时匹配 <code>/user</code>和 <code>/user/add</code></li><li>如果我们给每一个 <code>&lt;Route&gt;</code>都添加一个 <code>exact</code>，那就不用考虑上面的 策略 了，但不管怎样，现在至少知道了我们还有其它选择</li><li><code>&lt;Redirect&gt;</code>组件不用多说，执行浏览器重定向，但它在 <code>&lt;Switch&gt;</code> 中时，<code>&lt;Redirect&gt;</code>组件只会在 <code>routes</code> 匹配不成功的情况下渲染</li></ul><h2 id="十、Index-Routes”-和-“Not-Found”"><a href="#十、Index-Routes”-和-“Not-Found”" class="headerlink" title="十、Index Routes” 和 “Not Found”"></a>十、Index Routes” 和 “Not Found”</h2><blockquote><p><code>V4</code> 中也没有 <code>&lt;IndexRoute&gt;</code>，但 <code>&lt;Route exact&gt;</code>可以实现相同的功能，或者 <code>&lt;Switch&gt;</code>和 <code>&lt;Redirect&gt;</code> 重定向到默认的有效路径，甚至一个找不到的页面</p></blockquote><h2 id="十一、Link"><a href="#十一、Link" class="headerlink" title="十一、Link"></a>十一、Link</h2><blockquote><p>现在，我们应用需要在各个页面间切换。如果使用锚点元素（就是）实现，在每次点击时页面将被重新加载。<code>React Router</code>提供了<code>&lt;Link&gt;</code>组件用来避免这种状况的发生。当你点击<code>&lt;Link&gt;</code>时，<code>URL</code>会更新，组件会被重新渲染，但是页面不会重新加载</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/'</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/roster'</span>&gt;</span>Roster<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/schedule'</span>&gt;</span>Schedule<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>nav&gt;</span><br><span class="line">  &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;Link&gt;</code>使用<code>&#39;to&#39;</code>参数来描述需要定位的页面。它的值即可是字符串也可是<code>location</code>对象（包含<code>pathname</code>，<code>search</code>，<code>hash</code>与<code>state</code>属性）。如果其值为字符床将会被转换为<code>location</code>对象。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;</span> <span class="attr">pathname:</span> '/<span class="attr">roster</span>/<span class="attr">7</span>' &#125;&#125;&gt;</span>Player #7<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十二、Match"><a href="#十二、Match" class="headerlink" title="十二、Match"></a>十二、Match</h2><blockquote><p>正如我们上面看到的那样，<code>props.match</code> 可以帮我们获取 <code>userId</code> 和 <code>routes</code></p></blockquote><ul><li><code>match</code> 对象为我们提供了 <code>match.params</code>，<code>match.path</code>，和 <code>match.url</code> 等属性</li></ul><p><strong>1、match.path vs match.url</strong></p><blockquote><p>最开始，可能觉得这两者的区别并不明显，控制台经常出现相同的输出，比如，访问 /user</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayout = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(match.url)   <span class="comment">// output: "/user"</span></span><br><span class="line">  <span class="built_in">console</span>.log(match.path)  <span class="comment">// output: "/user"</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">      &lt;aside&gt;</span><br><span class="line">        &lt;UserNav /&gt;</span><br><span class="line">      &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path=&#123;match.path&#125; exact component=&#123;BrowseUsersPage&#125; /</span>&gt;</span><br><span class="line">          &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/:userId`</span>&#125; component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>match</code> 在组件的参数中被解构，意思就是我们可以使用 <code>match.path</code> 代替 <code>props.match.path</code></li><li>虽然我们看不到什么明显的差异，但需要明白的是 <code>match.url</code> 是浏览器 <code>URL</code> 的一部分，<code>match.path</code> 是我们为 <code>router</code> 书写的路径</li></ul><p><strong>2、如何选择</strong></p><ul><li>如果我们是构建 route 路径，那么肯定使用 match.path</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserComments = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    UserId: &#123;match.params.userId&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const UserSettings = (&#123; match &#125;) =&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    UserId: &#123;match.params.userId&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserProfilePage = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    User Profile:</span><br><span class="line">    &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.url&#125;</span>/comments`</span>&#125; component=&#123;UserComments&#125; /&gt;</span><br><span class="line">    &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/settings`</span>&#125; component=&#123;UserSettings&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><blockquote><p>然后，我们按下面方式来访问</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/user/<span class="number">5</span>/comments</span><br><span class="line">/user/<span class="number">5</span>/settings</span><br></pre></td></tr></table></figure><ul><li>实践后，我们发现，访问 comments 返回 undefined，访问 settings 返回 5</li></ul><p><strong>3、避免 Match 冲突</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayou = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route exact path=&#123;match.path&#125; component=&#123;BrowseUsersPage&#125; /</span>&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/add`</span>&#125; component=&#123;AddUserPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/:userId/edit`</span>&#125; component=&#123;EditUserPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/:userId`</span>&#125; component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们使用 <code>${match.path}/:userId(\\d+)</code>作为 <code>UserProfilePage</code> 对应的 <code>path</code>，保证 <code>:userId</code> 是一个数字，可以避免与 <code>/users/add</code>的冲突，这样，将其所在的 <code>&lt;Route&gt;</code> 丢到最前面去也能正常访问 <code>add</code> 页面  </p></blockquote><h2 id="十三、Authorized-Route"><a href="#十三、Authorized-Route" class="headerlink" title="十三、Authorized Route"></a>十三、Authorized Route</h2><blockquote><p>在应用程序中限制未登录的用户访问某些路由是非常常见的，还有对于授权和未授权的用户 UI 也可能大不一样，为了解决这样的需求，我们可以考虑为应用程序设置一个主入口</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;BrowserRouter&gt;</span><br><span class="line">          &lt;Switch&gt;</span><br><span class="line">            &lt;Route path=<span class="string">"/auth"</span> component=&#123;UnauthorizedLayout&#125; /&gt;</span><br><span class="line">            &lt;AuthorizedRoute path=<span class="string">"/app"</span> component=&#123;PrimaryLayout&#125; /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>BrowserRouter&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在，我们首先会去选择应用程序在哪个顶级布局中，比如，<code>/auth/login</code> 和 <code>/auth/forgot-password</code> 肯定在 <code>UnauthorizedLayout</code> 中，另外，当用户登陆时，我们将判断所有的路径都有一个 /app 前缀以确保是否登录。如果用户访问 <code>/app</code> 开头的页面但并没有登录，我们将会重定向到登录页面</p></blockquote><h2 id="十四、-lt-Link-gt"><a href="#十四、-lt-Link-gt" class="headerlink" title="十四、&lt;Link&gt;"></a>十四、<code>&lt;Link&gt;</code></h2><blockquote><p>和之前版本没太大区别，重点看下组件属性</p></blockquote><ul><li><code>to（string/object）</code>：要跳转的路径或地址；</li><li><code>replace（bool）</code>：为 <code>true</code> 时，点击链接后将使用新地址替换掉访问历史记录里面的原地址；为 <code>false</code> 时，点击链接后将在原有访问历史记录的基础上添加一个新的纪录。默认为<code>false</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Link组件示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// to为string</span></span><br><span class="line">&lt;Link to=<span class="string">"/about"</span>&gt;关于&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ to为obj</span></span><br><span class="line"><span class="regexp">&lt;Link to=&#123;&#123;</span></span><br><span class="line"><span class="regexp">  pathname: '/</span>courses<span class="string">',</span></span><br><span class="line"><span class="string">  search: '</span>?sort=name<span class="string">',</span></span><br><span class="line">  hash: '#the-hash',</span><br><span class="line">  state: &#123; <span class="attr">fromDashboard</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace </span></span><br><span class="line">&lt;Link to=<span class="string">"/courses"</span> replace /&gt;</span><br></pre></td></tr></table></figure><p><strong><code>&lt;NavLink&gt;</code></strong></p><blockquote><p><code>&lt;NavLink&gt;</code>是<code>&lt;Link&gt;</code> 的一个特定版本, 会在匹配上当前 <code>URL</code> 的时候会给已经渲染的元素添加样式参数，组件属性</p></blockquote><ul><li><code>activeClassName（string）</code>：设置选中样式，默认值为<code>active</code>；</li><li><code>activeStyle（object）</code>：当元素被选中时, 为此元素添加样式；</li><li><code>exact（bool）</code>：为 <code>true</code> 时, 只有当地址完全匹配 <code>class</code> 和 <code>style</code> 才会应用；</li><li><code>strict（bool）</code>：为 <code>true</code> 时，在确定位置是否与当前 <code>URL</code> 匹配时，将考虑位置 - <code>pathname</code> 后的斜线；</li><li><code>isActive（func）</code>：判断链接是否激活的额外逻辑的功能</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// activeClassName选中时样式为selected</span></span><br><span class="line">&lt;NavLink</span><br><span class="line">  to=<span class="string">"/faq"</span></span><br><span class="line">  activeClassName=<span class="string">"selected"</span></span><br><span class="line">&gt;FAQs&lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 选中时样式为activeStyle的样式设置</span></span><br><span class="line"><span class="regexp">&lt;NavLink</span></span><br><span class="line"><span class="regexp">  to="/</span>faq<span class="string">"</span></span><br><span class="line"><span class="string">  activeStyle=&#123;&#123;</span></span><br><span class="line"><span class="string">    fontWeight: 'bold',</span></span><br><span class="line"><span class="string">    color: 'red'</span></span><br><span class="line"><span class="string">   &#125;&#125;</span></span><br><span class="line"><span class="string">&gt;FAQs&lt;/NavLink&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 当event id为奇数的时候，激活链接</span></span><br><span class="line"><span class="string">const oddEvent = (match, location) =&gt; &#123;</span></span><br><span class="line"><span class="string">  if (!match) &#123;</span></span><br><span class="line"><span class="string">    return false</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  const eventID = parseInt(match.params.eventID)</span></span><br><span class="line"><span class="string">  return !isNaN(eventID) &amp;&amp; eventID % 2 === 1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;NavLink</span></span><br><span class="line"><span class="string">  to="</span>/events/<span class="number">123</span><span class="string">"</span></span><br><span class="line"><span class="string">  isActive=&#123;oddEvent&#125;</span></span><br><span class="line"><span class="string">&gt;Event 123&lt;/NavLink&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十五、-lt-Switch-gt"><a href="#十五、-lt-Switch-gt" class="headerlink" title="十五、&lt;Switch&gt;"></a>十五、<code>&lt;Switch&gt;</code></h2><blockquote><p>该组件用来渲染匹配地址的第一个<code>&lt;Route&gt;</code>或者<code>&lt;Redirect&gt;</code>。那么它与使用一堆<code>route</code>又有什么区别呢</p></blockquote><ul><li><code>&lt;Switch&gt;</code>的独特之处是独它仅仅渲染一个路由。相反地，每一个包含匹配地址(<code>location</code>)的<code>&lt;Route&gt;</code>都会被渲染</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/:user"</span> component=&#123;User&#125;/&gt;</span><br><span class="line">  &lt;Route component=&#123;NoMatch&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在，如果我们处于<code>/about</code>，<code>&lt;Switch&gt;</code>将开始寻找匹配的<code>&lt;Route&gt;</code>。<code>&lt;Route path=&quot;/about&quot;/&gt;</code> 将被匹配， <code>&lt;Switch&gt;</code>将停止寻找匹配并渲染<code>&lt;About&gt;</code>。同样，如果我们处于<code>/michael</code>，<code>&lt;User&gt;</code>将被渲染</p></blockquote><h2 id="十六、更多参考"><a href="#十六、更多参考" class="headerlink" title="十六、更多参考"></a>十六、更多参考</h2><ul><li><a href="https://reacttraining.com/react-router/web/guides/philosophy" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/guides/philosophy</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、React-router-V4版本修改内容及一些坑&quot;&gt;&lt;a href=&quot;#一、React-router-V4版本修改内容及一些坑&quot; class=&quot;headerlink&quot; title=&quot;一、React-router V4版本修改内容及一些坑&quot;&gt;&lt;/a&gt;一、Rea
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="Router" scheme="http://blog.poetries.top/tags/Router/"/>
    
  </entry>
  
  <entry>
    <title>Redux之react结合redux实战篇（十）</title>
    <link href="http://blog.poetries.top/2017/11/19/redux-study-combine-react-and-redux/"/>
    <id>http://blog.poetries.top/2017/11/19/redux-study-combine-react-and-redux/</id>
    <published>2017-11-19T08:40:24.000Z</published>
    <updated>2018-02-04T08:40:54.871Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以<code>TODO</code>为例分析，实际开发中并不是那么简单，下面的原型只是开发中的一个原型，这个简单的例子，有助于掌握数据处理传递的原则。</p></blockquote><h2 id="一、定义constants"><a href="#一、定义constants" class="headerlink" title="一、定义constants"></a>一、定义constants</h2><blockquote><p>这一步不是必须的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常量统一保存，便于管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TODO = <span class="string">'ADD_TODO'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TOGGLE_TODO = <span class="string">'TOGGLE_TODO'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_VISIBILITY = <span class="string">'SET_VISIBILITY'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//controll todo wheher show or hide</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SHOW_ALL = <span class="string">'SHOW_ALL'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SHOW_ACTIVE = <span class="string">'SHOW_ACTIVE'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SHOW_COMPLETED = <span class="string">'SHOW_COMPLETED'</span>;</span><br></pre></td></tr></table></figure><h2 id="二、定义actionCreator"><a href="#二、定义actionCreator" class="headerlink" title="二、定义actionCreator"></a>二、定义actionCreator</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义action creator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">'../constant/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextTodo = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addTodo = <span class="function">(<span class="params">text</span>)=&gt;</span>(&#123;</span><br><span class="line">  type:actionType.ADD_TODO,</span><br><span class="line">  id:nextTodo++,</span><br><span class="line">  text</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toggleTodo = <span class="function">(<span class="params">id</span>)=&gt;</span>(&#123;</span><br><span class="line">  type:actionType.TOGGLE_TODO,</span><br><span class="line">  id</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setVisibilityFilter = <span class="function">(<span class="params">filter</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type:actionType.SET_VISIBILITY,</span><br><span class="line">    filter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、定义reducer"><a href="#三、定义reducer" class="headerlink" title="三、定义reducer"></a>三、定义reducer</h2><p><strong>拆分reducer</strong></p><ul><li><code>SetVisibility.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理TODO可见与不可见的reducer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">'../constant/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始状态是自己设置的 后面的状态会转化</span></span><br><span class="line"><span class="comment">// 接收当前状态(设置默认的过滤SHOW_ALL，如设置某些选项卡的active一样)，和action返回新的state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> visibilityFilter = <span class="function">(<span class="params">state=<span class="string">'SHOW_ALL'</span>,action</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> actionType.SET_VISIBILITY:</span><br><span class="line">      <span class="keyword">return</span> action.filter;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>addTodo.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义处理action的reducers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">'../constant/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入当前的状态空数、action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> todos = <span class="function">(<span class="params">state = [],action</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type)&#123; <span class="comment">// 匹配用户触发的actionType</span></span><br><span class="line">    <span class="keyword">case</span> actionType.ADD_TODO:</span><br><span class="line">    <span class="comment">// 合并上一次的状态和当前的状态 返回todos数组</span></span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        ...state,<span class="comment">//把数组展开合并</span></span><br><span class="line">        &#123;</span><br><span class="line">          id:action.id,</span><br><span class="line">          text:action.text,</span><br><span class="line">          completed:<span class="literal">false</span><span class="comment">//用户控制TODO是否处于点击完成的状态 默认false 没点击</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">      <span class="comment">// TODO列表来回切换 遍历add_todo返回的数组 通过completed来判断</span></span><br><span class="line">    <span class="keyword">case</span> actionType.TOGGLE_TODO:</span><br><span class="line">      <span class="keyword">return</span> state.map(<span class="function"><span class="params">todo</span>=&gt;</span>(todo.id===action.id)?&#123;...todo,<span class="attr">completed</span>:!todo.completed&#125;:todo)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;<span class="comment">//匹配不到返回state</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>合并reducer</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并reducers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;todos&#125; <span class="keyword">from</span> <span class="string">'./addTodo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;visibilityFilter&#125; <span class="keyword">from</span> <span class="string">'./SetVisibility'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  todos, <span class="comment">//这些键其实就是被拆分的状态，后面在容器组件中需要通过connect链接</span></span><br><span class="line">  visibilityFilter</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="四、定义store"><a href="#四、定义store" class="headerlink" title="四、定义store"></a>四、定义store</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'../reducers/index'</span>;</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'redux-logger'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建store 用来存储状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(logger) <span class="comment">//处理日志中间件</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="五、结合react-redux"><a href="#五、结合react-redux" class="headerlink" title="五、结合react-redux"></a>五、结合react-redux</h2><blockquote><p>这里忽略展示组件，完成源码看文章结尾</p></blockquote><ul><li>首先我们在<code>container</code>组件中处理好之前分解合并的那些<code>reducer</code>的键，然后在通过<code>connect</code>链接，传递给展示组件的属性使用</li></ul><p><strong>容器组件处理</strong></p><blockquote><p>react-todos/src/container/FilterLink.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理数组过滤</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'../components/Link'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; setVisibilityFilter &#125; <span class="keyword">from</span> <span class="string">'../actions/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的ownProps指的是 FilterLink</span></span><br><span class="line"><span class="comment">// 这里的state其实就是之前分解的todos，visibilityFilter</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, ownProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    active:ownProps.filter === state.visibilityFilter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 如果mapDispatchToProps是一个函数，会得到dispatch和ownProps（容器组件的props对象）两个参数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch, ownProps</span>) =&gt;</span> (&#123;</span><br><span class="line"><span class="comment">// 这里处理对应的事件，传递给展示组件的属性</span></span><br><span class="line">  onClick: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(setVisibilityFilter(ownProps.filter))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Link);</span><br></pre></td></tr></table></figure><ul><li>分析<ul><li>这里通过<code>connect</code>组件把之前<code>reducer</code>处理的那些状态链接</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  todos, <span class="comment">//这些键其实就是被拆分的状态，后面在容器组件中需要通过connect链接</span></span><br><span class="line">  visibilityFilter</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>react-todos/src/container/VisibilityTodoList.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理可见于不可见组件的逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'../components/TodoList'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;toggleTodo&#125; <span class="keyword">from</span> <span class="string">'../actions/index'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">'../constant/index'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(toggleTodo)</span><br><span class="line"></span><br><span class="line"><span class="comment">// todos是返回的数组，filter是过滤的选项如SHOW_ALL SHOW_ACTIVE.</span></span><br><span class="line"><span class="keyword">const</span> getVisibilityTodos = <span class="function">(<span class="params">todos,filter</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(filter) &#123;</span><br><span class="line">    <span class="keyword">case</span> actionType.SHOW_ALL:</span><br><span class="line">      <span class="keyword">return</span> todos;</span><br><span class="line">    <span class="keyword">case</span> actionType.SHOW_ACTIVE:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> !t.completed);</span><br><span class="line">    <span class="keyword">case</span> actionType.SHOW_COMPLETED:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.completed);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'未知的'</span>+filter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把状态转化为展示组件的属性转递过去</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; state 也就是</span></span><br><span class="line"><span class="comment"> * export default CombineReducers(&#123;</span></span><br><span class="line"><span class="comment">  Todos,</span></span><br><span class="line"><span class="comment">  SetVisibility</span></span><br><span class="line"><span class="comment">  *&#125;);</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; ownProps 返回的容器组件本身的参数 如&lt;Filter name="poetries"&gt;此时的ownProps就是name了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    todos: getVisibilityTodos(state.todos,state.visibilityFilter),</span><br><span class="line">    count:state.todos.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果mapDispatchToProps是一个对象，它的每个键名也是对应 UI 组件的同名参数，键值应该是一个函数，会被当作 Action creator ，返回的 Action 会由 Redux 自动发出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">    onTodoClick: toggleTodo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(TodoList)</span><br></pre></td></tr></table></figure><blockquote><p>react-todos/src/container/addTodos.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Addtodo的处逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;addTodo&#125; <span class="keyword">from</span> <span class="string">'../actions/index'</span>;</span><br><span class="line"><span class="keyword">import</span> AddTask <span class="keyword">from</span> <span class="string">'../components/addTodo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, ownProps</span>) =&gt;</span> (&#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">  addTodo:addTodo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(AddTask);</span><br></pre></td></tr></table></figure><blockquote><p>到此分析完毕，展示组件就不分析了，展示组件本身是没有数据的，需要container处理传递</p></blockquote><p><strong>完整的源码</strong></p><blockquote><p><a href="https://github.com/poetries/react-todos" target="_blank" rel="noopener">https://github.com/poetries/react-todos</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;以&lt;code&gt;TODO&lt;/code&gt;为例分析，实际开发中并不是那么简单，下面的原型只是开发中的一个原型，这个简单的例子，有助于掌握数据处理传递的原则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、定义constants&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Redux之源码分析（九）</title>
    <link href="http://blog.poetries.top/2017/11/19/redux-study-source-code-analysis/"/>
    <id>http://blog.poetries.top/2017/11/19/redux-study-source-code-analysis/</id>
    <published>2017-11-19T08:35:24.000Z</published>
    <updated>2018-02-04T08:40:54.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、index-js"><a href="#一、index-js" class="headerlink" title="一、index.js"></a>一、index.js</h2><blockquote><p><a href="https://github.com/reactjs/redux/blob/master/src/index.js" target="_blank" rel="noopener">https://github.com/reactjs/redux/blob/master/src/index.js</a></p></blockquote><ul><li>暴露了几个核心<code>API</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">'./createStore'</span>;</span><br><span class="line"><span class="keyword">import</span> combineReducers <span class="keyword">from</span> <span class="string">'./utils/combineReducers'</span>;</span><br><span class="line"><span class="keyword">import</span> bindActionCreators <span class="keyword">from</span> <span class="string">'./utils/bindActionCreators'</span>;</span><br><span class="line"><span class="keyword">import</span> applyMiddleware <span class="keyword">from</span> <span class="string">'./utils/applyMiddleware'</span>;</span><br><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./utils/compose'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  createStore,</span><br><span class="line">  combineReducers,</span><br><span class="line">  bindActionCreators,</span><br><span class="line">  applyMiddleware,</span><br><span class="line">  compose</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、createStore-js"><a href="#二、createStore-js" class="headerlink" title="二、createStore.js"></a>二、createStore.js</h2><blockquote><p><a href="https://github.com/reactjs/redux/blob/master/src/createStore.js" target="_blank" rel="noopener">https://github.com/reactjs/redux/blob/master/src/createStore.js</a></p></blockquote><ul><li><code>redux.createStore(reducer, initialState)</code> 传入了<code>reducer</code>、<code>initialState</code>，并返回一个<code>store</code>对象</li><li><code>store</code>对象对外暴露了<code>dispatch</code>、<code>getStat</code>e、<code>subscribe</code>方法</li><li><code>store</code>对象通过<code>getState()</code> 获取内部状态</li><li><code>initialState</code>为 <code>store</code> 的初始状态，如果不传则为undefined</li><li><code>store</code>对象通过<code>reducer</code>来修改内部状态</li><li><code>store</code>对象创建的时候，内部会主动调用<code>dispatch({ type: ActionTypes.INIT })</code>;来对内部状态进行初始化。通过断点或者日志打印就可以看到，<code>store</code>对象创建的同时，<code>reducer</code>就会被调用进行初始化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> isPlainObject <span class="keyword">from</span> <span class="string">'./utils/isPlainObject'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * These are private action types reserved by Redux.</span></span><br><span class="line"><span class="comment"> * For any unknown actions, you must return the current state.</span></span><br><span class="line"><span class="comment"> * If the current state is undefined, you must return the initial state.</span></span><br><span class="line"><span class="comment"> * Do not reference these action types directly in your code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 初始化的时候(redux.createStore(reducer, initialState)时),传的action.type 就是这货啦</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> ActionTypes = &#123;</span><br><span class="line">  INIT: <span class="string">'@@redux/INIT'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a Redux store that holds the state tree.</span></span><br><span class="line"><span class="comment"> * The only way to change the data in the store is to call `dispatch()` on it.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * There should only be a single store in your app. To specify how different</span></span><br><span class="line"><span class="comment"> * parts of the state tree respond to actions, you may combine several reducers</span></span><br><span class="line"><span class="comment"> * into a single reducer function by using `combineReducers`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; reducer A function that returns the next state tree, given</span></span><br><span class="line"><span class="comment"> * the current state tree and the action to handle.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; [initialState] The initial state. You may optionally specify it</span></span><br><span class="line"><span class="comment"> * to hydrate the state from the server in universal apps, or to restore a</span></span><br><span class="line"><span class="comment"> * previously serialized user session.</span></span><br><span class="line"><span class="comment"> * If you use `combineReducers` to produce the root reducer function, this must be</span></span><br><span class="line"><span class="comment"> * an object with the same shape as `combineReducers` keys.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns &#123;Store&#125; A Redux store that lets you read the state, dispatch actions</span></span><br><span class="line"><span class="comment"> * and subscribe to changes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, initialState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> reducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the reducer to be a function.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> currentReducer = reducer;</span><br><span class="line">  <span class="keyword">var</span> currentState = initialState;</span><br><span class="line">  <span class="keyword">var</span> listeners = [];</span><br><span class="line">  <span class="keyword">var</span> isDispatching = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Reads the state tree managed by the store.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @returns &#123;any&#125; The current state tree of your application.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 这个方法没什么好讲的,返回当前的state</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Adds a change listener. It will be called any time an action is dispatched,</span></span><br><span class="line"><span class="comment">   * and some part of the state tree may potentially have changed. You may then</span></span><br><span class="line"><span class="comment">   * call `getState()` to read the current state tree inside the callback.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; listener A callback to be invoked on every dispatch.</span></span><br><span class="line"><span class="comment">   * @returns &#123;Function&#125; A function to remove this change listener.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 很常见的监听函数添加方式,当store.dispatch 的时候被调用</span></span><br><span class="line">  <span class="comment">// store.subscribe(listener) 返回一个方法(unscribe),可以用来取消监听</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">    listeners.push(listener);</span><br><span class="line">    <span class="keyword">var</span> isSubscribed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      isSubscribed = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">var</span> index = listeners.indexOf(listener);</span><br><span class="line">      listeners.splice(index, <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Dispatches an action. It is the only way to trigger a state change.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The `reducer` function, used to create the store, will be called with the</span></span><br><span class="line"><span class="comment">   * current state tree and the given `action`. Its return value will</span></span><br><span class="line"><span class="comment">   * be considered the **next** state of the tree, and the change listeners</span></span><br><span class="line"><span class="comment">   * will be notified.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The base implementation only supports plain object actions. If you want to</span></span><br><span class="line"><span class="comment">   * dispatch a Promise, an Observable, a thunk, or something else, you need to</span></span><br><span class="line"><span class="comment">   * wrap your store creating function into the corresponding middleware. For</span></span><br><span class="line"><span class="comment">   * example, see the documentation for the `redux-thunk` package. Even the</span></span><br><span class="line"><span class="comment">   * middleware will eventually dispatch plain object actions using this method.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Object&#125; action A plain object representing “what changed”. It is</span></span><br><span class="line"><span class="comment">   * a good idea to keep actions serializable so you can record and replay user</span></span><br><span class="line"><span class="comment">   * sessions, or use the time travelling `redux-devtools`. An action must have</span></span><br><span class="line"><span class="comment">   * a `type` property which may not be `undefined`. It is a good idea to use</span></span><br><span class="line"><span class="comment">   * string constants for action types.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @returns &#123;Object&#125; For convenience, the same action object you dispatched.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Note that, if you use a custom middleware, it may wrap `dispatch()` to</span></span><br><span class="line"><span class="comment">   * return something else (for example, a Promise you can await).</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 以下情况会报错</span></span><br><span class="line">  <span class="comment">// 1. 传入的action不是一个对象</span></span><br><span class="line">  <span class="comment">// 2. 传入的action是个对象,但是action.type 是undefined</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isPlainObject(action)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Actions must be plain objects. '</span> +</span><br><span class="line">        <span class="string">'Use custom middleware for async actions.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Actions may not have an undefined "type" property. '</span> +</span><br><span class="line">        <span class="string">'Have you misspelled a constant?'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Reducers may not dispatch actions.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 就是这一句啦, 将 currentState 设置为 reducer(currentState, action) 返回的值</span></span><br><span class="line">      currentState = currentReducer(currentState, action);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有监听函数,就顺序调用</span></span><br><span class="line">    listeners.slice().forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后,返回传入的action</span></span><br><span class="line">    <span class="keyword">return</span> action;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Replaces the reducer currently used by the store to calculate the state.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * You might need this if your app implements code splitting and you want to</span></span><br><span class="line"><span class="comment">   * load some of the reducers dynamically. You might also need this if you</span></span><br><span class="line"><span class="comment">   * implement a hot reloading mechanism for Redux.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; nextReducer The reducer for the store to use instead.</span></span><br><span class="line"><span class="comment">   * @returns &#123;void&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</span><br><span class="line">    currentReducer = nextReducer;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// When a store is created, an "INIT" action is dispatched so that every</span></span><br><span class="line">  <span class="comment">// reducer returns their initial state. This effectively populates</span></span><br><span class="line">  <span class="comment">// the initial state tree.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// redux.createStore(reducer, initialState) 的时候, 内部会 自己调用 dispatch(&#123; type: ActionTypes.INIT &#125;);</span></span><br><span class="line">  <span class="comment">// 来完成state的初始化</span></span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回的就是这个东东了,只有四个方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    getState,</span><br><span class="line">    replaceReducer</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、combineReducers-js"><a href="#三、combineReducers-js" class="headerlink" title="三、combineReducers.js"></a>三、combineReducers.js</h2><blockquote><p><a href="https://github.com/reactjs/redux/blob/master/src/combineReducers.js" target="_blank" rel="noopener">https://github.com/reactjs/redux/blob/master/src/combineReducers.js</a></p></blockquote><ul><li><p><code>redux.combineReducers(reducerMap)</code> 的作用在于合并多个<code>reducer</code>函数，并返回一个新的<code>reducer</code>函数。因此可以看到，<code>combineReducers</code> 返回了一个函数，并且该函数的参数同样是<code>state</code>、<code>reducer</code></p></li><li><p>最终 <code>store.getState()</code>返回的<code>state</code>，大概会是这么个样子<code>{todos: xx, filter: xx}</code>。简单的说，<code>state</code>被拆分成了两份，<code>TodoReducer</code>的返回值赋值给了<code>state.todos</code>，<code>FilterReducer</code>的返回值赋值给了<code>state.filter</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TodoReducer</span>(<span class="params">state, action</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FilterReducer</span>(<span class="params">state, action</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> finalReducers = redux.combineReducers(&#123;</span><br><span class="line">    todos: TodoReducer,</span><br><span class="line">    filter: FilterReducer</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>combineReducers(reducerMap)</code> 传入一个对象，并返回一个全新的<code>reducer</code>。调用方式跟跟普通的<code>reducer</code>一样，也是传入<code>state</code>、<code>action</code></li><li>通过<code>combineReducers</code>，对 <code>store</code> 的状态<code>state</code>进行拆分</li><li><code>reducerMap的key</code>，就是 <code>state</code> 的<code>key</code>，而 调用对应的<code>reducer</code>返回的值，则是这个<code>key</code>对应的值。如上面的例子，<code>state.todos == TodoReducer(state, action)</code></li><li><code>redux.createStore(finalReducers, initialState)</code> 调用时，同样会对 <code>state</code>进行初始化。这个初始化跟通过普通的<code>reducer</code>进行初始化没多大区别。举例来说，如果 <code>initialState.todos = undefined</code>，那么 <code>TodoReducer(state, action)</code>初始传入的<code>state</code>就是<code>undefined</code>；如果<code>initialState.todos = []</code>，那么 <code>TodoReducer(state, action)</code>初始传入的<code>state</code>就是<code>[]</code></li><li><code>store.dispatch(action)</code>，<code>finalReducers</code> 里面，会遍历整个<code>reducerMap</code>，依次调用每个<code>reducer</code>，并将每个<code>reducer</code>返回的子<code>state</code>赋给<code>state</code>对应的<code>key</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ActionTypes &#125; <span class="keyword">from</span> <span class="string">'../createStore'</span>;</span><br><span class="line"><span class="keyword">import</span> isPlainObject <span class="keyword">from</span> <span class="string">'../utils/isPlainObject'</span>;</span><br><span class="line"><span class="keyword">import</span> mapValues <span class="keyword">from</span> <span class="string">'../utils/mapValues'</span>;</span><br><span class="line"><span class="keyword">import</span> pick <span class="keyword">from</span> <span class="string">'../utils/pick'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-console */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUndefinedStateErrorMessage</span>(<span class="params">key, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actionType = action &amp;&amp; action.type;</span><br><span class="line">  <span class="keyword">var</span> actionName = actionType &amp;&amp; <span class="string">`"<span class="subst">$&#123;actionType.toString()&#125;</span>"`</span> || <span class="string">'an action'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined handling <span class="subst">$&#123;actionName&#125;</span>. `</span> +</span><br><span class="line">    <span class="string">`To ignore an action, you must explicitly return the previous state.`</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUnexpectedStateKeyWarningMessage</span>(<span class="params">inputState, outputState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reducerKeys = <span class="built_in">Object</span>.keys(outputState);</span><br><span class="line">  <span class="keyword">var</span> argumentName = action &amp;&amp; action.type === ActionTypes.INIT ?</span><br><span class="line">    <span class="string">'initialState argument passed to createStore'</span> :</span><br><span class="line">    <span class="string">'previous state received by the reducer'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (reducerKeys.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">'Store does not have a valid reducer. Make sure the argument passed '</span> +</span><br><span class="line">      <span class="string">'to combineReducers is an object whose values are reducers.'</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(inputState)) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">`The <span class="subst">$&#123;argumentName&#125;</span> has unexpected type of "`</span> +</span><br><span class="line">      (&#123;&#125;).toString.call(inputState).match(<span class="regexp">/\s([a-z|A-Z]+)/</span>)[<span class="number">1</span>] +</span><br><span class="line">      <span class="string">`". Expected argument to be an object with the following `</span> +</span><br><span class="line">      <span class="string">`keys: "<span class="subst">$&#123;reducerKeys.join(<span class="string">'", "'</span>)&#125;</span>"`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> unexpectedKeys = <span class="built_in">Object</span>.keys(inputState).filter(</span><br><span class="line">    key =&gt; reducerKeys.indexOf(key) &lt; <span class="number">0</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (unexpectedKeys.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">`Unexpected <span class="subst">$&#123;unexpectedKeys.length &gt; <span class="number">1</span> ? <span class="string">'keys'</span> : <span class="string">'key'</span>&#125;</span> `</span> +</span><br><span class="line">      <span class="string">`"<span class="subst">$&#123;unexpectedKeys.join(<span class="string">'", "'</span>)&#125;</span>" found in <span class="subst">$&#123;argumentName&#125;</span>. `</span> +</span><br><span class="line">      <span class="string">`Expected to find one of the known reducer keys instead: `</span> +</span><br><span class="line">      <span class="string">`"<span class="subst">$&#123;reducerKeys.join(<span class="string">'", "'</span>)&#125;</span>". Unexpected keys will be ignored.`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对reducer做合法性检测</span></span><br><span class="line"><span class="comment">// store = Redux.createStore(reducer, initialState) --&gt;</span></span><br><span class="line"><span class="comment">// currentState = initialState</span></span><br><span class="line"><span class="comment">// currentState = currentReducer(currentState, action);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 从调用关系,调用时机来看, store.getState() 的初始值(currentState)</span></span><br><span class="line"><span class="comment">// 为 currentReducer(initialState, &#123; type: ActionTypes.INIT &#125;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 1. 在初始化阶段,reducer 传入的 state 值是 undefined,此时,需要返回初始state,且初始state不能为undefined</span></span><br><span class="line"><span class="comment">// 2. 当传入不认识的 actionType 时, reducer(state, &#123;type&#125;) 返回的不能是undefined</span></span><br><span class="line"><span class="comment">// 3. redux/ 这个 namespace 下的action 不应该做处理,直接返回 currentState 就行 (谁运气这么差会去用这种actionType...)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertReducerSanity</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(reducers).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> reducer = reducers[key];</span><br><span class="line">    <span class="keyword">var</span> initialState = reducer(<span class="literal">undefined</span>, &#123; <span class="attr">type</span>: ActionTypes.INIT &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> initialState === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined during initialization. `</span> +</span><br><span class="line">        <span class="string">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class="line">        <span class="string">`explicitly return the initial state. The initial state may `</span> +</span><br><span class="line">        <span class="string">`not be undefined.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> type = <span class="string">'@@redux/PROBE_UNKNOWN_ACTION_'</span> + <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substring(<span class="number">7</span>).split(<span class="string">''</span>).join(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducer(<span class="literal">undefined</span>, &#123; type &#125;) === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined when probed with a random type. `</span> +</span><br><span class="line">        <span class="string">`Don't try to handle <span class="subst">$&#123;ActionTypes.INIT&#125;</span> or other actions in "redux/*" `</span> +</span><br><span class="line">        <span class="string">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class="line">        <span class="string">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class="line">        <span class="string">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class="line">        <span class="string">`action type. The initial state may not be undefined.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Turns an object whose values are different reducer functions, into a single</span></span><br><span class="line"><span class="comment"> * reducer function. It will call every child reducer, and gather their results</span></span><br><span class="line"><span class="comment"> * into a single state object, whose keys correspond to the keys of the passed</span></span><br><span class="line"><span class="comment"> * reducer functions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; reducers An object whose values correspond to different</span></span><br><span class="line"><span class="comment"> * reducer functions that need to be combined into one. One handy way to obtain</span></span><br><span class="line"><span class="comment"> * it is to use ES6 `import * as reducers` syntax. The reducers may never return</span></span><br><span class="line"><span class="comment"> * undefined for any action. Instead, they should return their initial state</span></span><br><span class="line"><span class="comment"> * if the state passed to them was undefined, and the current state for any</span></span><br><span class="line"><span class="comment"> * unrecognized action.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function&#125; A reducer function that invokes every reducer inside the</span></span><br><span class="line"><span class="comment"> * passed object, and builds a state object with the same shape.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回一个对象, key =&gt; value 且value是function(其实就是过滤掉非function)</span></span><br><span class="line">  <span class="keyword">var</span> finalReducers = pick(reducers, (val) =&gt; <span class="keyword">typeof</span> val === <span class="string">'function'</span>);</span><br><span class="line">  <span class="keyword">var</span> sanityError;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 对所有的子reducer 做一些合法性断言,如果没有出错再继续下面的处理</span></span><br><span class="line">    <span class="comment">// 合法性断言的内容,见API注释</span></span><br><span class="line">    assertReducerSanity(finalReducers);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    sanityError = e;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 所有的 key: value,将value置成了undefined,费解...</span></span><br><span class="line">  <span class="comment">// 总而言之, 初始state 就是 类似 &#123;hello: undefined, world: undefined&#125; 的东东</span></span><br><span class="line">  <span class="comment">// TODO 确认这里的逻辑</span></span><br><span class="line">  <span class="keyword">var</span> defaultState = mapValues(finalReducers, () =&gt; <span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = defaultState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sanityError) &#123;</span><br><span class="line">      <span class="keyword">throw</span> sanityError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hasChanged = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 这段代码,简单的说,就是循环一遍 finalState[key] = fn(reducer, key)</span></span><br><span class="line">    <span class="keyword">var</span> finalState = mapValues(finalReducers, (reducer, key) =&gt; &#123;</span><br><span class="line">      <span class="keyword">var</span> previousStateForKey = state[key];</span><br><span class="line">      <span class="keyword">var</span> nextStateForKey = reducer(previousStateForKey, action);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> nextStateForKey === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="comment">// 其他一个reducer返回的是undefined,于是挂啦...抛出错误</span></span><br><span class="line">        <span class="keyword">var</span> errorMessage = getUndefinedStateErrorMessage(key, action);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errorMessage);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 这段代码有些费解,从redux的设计理念上来讲,除了不认识的action type,其他情况都应该返回全新的state</span></span><br><span class="line">      <span class="comment">// 也就是说</span></span><br><span class="line">      <span class="comment">// 1. action type 认识,返回新的state,于是这里 hasChanged 为 true</span></span><br><span class="line">      <span class="comment">// 2. action type 不认识,返回原来的state,于是这里 hasChanged 为 false</span></span><br><span class="line">      <span class="comment">// 3. 不管action type 是否认识, 在原来的state上修改,但是返回的是修改后的state(没有返回拷贝),那么,hasChanged还是为false</span></span><br><span class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;</span><br><span class="line">      <span class="keyword">return</span> nextStateForKey;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开发环境中(于是记得在生产环境去掉)</span></span><br><span class="line">    <span class="comment">// 后面再研究这段代码,毕竟不是主线路...</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> warningMessage = getUnexpectedStateKeyWarningMessage(state, finalState, action);</span><br><span class="line">      <span class="keyword">if</span> (warningMessage) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(warningMessage);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hasChanged ? finalState : state;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、bindActionCreator-js"><a href="#四、bindActionCreator-js" class="headerlink" title="四、bindActionCreator.js"></a>四、bindActionCreator.js</h2><blockquote><p><a href="https://github.com/reactjs/redux/blob/master/src/bindActionCreators.js" target="_blank" rel="noopener">https://github.com/reactjs/redux/blob/master/src/bindActionCreators.js</a></p></blockquote><ul><li>先看个简单例子可能方便理解一些</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addTodo = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'add_todo'</span>,</span><br><span class="line">        text: text</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addTodos = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'add_todos'</span>,</span><br><span class="line">        items: <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reducer = <span class="function"><span class="keyword">function</span>(<span class="params">state, action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add_todo'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.concat(action.text);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add_todos'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.concat(action.items);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = redux.createStore(reducer, []);</span><br><span class="line"><span class="comment">// 注意,关键代码在这里</span></span><br><span class="line"><span class="keyword">var</span> actions = redux.bindActionCreators(&#123;</span><br><span class="line">    addTodo: addTodo,</span><br><span class="line">    addTodos: addTodos</span><br><span class="line">&#125;, store.dispatch);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'add_todo'</span>, <span class="attr">text</span>: <span class="string">'读书'</span>&#125;);</span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'add_todos'</span>, <span class="attr">items</span>: [<span class="string">'阅读'</span>, <span class="string">'睡觉'</span>]&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is: 读书,阅读,睡觉</span></span><br><span class="line"></span><br><span class="line">actions.addTodo(<span class="string">'看电影'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is: 读书,阅读,睡觉,看电影</span></span><br><span class="line"></span><br><span class="line">actions.addTodos([<span class="string">'刷牙'</span>, <span class="string">'洗澡'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is: 读书,阅读,睡觉,看电影,刷牙,洗澡</span></span><br></pre></td></tr></table></figure><ul><li>直接看代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mapValues <span class="keyword">from</span> <span class="string">'../utils/mapValues'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(actionCreator(...args));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Turns an object whose values are action creators, into an object with the</span></span><br><span class="line"><span class="comment"> * same keys, but with every function wrapped into a `dispatch` call so they</span></span><br><span class="line"><span class="comment"> * may be invoked directly. This is just a convenience method, as you can call</span></span><br><span class="line"><span class="comment"> * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For convenience, you can also pass a single function as the first argument,</span></span><br><span class="line"><span class="comment"> * and get a function in return.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Function|Object&#125; actionCreators An object whose values are action</span></span><br><span class="line"><span class="comment"> * creator functions. One handy way to obtain it is to use ES6 `import * as`</span></span><br><span class="line"><span class="comment"> * syntax. You may also pass a single function.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; dispatch The `dispatch` function available on your Redux</span></span><br><span class="line"><span class="comment"> * store.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function|Object&#125; The object mimicking the original object, but with</span></span><br><span class="line"><span class="comment"> * every action creator wrapped into the `dispatch` call. If you passed a</span></span><br><span class="line"><span class="comment"> * function as `actionCreators`, the return value will also be a single</span></span><br><span class="line"><span class="comment"> * function.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 假设 actionCreators === &#123;addTodo: addTodo, removeTodo: removeTodo&#125;</span></span><br><span class="line"><span class="comment">// 简单的来说 bindActionCreators(actionCreators, dispatch)</span></span><br><span class="line"><span class="comment">// 最后返回的是:</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   addTodo: function(text)&#123;</span></span><br><span class="line"><span class="comment">//      dispatch( actionCreators.addTodo(text) );</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   removeTodo: function(text)&#123;</span></span><br><span class="line"><span class="comment">//      dispatch( actionCreators.removeTodo(text) );</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  或者说 actionCreators === addTodo (addTodo 为 actionCreator)</span></span><br><span class="line"><span class="comment">//  最后返回的是</span></span><br><span class="line"><span class="comment">//  function() &#123;</span></span><br><span class="line"><span class="comment">//     dispatch(actionCreators());</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> bindActionCreator(actionCreators, dispatch);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators !== <span class="string">'object'</span> || actionCreators === <span class="literal">null</span> || actionCreators === <span class="literal">undefined</span>) &#123;  <span class="comment">// eslint-disable-line no-eq-null</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`bindActionCreators expected an object or a function, instead received <span class="subst">$&#123;actionCreators === <span class="literal">null</span> ? <span class="string">'null'</span> : <span class="keyword">typeof</span> actionCreators&#125;</span>. `</span> +</span><br><span class="line">      <span class="string">`Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mapValues(actionCreators, actionCreator =&gt;</span><br><span class="line">    bindActionCreator(actionCreator, dispatch)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、applyMiddleware-js"><a href="#五、applyMiddleware-js" class="headerlink" title="五、applyMiddleware.js"></a>五、applyMiddleware.js</h2><blockquote><p><a href="https://github.com/reactjs/redux/blob/master/src/applyMiddleware.js" target="_blank" rel="noopener">https://github.com/reactjs/redux/blob/master/src/applyMiddleware.js</a></p></blockquote><ul><li>中间件应该是<code>redux</code>源码里面最绕的一部分</li></ul><p><strong>例子：redux-thunk</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">thunkMiddleware</span>(<span class="params">&#123; dispatch, getState &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">next</span> =&gt;</span> action =&gt;</span><br><span class="line">    <span class="keyword">typeof</span> action === <span class="string">'function'</span> ?</span><br><span class="line">      action(dispatch, getState) :</span><br><span class="line">      next(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thunkMiddleware</span>(<span class="params">store</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dispatch = store.dispatch;</span><br><span class="line">  <span class="keyword">var</span> getState = store.getState;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">action</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> action === <span class="string">'function'</span> ? action(dispatch, getState) : next(action);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义中间件：logger</strong></p><ul><li>先看<code>logger</code>的实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params">store</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> next(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基本看出中间件声明的模版来了，就是下面这个样子。下面结合<code>applyMiddleware</code>的调用，来说明<code>store</code>、<code>next</code>、<code>action</code> 几个参数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params">store</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'logger: dispatching '</span> + action.type);</span><br><span class="line">            <span class="keyword">var</span> result = next(action);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'logger: next state '</span> + result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>applyMiddleware调用例子</strong></p><ul><li><code>applyMiddleware</code> 的调用方式为 <code>applyMiddleware(...middlewares)(react.createStore)</code>。其实这里直接先创建 <code>store</code>，然后<code>applyMiddleware(...middlewares)(store)</code> 也很容易实现相同的效果，不过作者是故意这样设计的，为了避免在同一个store上多次应用同一个<code>middlerware</code></li><li>中间件顶层的<code>store</code>参数，并不是常规的<code>store</code>，虽然它也有 <code>getState</code>、<code>dispatch</code> 两个方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面的store参数，其实就是这个对象</span></span><br><span class="line"><span class="comment">// 其中，store 为内部的store，我们在外面 storeWithMiddleWare.dipatch的时候，内部实现是转成 store.dispatch</span></span><br><span class="line"><span class="comment">// 此外，可以看到 middlewareAPI.dispatch 方法，是最终封装后的dispatch（千万注意，如果在中间件内部 调用 store.dispatch，可能导致死循环 ）</span></span><br><span class="line"><span class="keyword">var</span> middlewareAPI = &#123;</span><br><span class="line">  getState: store.getState,</span><br><span class="line">  <span class="comment">// 最后面, dispatch 被覆盖, 变成包装后的 dispatch 方法</span></span><br><span class="line">  dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>第二层的next函数，其实是一个“dispatch”方法</li><li>storeWithMiddleWare.dispatch(action) 的时候，会顺序进入各个中间件（按照定义时的顺序）。从当前的例子来看，大约如下，其实就是柯里化啦</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">storeWithMiddleWare.dispatch(action) --&gt; logger(store)(next)(action) --&gt; timer(store)(next)(action) --&gt; store.dispatch(action)</span><br></pre></td></tr></table></figure><p><strong>完整的示例代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> state===<span class="string">'undefined'</span>) state = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add_todo'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.concat(action.text);</span><br><span class="line">        <span class="keyword">default</span>: </span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'add_todo'</span>,</span><br><span class="line">        text: text</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的 store，并不是 redux.createStore(reducer, initialState) 出来的 store</span></span><br><span class="line"><span class="comment">// 而是 &#123;getState: store.getState, dispatch: function() &#123; store.dispatch(action); &#125;&#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params">store</span>)</span>&#123;    </span><br><span class="line">    <span class="comment">//     </span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'logger: dispatching '</span> + action.type);</span><br><span class="line">            <span class="keyword">var</span> result = next(action);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'logger: next state '</span> + result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">store</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'timer: dispatching '</span> + action.type);</span><br><span class="line">            <span class="keyword">var</span> result = next(action);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'timer: next state '</span> + result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createStoreWidthMiddleware = redux.applyMiddleware(</span><br><span class="line">    logger, </span><br><span class="line">    timer</span><br><span class="line">    )(redux.createStore);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> storeWithMiddleWare = createStoreWidthMiddleware(reducer);</span><br><span class="line">storeWithMiddleWare.subscribe(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'subscribe: state is : '</span> + storeWithMiddleWare.getState());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log( storeWithMiddleWare.dispatch(addTodo(<span class="string">'reading'</span>)) );</span><br></pre></td></tr></table></figure><p><strong>源码解析</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./compose'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a store enhancer that applies middleware to the dispatch method</span></span><br><span class="line"><span class="comment"> * of the Redux store. This is handy for a variety of tasks, such as expressing</span></span><br><span class="line"><span class="comment"> * asynchronous actions in a concise manner, or logging every action payload.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See `redux-thunk` package as an example of the Redux middleware.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Because middleware is potentially asynchronous, this should be the first</span></span><br><span class="line"><span class="comment"> * store enhancer in the composition chain.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that each middleware will be given the `dispatch` and `getState` functions</span></span><br><span class="line"><span class="comment"> * as named arguments.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;...Function&#125; middlewares The middleware chain to be applied.</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function&#125; A store enhancer applying the middleware.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  从调用方法 applyMiddleware(...middlewares)(Redux.createStore) 可以看出</span></span><br><span class="line"><span class="comment">  next 参数实际上是 Redux.createStore. 而 Redux.createStore 的调用方式为 Redux.createStore(reducer, initialState)</span></span><br><span class="line"><span class="comment">  所以 applyMiddleware(...middlewares)</span></span><br><span class="line"><span class="comment">  1. 参数: Redux.createStore</span></span><br><span class="line"><span class="comment">  2. 返回值:一个function, 跟 Redux.createStore 接受的参数一样</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">next</span>) =&gt;</span> (reducer, initialState) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 内部先创建一个store (相当于直接调用 Redux.createStore(reducer, initialState))</span></span><br><span class="line">    <span class="keyword">var</span> store = next(reducer, initialState);</span><br><span class="line">    <span class="comment">// 保存最初始的store.dispatch</span></span><br><span class="line">    <span class="keyword">var</span> dispatch = store.dispatch;</span><br><span class="line">    <span class="keyword">var</span> chain = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      <span class="comment">// 最后面, dispatch 被覆盖, 变成包装后的 dispatch 方法</span></span><br><span class="line">      dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 返回一个数组</span></span><br><span class="line">    <span class="comment">// 贴个例子在这里做参考,redux-thunk</span></span><br><span class="line">    <span class="comment">// function thunkMiddleware(store) &#123;</span></span><br><span class="line">    <span class="comment">//  var dispatch = store.dispatch;</span></span><br><span class="line">    <span class="comment">//  var getState = store.getState;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//  这里的next其实就是dispatch</span></span><br><span class="line">    <span class="comment">//  return function (next) &#123;</span></span><br><span class="line">    <span class="comment">//    return function (action) &#123;</span></span><br><span class="line">    <span class="comment">//      return typeof action === 'function' ? action(dispatch, getState) : next(action);</span></span><br><span class="line">    <span class="comment">//    &#125;;</span></span><br><span class="line">    <span class="comment">//  &#125;;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      chain 是个数组, 参考上面的 middlleware (redux-thunk),可以看到,chain的每个元素为如下形式的function</span></span><br><span class="line"><span class="comment">      并且, 传入的 store.getState 为原始的 store.getState,而 dispatch则是包装后的 dispatch(不是原始的store.dispatch)</span></span><br><span class="line"><span class="comment">      似乎是为了确保, 在每个middleware里调用 dispatch(action), 最终都是 用原始的 store.dispatch(action)</span></span><br><span class="line"><span class="comment">      避免 store.dispatch 被覆盖, 导致middleware 顺序调用的过程中, store.dispatch的值变化 --&gt; store.dispatch 返回的值可能会有不同</span></span><br><span class="line"><span class="comment">      违背 redux 的设计理念</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      这里的 next 则为 原始的 store.dispatch (见下面 compose(...chain)(store.dispatch) )</span></span><br><span class="line"><span class="comment">      function (next) &#123;</span></span><br><span class="line"><span class="comment">        return function (action) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// compose(...chain)(store.dispatch) 返回了一个function</span></span><br><span class="line">    <span class="comment">// 伪代码如下,</span></span><br><span class="line">    <span class="comment">// function (action) &#123;</span></span><br><span class="line">    <span class="comment">//   middleware(store)(store.dispatch);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch);  <span class="comment">// 从右到左, middleware1( middleware2( middleware3(dispatch) ) )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 于是,最终调用 applyMiddleware(...middlewares)(Redux.createStore)</span></span><br><span class="line">    <span class="comment">// 返回的 store, getState,subscribe 方法都是原始的那个 store.getState, store.subscribe</span></span><br><span class="line">    <span class="comment">// 至于dispatch是封装过的</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、index-js&quot;&gt;&lt;a href=&quot;#一、index-js&quot; class=&quot;headerlink&quot; title=&quot;一、index.js&quot;&gt;&lt;/a&gt;一、index.js&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Redux之浅析中间件（八）</title>
    <link href="http://blog.poetries.top/2017/11/19/react-study-middleware/"/>
    <id>http://blog.poetries.top/2017/11/19/react-study-middleware/</id>
    <published>2017-11-19T08:30:24.000Z</published>
    <updated>2018-02-04T08:40:54.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li>在<code>redux</code>里，<code>middleware</code>是发送<code>action</code>和<code>action</code>到达<code>reducer</code>之间的第三方扩展，也就是中间层。也可以这样说，<code>middleware</code>是架在<code>action</code>和<code>store</code>之间的一座桥梁</li><li>在<code>redux</code>里，<code>action</code>仅仅是携带了数据的普通<code>js</code>对象</li></ul><blockquote><p><code>Reducer</code> 拆分可以使组件获取其最小属性(<code>state</code>)，而不需要整个<code>Store</code>。中间件则可以在<code>Action Creator</code> 返回最终可供 <code>dispatch</code> 调用的 <code>action</code> 之前处理各种事情，如异步<code>API</code>调用、日志记录等，是扩展 <code>Redux</code> 功能的一种推荐方式</p></blockquote><ul><li><code>Redux</code> 提供了 <code>applyMiddleware(...middlewares)</code> 来将中间件应用到 <code>createStore</code>。<code>applyMiddleware</code> 会返回一个函数，该函数接收原来的 <code>creatStore</code> 作为参数，返回一个应用了 <code>middlewares</code> 的增强后的 <code>creatStore</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> (reducer, preloadedState, enhancer) =&gt; &#123;</span><br><span class="line">    <span class="comment">//接收createStore参数</span></span><br><span class="line">    <span class="keyword">var</span> store = createStore(reducer, preloadedState, enhancer)</span><br><span class="line">    <span class="keyword">var</span> dispatch = store.dispatch</span><br><span class="line">    <span class="keyword">var</span> chain = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传递给中间件的参数</span></span><br><span class="line">    <span class="keyword">var</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册中间件调用链</span></span><br><span class="line">    chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回经middlewares增强后的createStore</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>未应用中间价之前，创建 <code>store</code> 的方式如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'./reducers/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> store = createStore(reducers);</span><br></pre></td></tr></table></figure><blockquote><p>应用中间价之后，创建 <code>store</code>的方式如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore，applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'./reducers/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createStoreWithMiddleware = applyMiddleware(...middleware)(createStore);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> store = createStoreWithMiddleware(reducers);</span><br></pre></td></tr></table></figure><h2 id="二、为什么要引入middleware"><a href="#二、为什么要引入middleware" class="headerlink" title="二、为什么要引入middleware"></a>二、为什么要引入middleware</h2><ul><li><code>action creator</code>返回的值是这个<code>action</code>类型的对象。然后通过<code>store.dispatch()</code>进行分发</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action ---&gt; dispatcher ---&gt; reducers</span><br></pre></td></tr></table></figure><blockquote><p>如果遇到异步情况，比如点击一个按钮，希望2秒之后更新视图，显示消息“Hi”。我们可能这么写<code>ActionCreator</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> asyncSayActionCreator = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            type: <span class="string">'SAY'</span>,</span><br><span class="line">            message</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这会报错，因为这个<code>asyncSayActionCreator</code>返回的不是一个<code>action</code>，而是一个<code>function</code>。这个返回值无法被<code>reducer</code>识别</p></blockquote><ul><li>也就是说，正常来说，<code>action</code>返回的是一个对象，而不是一个函数。如果返回函数，会出现错误</li><li>　而异步操作呢，需要<code>action</code>的返回值是一个函数。那么咋办呢，所以需要引入中间件<code>middleware</code>,它在中间起到了桥梁的作用，让<code>action</code>的返回值可以是一个函数，从而传到<code>reducer</code>那里。也就是说，中间件是用在<code>action</code>发起之后，<code>reducer</code>接收到之前的这个时间段</li><li>也可以这么说，<code>Middleware</code> 主要是负责改变<code>Store</code>中的<code>dispatch</code>方法，从而能处理不同类型的 <code>action</code> 输入，得到最终的 <code>Javascript Plain Object</code> 形式的 <code>action</code> 对象</li></ul><blockquote><p>因此，上面那个<code>ActionCreator</code>就可以改写为这样：因为<code>action</code>的返回值是一个函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> asyncSayActionCreator = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            dispatch(&#123;</span><br><span class="line">                type: <span class="string">'SAY'</span>,</span><br><span class="line">                message</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1480597-ce57255f3fd73efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>上图表达的是 <code>redux</code> 中一个简单的同步数据流动的场景，点击<code>button</code> 后，在回调中 <code>dispatch</code> 一个 <code>action</code>，<code>reducer</code> 收到<code>action</code> 后，更新 <code>state</code> 并通知 <code>view</code> 重新渲染</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-195f2150c8aebccb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>上面这张图展示了应用<code>middleware</code> 后 <code>redux</code> 处理事件的逻辑，每一个 <code>middleware</code> 处理一个相对独立的业务需求，通过串联不同的 <code>middleware</code>，实现变化多样的的功能。那么问题来了：<ul><li><code>middleware</code> 怎么写？</li><li><code>redux</code>是如何让 <code>middlewares</code> 串联并跑起来的？</li></ul></li></ul><h2 id="三、中间件是如何工作的"><a href="#三、中间件是如何工作的" class="headerlink" title="三、中间件是如何工作的"></a>三、中间件是如何工作的</h2><blockquote><p><code>Middleware</code>的中间件有很多，不过我的这个案例只引用了其中的一个，那就是<code>redux-thunk</code></p></blockquote><ul><li><code>redux-thunk</code>源码如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">thunkMiddleware</span>(<span class="params">&#123; dispatch, getState &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">next</span> =&gt;</span> action =&gt;</span><br><span class="line">    <span class="keyword">typeof</span> action === <span class="string">'function'</span> ?</span><br><span class="line">      action(dispatch, getState) :</span><br><span class="line">      next(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>意思是如果<code>action</code>是一个函数，执行这个<code>action</code>函数，如果不是函数，执行<code>next</code>函数</p></blockquote><h2 id="四、自定义中间件"><a href="#四、自定义中间件" class="headerlink" title="四、自定义中间件"></a>四、自定义中间件</h2><blockquote><p>中间件的签名如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#123; getState, dispatch &#125;) =&gt; <span class="function"><span class="params">next</span> =&gt;</span> action</span><br></pre></td></tr></table></figure><blockquote><p>根据<code>applyMiddleware</code> 源码，每个中间件接收 <code>getState &amp; dispatch</code>作为参数，并返回一个函数，该函数会被传入下一个中间件的 dispatch 方法，并返回一个接收 <code>action</code> 的新函数</p></blockquote><ul><li>应用多个中间件时，中间件调用链中任何一个缺少 <code>next(action)</code> 的调用，都会导致<code>action</code> 执行失败</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callTraceMiddleware</span> (<span class="params">&#123;dispatch,getState&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">next</span>=&gt;</span> action =&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.trace();</span><br><span class="line">        <span class="keyword">return</span> next(action);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后在调用中间件部分添加中间件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStoreWithMiddleware = applyMiddleware(</span><br><span class="line">  thunkMiddleware,</span><br><span class="line">  loggerMiddleware,</span><br><span class="line">  callTraceMiddleware</span><br><span class="line">)(createStore);</span><br></pre></td></tr></table></figure><blockquote><p><code>redux</code>的<code>middleware</code>是对<code>action</code>进行扩展处理，这样丰富了应用需求</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;redux&lt;/code&gt;里，&lt;code&gt;middleware&lt;/code&gt;是发送&lt;code&gt;act
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Redux之action、store、reducer分析（六）</title>
    <link href="http://blog.poetries.top/2017/11/19/redux-study-action-store-reducer/"/>
    <id>http://blog.poetries.top/2017/11/19/redux-study-action-store-reducer/</id>
    <published>2017-11-19T08:10:24.000Z</published>
    <updated>2018-02-04T08:40:54.871Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>redux的核心概念就是store、action、reducer，从调用关系来看如下所示</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(action) --&gt; reducer(state, action) --&gt; final state</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer方法, 传入的参数有两个</span></span><br><span class="line"><span class="comment">// state: 当前的state</span></span><br><span class="line"><span class="comment">// action: 当前触发的行为, &#123;type: 'xx'&#125;</span></span><br><span class="line"><span class="comment">// 返回值: 新的state</span></span><br><span class="line"><span class="keyword">var</span> reducer = <span class="function"><span class="keyword">function</span>(<span class="params">state, action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add_todo'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.concat(action.text);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建store, 传入两个参数</span></span><br><span class="line"><span class="comment">// 参数1: reducer 用来修改state</span></span><br><span class="line"><span class="comment">// 参数2(可选): [], 默认的state值,如果不传, 则为undefined</span></span><br><span class="line"><span class="keyword">var</span> store = redux.createStore(reducer, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 store.getState() 可以获取当前store的状态(state)</span></span><br><span class="line"><span class="comment">// 默认的值是 createStore 传入的第二个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 store.dispatch(action) 来达到修改 state 的目的</span></span><br><span class="line"><span class="comment">// 注意: 在redux里,唯一能够修改state的方法,就是通过 store.dispatch(action)</span></span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'add_todo'</span>, <span class="attr">text</span>: <span class="string">'读书'</span>&#125;);</span><br><span class="line"><span class="comment">// 打印出修改后的state</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is: 读书</span></span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'add_todo'</span>, <span class="attr">text</span>: <span class="string">'写作'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is: 读书,写作</span></span><br></pre></td></tr></table></figure><h2 id="一、store、reducer、action关联"><a href="#一、store、reducer、action关联" class="headerlink" title="一、store、reducer、action关联"></a>一、store、reducer、action关联</h2><p><strong>store</strong></p><ul><li><code>store</code>在这里代表的是数据模型，内部维护了一个<code>state</code>变量</li><li><code>store</code>有两个核心方法，分别是<code>getState</code>、<code>dispatch</code>。前者用来获取<code>store</code>的状态（<code>state</code>），后者用来修改<code>store</code>的状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建store, 传入两个参数</span></span><br><span class="line"><span class="comment">// 参数1: reducer 用来修改state</span></span><br><span class="line"><span class="comment">// 参数2(可选): [], 默认的state值,如果不传, 则为undefined</span></span><br><span class="line"><span class="keyword">var</span> store = redux.createStore(reducer, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 store.getState() 可以获取当前store的状态(state)</span></span><br><span class="line"><span class="comment">// 默认的值是 createStore 传入的第二个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 store.dispatch(action) 来达到修改 state 的目的</span></span><br><span class="line"><span class="comment">// 注意: 在redux里,唯一能够修改state的方法,就是通过 store.dispatch(action)</span></span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'add_todo'</span>, <span class="attr">text</span>: <span class="string">'读书'</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>action</strong></p><ul><li>对行为（如用户行为）的抽象，在<code>redux</code>里是一个普通的<code>js</code>对象</li><li><code>action</code>必须有一个<code>type</code>字段来标识这个行为的类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">type</span>:<span class="string">'add_todo'</span>, <span class="attr">text</span>:<span class="string">'读书'</span>&#125;</span><br><span class="line">&#123;<span class="attr">type</span>:<span class="string">'add_todo'</span>, <span class="attr">text</span>:<span class="string">'写作'</span>&#125;</span><br><span class="line">&#123;<span class="attr">type</span>:<span class="string">'add_todo'</span>, <span class="attr">text</span>:<span class="string">'睡觉'</span>, <span class="attr">time</span>:<span class="string">'晚上'</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>reducer</strong></p><ul><li>一个普通的函数，用来修改<code>store</code>的状态。传入两个参数 <code>state</code>、<code>action</code></li><li>其中，<code>state</code>为当前的状态（可通过<code>store.getState()</code>获得），而<code>action</code>为当前触发的行为（通过<code>store.dispatch(action)</code>调用触发）</li><li><code>reducer(state, action)</code> 返回的值，就是<code>store</code>最新的<code>state</code>值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer方法, 传入的参数有两个</span></span><br><span class="line"><span class="comment">// state: 当前的state</span></span><br><span class="line"><span class="comment">// action: 当前触发的行为, &#123;type: 'xx'&#125;</span></span><br><span class="line"><span class="comment">// 返回值: 新的state</span></span><br><span class="line"><span class="keyword">var</span> reducer = <span class="function"><span class="keyword">function</span>(<span class="params">state, action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add_todo'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.concat(action.text);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、关于actionCreator"><a href="#二、关于actionCreator" class="headerlink" title="二、关于actionCreator"></a>二、关于actionCreator</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actionCreator(args) =&gt; action</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addTodo = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'add_todo'</span>,</span><br><span class="line">        text: text</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">addTodo(<span class="string">'睡觉'</span>);  <span class="comment">// 返回：&#123;type: 'add_todo', text: '睡觉'&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;redux的核心概念就是store、action、reducer，从调用关系来看如下所示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React之组件的生命周期以及属性状态（三）</title>
    <link href="http://blog.poetries.top/2017/11/18/react-study-life-props-state/"/>
    <id>http://blog.poetries.top/2017/11/18/react-study-life-props-state/</id>
    <published>2017-11-18T17:10:24.000Z</published>
    <updated>2018-02-04T08:40:54.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是生命周期"><a href="#一、什么是生命周期" class="headerlink" title="一、什么是生命周期"></a>一、什么是生命周期</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-2921ad93a9b5c407.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>组件本质是状态机，输入确定，输出一定确定</li><li>一个<code>state</code>对应一个<code>render</code>，状态转换的时候会触发不同的函数，从而让开发者有机会做出响应，可以用事件的思路理解状态，但是事件与事件之间没有关联，而状态与状态之间可能会有关联</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-2835e57db9951056.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、初始化阶段"><a href="#二、初始化阶段" class="headerlink" title="二、初始化阶段"></a>二、初始化阶段</h2><p><strong>设置初始的属性与状态</strong></p><ul><li><code>getDefaultProps</code>：设置初始的属性，只在第一次调用，实例之间共享引用</li><li><code>getInitialState</code>：设置初始的状态</li><li><code>componentWillMount</code>：组件将要加载，<code>render</code>之前最后一次修改状态的机会</li><li><code>render</code>：只能访问<code>this.props</code>与<code>this.state</code>，只有一个顶层标签（组件），不允许修改状态和<code>DOM</code>输出</li><li><code>componentDidMount</code>：成功<code>render</code>并渲染完成真实<code>DOM</code>之后出发，可以修改<code>DOM</code>，要操作<code>DOM</code>也必须在这个阶段完成</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 第一步执行顺序：设置初始的属性，指执行一次</span></span><br><span class="line">    getDefaultProps:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name:<span class="string">'一个盒子'</span>,</span><br><span class="line">            title:<span class="string">'box'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 第二步执行顺序：设置初始的状态</span></span><br><span class="line">    getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            sss: <span class="keyword">this</span>.props.name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 第三步执行：组件将要加载的时候，最后一次可以修改状态的机会</span></span><br><span class="line">    componentWillMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            sss:<span class="string">'修改状态'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// alert('componentWillMount')</span></span><br><span class="line">        <span class="comment">// 这里是没有办法获取到这个节点的</span></span><br><span class="line">        <span class="comment">// var box = this.refs.box;</span></span><br><span class="line">        <span class="comment">// alert(box.clientWidth)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 第四步：render渲染</span></span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// console.log(this)</span></span><br><span class="line">        <span class="keyword">var</span> styles = &#123;</span><br><span class="line">            position:<span class="string">'absolute'</span>,</span><br><span class="line">            width: <span class="string">'100px'</span>,</span><br><span class="line">            height: <span class="string">'100px'</span>,</span><br><span class="line">            color: <span class="string">'red'</span>,</span><br><span class="line">            background: <span class="string">'lime'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">&#123;styles&#125;</span>&gt;</span>&#123;this.props.title&#125;&#123;this.state.sss&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 第五步：组件加载完成，只有在这一个阶段，我们才可以操作DOM节点</span></span><br><span class="line">    componentDidMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// alert('componentDidMount')</span></span><br><span class="line">        <span class="comment">// 下面的this指向组件</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">var</span> box = <span class="keyword">this</span>.refs.box;</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">        box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 这个this指向box</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">var</span> This = <span class="keyword">this</span>;</span><br><span class="line">            timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">// 这个this指向window</span></span><br><span class="line">                <span class="comment">// console.log(this)</span></span><br><span class="line">                n++;</span><br><span class="line">                This.style.left = n + <span class="string">'px'</span>;</span><br><span class="line">                This.style.top = n + <span class="string">'px'</span>;</span><br><span class="line">            &#125;,<span class="number">60</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">"app"</span>))</span><br></pre></td></tr></table></figure><h2 id="三、运行中阶段"><a href="#三、运行中阶段" class="headerlink" title="三、运行中阶段    "></a>三、运行中阶段    </h2><ul><li><code>componentWillReceiveProps</code>：父组件修改属性触发，可以修改新属性，修改状态</li><li><code>shouldCompoenntUpdate</code>：组件是否更新，返回<code>false</code>会阻止<code>render</code>调用，<code>render</code>后面的函数都不会执行</li><li><code>componentWillUpdate</code>：不能修改属性与状态，用于日志打印与数据获取</li><li><code>reder</code>：只能访问<code>this.props与this.state</code>，只有一个顶层标签（组件），不允许修改状态和<code>DOM</code>输出</li><li><code>componentDidUpdate</code>：可以修改<code>DOM</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloReact = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 组件将要接收新的属性</span></span><br><span class="line">    componentWillReceiveProps:<span class="function"><span class="keyword">function</span>(<span class="params">newProps</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componnetWillReceiveProps'</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(newProps)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否允许组件更新，返回true或者false，一般不会改变它的默认值：true</span></span><br><span class="line">    shouldComponentUpdate:<span class="function"><span class="keyword">function</span>(<span class="params">newProps,newState</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'shouldComponentUpdate'</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(newProps,newState)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件将要更新</span></span><br><span class="line">    componentWillUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componentWillUpdate'</span>,<span class="number">3</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'render'</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;this.props.name?this.props.name:'React'&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件更新完毕</span></span><br><span class="line">    componentDidUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componentDidUpdate'</span>,<span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChange:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            name:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;HelloReact name=&#123;<span class="keyword">this</span>.state.name&#125;/&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Demo/</span>&gt;,<span class="built_in">document</span>.getElementById(<span class="string">"app"</span>))</span><br></pre></td></tr></table></figure><h2 id="四、销毁阶段"><a href="#四、销毁阶段" class="headerlink" title="四、销毁阶段"></a>四、销毁阶段</h2><ul><li><code>componentWillUnmount</code>：组件将要卸载</li><li>在<code>ReactDOM</code>中提供一个方法<code>unmountComponentAtNode</code>(删除节点的名字)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloReact = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 组件将要接收新的属性</span></span><br><span class="line">    componentWillReceiveProps:<span class="function"><span class="keyword">function</span>(<span class="params">newProps</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componnetWillReceiveProps'</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(newProps)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否允许组件更新，返回true或者false，一般不会改变它的默认值：true</span></span><br><span class="line">    shouldComponentUpdate:<span class="function"><span class="keyword">function</span>(<span class="params">newProps,newState</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'shouldComponentUpdate'</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(newProps,newState)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件将要更新</span></span><br><span class="line">    componentWillUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componentWillUpdate'</span>,<span class="number">3</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'render'</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;this.props.name?this.props.name:'React'&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件更新完毕</span></span><br><span class="line">    componentDidUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componentDidUpdate'</span>,<span class="number">5</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    componentWillUnmount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'BOOOOOOOOOOOOOOOOOM'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChange:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 利用input输入的内容来卸载组件</span></span><br><span class="line">        <span class="keyword">if</span>(e.target.value == <span class="string">'1234'</span>)&#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">"app"</span>))</span><br><span class="line">            <span class="comment">// 写上这个return是为了不执行下面的语句，减少代码执行时间</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            name:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 通过判断state的状态来卸载组件</span></span><br><span class="line">       <span class="comment">/* if( this.state.name == '1234')&#123;</span></span><br><span class="line"><span class="comment">            return &lt;div&gt;1234&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;HelloReact name=&#123;<span class="keyword">this</span>.state.name&#125;/&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Demo/</span>&gt;,<span class="built_in">document</span>.getElementById(<span class="string">"app"</span>))</span><br></pre></td></tr></table></figure><h2 id="五、属性状态"><a href="#五、属性状态" class="headerlink" title="五、属性状态"></a>五、属性状态</h2><p><strong>属性的含义与用法</strong></p><ul><li>含义：<code>props = properties</code></li><li>属性：一个事物的性质与关系，属性往往是与生俱来，无法自己改变的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件传递props</span></span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">title</span>=<span class="string">&#123;</span>"<span class="attr">Demo</span>"&#125;/&gt;</span>,document.getElementById("app"))</span></span><br><span class="line"><span class="xml">``` </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">```javascript</span></span><br><span class="line"><span class="xml">/*</span></span><br><span class="line"><span class="xml">    ...this.props</span></span><br><span class="line"><span class="xml">    props的一个语法糖，可以将父组件中的全部属性复制给子组件，</span></span><br><span class="line"><span class="xml">    如果是这个标签本身拥有的这个属性</span></span><br><span class="line"><span class="xml">*/</span></span><br><span class="line"><span class="xml">var Demo = React.createClass(&#123;</span></span><br><span class="line"><span class="xml">    render:function()&#123;</span></span><br><span class="line">        return (&lt;div&gt;</span><br><span class="line">            &lt;div&gt;&#123;this.props.title&#125;&lt;/div&gt;</span><br><span class="line">            &lt;a &#123;...this.props&#125;&gt;&#123;this.props.title&#125;&lt;/a&gt;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">var props = &#123;</span></span><br><span class="line"><span class="xml">    title:'百度',</span></span><br><span class="line"><span class="xml">    href:'http://www.baidu.com'</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line">ReactDOM.render(&lt;Demo &#123;...props&#125;/&gt;,document.getElementById("app"))</span><br></pre></td></tr></table></figure><ul><li><code>this.props.chilidren</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    this.props.children</span></span><br><span class="line"><span class="comment">    children没有与组件的属性一一对应，表示组件的所有子节点</span></span><br><span class="line"><span class="comment">    一般用于列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(React)</span><br><span class="line"><span class="keyword">var</span> List = React.createClass(&#123;</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">                /*</span></span><br><span class="line"><span class="xml">                    列表项的数量以及内容不确定，在创建模板的时候需确定</span></span><br><span class="line"><span class="xml">                    利用this.props.chilidren从父组件获取需要的内容</span></span><br><span class="line"><span class="xml">                    利用React.Children.map方法进行children的遍历</span></span><br><span class="line"><span class="xml">                */</span></span><br><span class="line"><span class="xml">                React.Children.map(this.props.children,function(child)&#123;</span></span><br><span class="line"><span class="xml">                    return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;List&gt;</span><br><span class="line">        &lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &lt;a href=<span class="string">"http://www.baidu.com"</span>&gt;http:<span class="comment">//www.baidu.com&lt;/a&gt;</span></span><br><span class="line">    &lt;<span class="regexp">/List&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementById("app")</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><ul><li><code>PropTypes</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性验证：PropTypes   </span></span><br><span class="line"><span class="comment">// 验证组件的属性是否符合要求</span></span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    PropTypes:&#123;</span><br><span class="line">        <span class="comment">// 要求title的类型必须是一个字符串</span></span><br><span class="line">        title:React.PropTypes.string.isRequired</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">title</span>=<span class="string">&#123;</span>'<span class="attr">title</span>'&#125; /&gt;</span>,document.getElementById("app"))</span></span><br></pre></td></tr></table></figure><p><strong>属性的两种用法</strong></p><ul><li><code>&lt;Demo   title=?  /&gt;</code> <strong><code>？</code>中的内容可以是</strong><ul><li>字符串</li><li>对象<code>{}</code></li><li>数组<code>{[1,2,3]}</code></li><li>变量<code>{var}</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Demo  &#123;…props&#125; /&gt;</span><br><span class="line"><span class="keyword">var</span>  props = &#123;</span><br><span class="line">one:”<span class="number">123</span>”,</span><br><span class="line">two:”<span class="number">456</span>”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>状态的含义与用法</strong></p><ul><li><code>state</code></li><li>状态：事物所处的状况</li><li>状态是由事物自行处理，不断变化的。父组件与子组件都无法改变他的状态</li></ul><h2 id="状态的用法"><a href="#状态的用法" class="headerlink" title="状态的用法"></a>状态的用法</h2><ul><li><code>getInitialState</code>：初始化状态</li><li><code>setState</code>：更新状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    state 状态的意思，一般在页面中存在状态的变化以及涉及到与状态相关的</span></span><br><span class="line"><span class="comment">        东西的时候会用他</span></span><br><span class="line"><span class="comment">    作用：根据不同的状态显示不同的UI界面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 设置初始的状态</span></span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 这里的值可以是一个boolean，string，function</span></span><br><span class="line">            onOff: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 通过点击事件来修改状态值，原来的状态值需要使用this.state获取</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            onOff: !<span class="keyword">this</span>.state.onOff</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 每一个更新状态的时候，这个render函数都会重新被调用</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;this.state.onOff?'data1':'data2'&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span>,document.getElementById("app"))</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 设置默认的属性</span></span><br><span class="line">    getDefaultProps: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name: <span class="string">'现在的时间是：'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置初始的状态</span></span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    changTime:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 在定时器中使用this.setState的时候需要将这个this变保存起来</span></span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            that.setState(&#123;</span><br><span class="line">                time:<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 每一个更新状态的时候，这个render函数都会重新被调用</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changTime()&#125;</span>&gt;</span>&#123;this.props.name&#125;&#123;this.state.time&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">name</span>=<span class="string">'北京时间'</span>/&gt;</span>,document.getElementById("app"))</span></span><br></pre></td></tr></table></figure><p><strong>属性与状态的对比</strong></p><ul><li>都是纯<code>JS</code>对象，使用<code>｛｝</code>创建的对象</li><li>都会触发<code>render</code>更新</li><li>都具有确定性，给定相同的属性或者是相同的状态，结果是相同的</li></ul><p><strong>属性与状态的区分</strong></p><ul><li>组件在运行时需要修改的数据就是状态</li><li>所有的数据都可以变成状态</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是生命周期&quot;&gt;&lt;a href=&quot;#一、什么是生命周期&quot; class=&quot;headerlink&quot; title=&quot;一、什么是生命周期&quot;&gt;&lt;/a&gt;一、什么是生命周期&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React之事件（四）</title>
    <link href="http://blog.poetries.top/2017/11/18/react-study-event/"/>
    <id>http://blog.poetries.top/2017/11/18/react-study-event/</id>
    <published>2017-11-18T17:10:24.000Z</published>
    <updated>2018-02-04T08:40:54.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、编写事件处理函数"><a href="#一、编写事件处理函数" class="headerlink" title="一、编写事件处理函数"></a>一、编写事件处理函数</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-f2421cc3f2723b77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>在函数体中进行一些操作，常见的有：更新页面内容，更新组件状态，与后台交互</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-269c34a011f83c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>书写方式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;&#125;,</span><br><span class="line">handleChange: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>上面的代码中有的有参数<code>event</code>，有的没有，这个根据自己的需求</li></ul><h2 id="二、绑定事件处理函数"><a href="#二、绑定事件处理函数" class="headerlink" title="二、绑定事件处理函数"></a>二、绑定事件处理函数</h2><ul><li><code>onClick={this,handleClick}</code></li><li>需要注意的是：不要在事件后面添加上一个<code>（）</code></li></ul><p><strong>其他的事件</strong></p><ul><li>触摸事件：<code>onTouchCancel</code>，<code>onTouchEnd</code>，<code>onTouchMove</code>，<code>onTouchStart</code></li><li>键盘事件：<code>onKeyDown</code>，<code>onKeyUp</code>， <code>onKeyPress</code>（前两者的组合）</li><li>表单时间：<code>onChange</code>，<code>onInput</code>，<code>onSubmit</code></li><li>焦点事件：<code>onFocus</code>，<code>onBlur</code></li><li>UI元素事件：<code>onScroll</code></li><li>滚动事件：<code>onWhell</code>（鼠标滚动）</li><li>鼠标事件：<code>onClick</code>，<code>onContextMenu</code>，<code>onDoubleClick</code>……</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    handleClick:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">        <span class="built_in">console</span>.log(e.target)</span><br><span class="line">        <span class="built_in">console</span>.log(e.nativeEvent)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            width: <span class="number">200</span>,</span><br><span class="line">            height: <span class="number">200</span>,</span><br><span class="line">            backgroundColor: <span class="string">'#DDDDDD'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/*handleWheel:function(e)&#123;</span></span><br><span class="line"><span class="comment">        var newColor = (parseInt(this.state.backgroundColor.substr(1),16) + e.deltaY).toString(16)</span></span><br><span class="line"><span class="comment">        newColor = '#' + newColor.toUpperCase()</span></span><br><span class="line"><span class="comment">        console.log(newColor)</span></span><br><span class="line"><span class="comment">        this.setState(&#123;</span></span><br><span class="line"><span class="comment">            backgroundColor:newColor</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">    &#125;,*/</span></span><br><span class="line">    randomColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">256</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'rgb('</span>+r+<span class="string">','</span>+g+<span class="string">','</span>+b+<span class="string">')'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleWheel:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            backgroundColor:<span class="keyword">this</span>.randomColor()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onWheel</span>=<span class="string">&#123;this.handleWheel&#125;</span> <span class="attr">style</span>=<span class="string">&#123;this.state&#125;</span>&gt;</span>这是一个案例，鼠标滚动实现背景颜色的变化<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>))</span><br></pre></td></tr></table></figure><h2 id="三、事件对象"><a href="#三、事件对象" class="headerlink" title="三、事件对象"></a>三、事件对象</h2><p><strong>事件对象的使用</strong></p><ul><li>通用：所有的事件都有事件属性</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-321747a6085cf459.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>键盘：键盘事件拥有的事件属性</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-96f7e6afef18b063.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>鼠标：鼠标事件拥有的事件属性</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-7d4749b26ef496d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>滚动：滚动事件拥有的事件属性<ul><li>为什么会有三个，因为有的设备可以实现三个方向的移动</li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-10a91549777446a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="四、事件与状态关联"><a href="#四、事件与状态关联" class="headerlink" title="四、事件与状态关联"></a>四、事件与状态关联</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inputChange:function(event)&#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">    inputText:event.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总的来说就是使用<code>this.setState</code>来更新状态，而状态的值因为事件的不同会不同</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、编写事件处理函数&quot;&gt;&lt;a href=&quot;#一、编写事件处理函数&quot; class=&quot;headerlink&quot; title=&quot;一、编写事件处理函数&quot;&gt;&lt;/a&gt;一、编写事件处理函数&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Redux之异步Action及操作（七）</title>
    <link href="http://blog.poetries.top/2017/11/18/redux-study-async-operation/"/>
    <id>http://blog.poetries.top/2017/11/18/redux-study-async-operation/</id>
    <published>2017-11-18T17:10:24.000Z</published>
    <updated>2018-02-04T08:40:54.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建同步Action"><a href="#一、创建同步Action" class="headerlink" title="一、创建同步Action"></a>一、创建同步Action</h2><blockquote><p><code>Action</code>是数据从应用传递到 <code>store</code>/<code>state</code> 的载体，也是开启一次完成数据流的开始</p></blockquote><p><strong>普通的action对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">type:<span class="string">'ADD_TODO'</span>,</span><br><span class="line">name:<span class="string">'poetries'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch(action)</span><br></pre></td></tr></table></figure><p><strong>封装action creator</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">actionCreator</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    type:<span class="string">'ADD_TODO'</span>,</span><br><span class="line">    data:data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch(actionCreator(<span class="string">'poetries'</span>))</span><br></pre></td></tr></table></figure><p><strong>bindActionCreators合并</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">name,id</span>)</span>&#123;</span><br><span class="line">reurn &#123;</span><br><span class="line">type:<span class="string">'a'</span>,</span><br><span class="line">name,</span><br><span class="line">id</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">name,id</span>)</span>&#123;</span><br><span class="line">reurn &#123;</span><br><span class="line">type:<span class="string">'b'</span>,</span><br><span class="line">name,</span><br><span class="line">id</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> actions = Redux.bindActionCreators(&#123;a,b&#125;,store.dispatch)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">actions.a(<span class="string">'poetries'</span>,<span class="string">'id001'</span>)</span><br><span class="line">actions.b(<span class="string">'jing'</span>,<span class="string">'id002'</span>)</span><br></pre></td></tr></table></figure><p><strong>action创建的标准</strong></p><blockquote><p>在Flux的架构中，一个Action要符合 FSA(Flux Standard Action) 规范，需要满足如下条件</p></blockquote><ul><li>是一个纯文本对象</li><li>只具备 <code>type</code> 、<code>payload</code>、<code>error</code> 和 <code>meta</code>中的一个或者多个属性。<code>type</code> 字段不可缺省，其它字段可缺省</li><li>若 <code>Action</code> 报错，<code>error</code> 字段不可缺省，切必须为 <code>true</code></li></ul><blockquote><p><code>payload</code> 是一个对象，用作Action携带数据的载体</p></blockquote><p><strong>标准action示例</strong></p><ul><li>A basic Flux Standard Action:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  payload: &#123;</span><br><span class="line">    text: <span class="string">'Do something.'</span>  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>An FSA that represents an error, analogous to a rejected Promise</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  payload: <span class="keyword">new</span> <span class="built_in">Error</span>(),</span><br><span class="line">  error: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="noopener">https://github.com/acdlite/flux-standard-action</a></p></blockquote><ul><li>可以采用如下一个简单的方式检验一个<code>Action</code>是否符合FSA标准</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// every有一个匹配不到返回false</span></span><br><span class="line"><span class="keyword">let</span> isFSA = <span class="built_in">Object</span>.keys(action).every(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  [<span class="string">'payload'</span>,<span class="string">'type'</span>,<span class="string">'error'</span>,<span class="string">'meta'</span>].indexOf(item) &gt;  <span class="number">-1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="二、创建异步action的多种方式"><a href="#二、创建异步action的多种方式" class="headerlink" title="二、创建异步action的多种方式"></a>二、创建异步action的多种方式</h2><blockquote><p>最简单的方式就是使用同步的方式来异步，将原来同步时一个<code>action</code>拆分成多个异步的<code>action</code>的，在异步开始前、异步请求中、异步正常返回（异常）操作分别使用同步的操作，从而模拟出一个异步操作了。这样的方式是比较麻烦的，现在已经有<code>redux-saga</code>等插件来解决这些问题了</p></blockquote><p><strong>异步action的实现方式一：setTimeout</strong></p><blockquote><p><code>redux-thunk</code>中间处理解析</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thunkAction</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    reutrn (dispatch)=&gt;&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            dispatch(&#123;</span><br><span class="line">                type:<span class="string">'ADD_TODO'</span>,</span><br><span class="line">                data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异步action的实现方式二：promise实现异步action</strong></p><blockquote><p><code>redux-promise</code>中间处理这种<code>action</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseAction</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function">(<span class="params">param</span>)=&gt;</span>&#123;</span><br><span class="line">            resolve(&#123;</span><br><span class="line">                type:<span class="string">'ADD_TODO'</span>,</span><br><span class="line">                name</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">param</span>)=&gt;</span>&#123;</span><br><span class="line">        dispatch(action(<span class="string">"action2"</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">param</span>)=&gt;</span>&#123;</span><br><span class="line">        dispatch(action(<span class="string">"action3"</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、redux异步流程"><a href="#三、redux异步流程" class="headerlink" title="三、redux异步流程"></a>三、redux异步流程</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-7ada60211c8b6262.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>首先发起一个action，然后通过中间件，这里为什么要用中间件呢，因为这样<code>dispatch</code>的返回值才能是一个函数。</li><li>通过<code>store.dispatch</code>，将状态的的改变传给<code>store</code>的小弟<code>reducer</code>，<code>reducer</code>根据<code>action</code>的改变，传递新的状态<code>state</code>。</li><li>最后将所有的改变告诉给它的大哥，<code>store</code>。<code>store</code>保存着所有的数据，并将数据注入到组件的顶部，这样组件就可以获得它需要的数据了</li></ul><h2 id="四、Redux异步方案选型"><a href="#四、Redux异步方案选型" class="headerlink" title="四、Redux异步方案选型"></a>四、Redux异步方案选型</h2><p><strong>redux-thunk</strong></p><blockquote><p><code>Redux</code>本身只能处理同步的<code>Action</code>，但可以通过中间件来拦截处理其它类型的<code>action</code>，比如函数(<code>Thunk</code>)，再用回调触发普通<code>Action</code>，从而实现异步处理</p></blockquote><ul><li>发送异步的<code>action</code>其实是被中间件捕获的，函数类型的action就被<code>middleware</code>捕获。至于怎么定义异步的<code>action</code>要看你用哪个中间件，根据他们的实例来定义，这样才会正确解析<code>action</code></li></ul><blockquote><p><code>Redux</code> 本身不处理异步行为，需要依赖中间件。结合 <code>redux-actions</code> 使用，<code>Redux</code> 有两个推荐的异步中间件</p></blockquote><ul><li><code>redux-thunk</code></li><li><code>redux-promise</code></li></ul><blockquote><p><code>redux-thunk</code> 的源码如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</span><br></pre></td></tr></table></figure><blockquote><p>源码可知，<code>action creator</code> 需要返回一个函数给 <code>redux-thunk</code> 进行调用，示例如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> addTodoWithThunk = <span class="function">(<span class="params">val</span>) =&gt;</span> <span class="keyword">async</span> (dispatch, getState)=&gt;&#123;</span><br><span class="line">    <span class="comment">//请求之前的一些处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(val + <span class="string">' thunk'</span>);</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">        type:CONSTANT.ADD_TO_DO_THUNK,</span><br><span class="line">        payload:&#123;</span><br><span class="line">            value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>而它使用起来最大的问题，就是重复的模板代码太多</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//action types</span></span><br><span class="line"><span class="keyword">const</span> GET_DATA = <span class="string">'GET_DATA'</span>,</span><br><span class="line">    GET_DATA_SUCCESS = <span class="string">'GET_DATA_SUCCESS'</span>,</span><br><span class="line">    GET_DATA_FAILED = <span class="string">'GET_DATA_FAILED'</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//action creator</span></span><br><span class="line"><span class="keyword">const</span> getDataAction = <span class="function">(<span class="params">id</span>) =&gt;</span> (dispatch, getState) =&gt; &#123;</span><br><span class="line">        dispatch(&#123;</span><br><span class="line">            type: GET_DATA, </span><br><span class="line">            payload: id</span><br><span class="line">        &#125;)</span><br><span class="line">        api.getData(id) <span class="comment">//注：本文所有示例的api.getData都返回promise对象</span></span><br><span class="line">            .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                dispatch(&#123;</span><br><span class="line">                    type: GET_DATA_SUCCESS,</span><br><span class="line">                    payload: response</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                dispatch(&#123;</span><br><span class="line">                    type: GET_DATA_FAILED,</span><br><span class="line">                    payload: error</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">oldState, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> GET_DATA : </span><br><span class="line">        <span class="keyword">return</span> oldState;</span><br><span class="line">    <span class="keyword">case</span> GET_DATA_SUCCESS : </span><br><span class="line">        <span class="keyword">return</span> successState;</span><br><span class="line">    <span class="keyword">case</span> GET_DATA_FAILED : </span><br><span class="line">        <span class="keyword">return</span> errorState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这已经是最简单的场景了，请注意：我们甚至还没写一行业务逻辑，如果每个异步处理都像这样，重复且无意义的工作会变成明显的阻碍</p></blockquote><ul><li>另一方面，像<code>GET_DATA_SUCCESS</code>、<code>GET_DATA_FAILED</code>这样的字符串声明也非常无趣且易错<br>上例中，<code>GET_DATA</code>这个<code>action</code>并不是多数场景需要的</li></ul><p><strong>redux-promise</strong></p><blockquote><p>由于<code>redux-thunk</code>写起来实在是太麻烦了，社区当然会有其它轮子出现。<code>redux-promise</code>则是其中比较知名的</p></blockquote><ul><li>它自定义了一个<code>middleware</code>，当检测到有<code>action</code>的<code>payload</code>属性是<code>Promise</code>对象时，就会<ul><li>若<code>resolve</code>，触发一个此<code>action</code>的拷贝，但<code>payload</code>为<code>promise</code>的<code>value</code>，并设<code>status</code>属性为<code>&quot;success&quot;</code></li><li>若<code>reject</code>，触发一个此<code>action</code>的拷贝，但<code>payload</code>为<code>promise</code>的<code>reason</code>，并设<code>status</code>属性为<code>&quot;error&quot;</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//action types</span></span><br><span class="line"><span class="keyword">const</span> GET_DATA = <span class="string">'GET_DATA'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//action creator</span></span><br><span class="line"><span class="keyword">const</span> getData = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: GET_DATA,</span><br><span class="line">        payload: api.getData(id) <span class="comment">//payload为promise对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">oldState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> GET_DATA: </span><br><span class="line">            <span class="keyword">if</span> (action.status === <span class="string">'success'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> successState</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">return</span> errorState</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>redux-promise</code>为了精简而做出的妥协非常明显：无法处理乐观更新</p></blockquote><p><strong>场景解析之：乐观更新</strong></p><blockquote><p>多数异步场景都是悲观更新的，即等到请求成功才渲染数据。而与之相对的乐观更新，则是不等待请求成功，在发送请求的同时立即渲染数据</p></blockquote><ul><li>由于乐观更新发生在用户操作时，要处理它，意味着必须有action表示用户的初始动作</li><li>在上面<code>redux-thunk</code>的例子中，我们看到了<code>GET_DATA</code>, <code>GET_DATA_SUCCESS</code>、<code>GET_DATA_FAILED</code>三个<code>action</code>，分别表示初始动作、异步成功和异步失败，其中第一个<code>action</code>使得<code>redux-thunk</code>具备乐观更新的能力</li><li>而在<code>redux-promise</code>中，最初触发的action被中间件拦截然后过滤掉了。原因很简单，<code>redux</code>认可的<code>action</code>对象是 <code>plain JavaScript objects</code>，即简单对象，而在<code>redux-promise</code>中，初始<code>action</code>的<code>payload</code>是个<code>Promise</code></li></ul><p><strong>redux-promise-middleware</strong></p><blockquote><p><code>redux-promise-middleware</code>相比<code>redux-promise</code>，采取了更为温和和渐进式的思路，保留了和<code>redux-thunk</code>类似的三个<code>action</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//action types</span></span><br><span class="line"><span class="keyword">const</span> GET_DATA = <span class="string">'GET_DATA'</span>,</span><br><span class="line">    GET_DATA_PENDING = <span class="string">'GET_DATA_PENDING'</span>,</span><br><span class="line">    GET_DATA_FULFILLED = <span class="string">'GET_DATA_FULFILLED'</span>,</span><br><span class="line">    GET_DATA_REJECTED = <span class="string">'GET_DATA_REJECTED'</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//action creator</span></span><br><span class="line"><span class="keyword">const</span> getData = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: GET_DATA,</span><br><span class="line">        payload: &#123;</span><br><span class="line">            promise: api.getData(id),</span><br><span class="line">            data: id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function"><span class="keyword">function</span>(<span class="params">oldState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> GET_DATA_PENDING :</span><br><span class="line">        <span class="keyword">return</span> oldState; <span class="comment">// 可通过action.payload.data获取id</span></span><br><span class="line">    <span class="keyword">case</span> GET_DATA_FULFILLED : </span><br><span class="line">        <span class="keyword">return</span> successState;</span><br><span class="line">    <span class="keyword">case</span> GET_DATA_REJECTED : </span><br><span class="line">        <span class="keyword">return</span> errorState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、redux异步操作代码演示"><a href="#五、redux异步操作代码演示" class="headerlink" title="五、redux异步操作代码演示"></a>五、redux异步操作代码演示</h2><ul><li>根据官网的async例子分析 <a href="https://github.com/lewis617/react-redux-tutorial/tree/master/redux-examples/async" target="_blank" rel="noopener">https://github.com/lewis617/react-redux-tutorial/tree/master/redux-examples/async</a></li></ul><p><strong>action/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'isomorphic-fetch'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_POSTS = <span class="string">'RECEIVE_POSTS'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取新闻成功的action</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receivePosts</span>(<span class="params">reddit, json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: RECEIVE_POSTS,</span><br><span class="line">    reddit: reddit,</span><br><span class="line">    posts: json.data.children.map(<span class="function"><span class="params">child</span> =&gt;</span>child.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchPosts</span>(<span class="params">subreddit</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">`http://www.subreddit.com/r/<span class="subst">$&#123;subreddit&#125;</span>.json`</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">      .then(<span class="function"><span class="params">json</span> =&gt;</span></span><br><span class="line">        dispatch(receivePosts(subreddit, json))</span><br><span class="line">      )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果需要则开始获取文章</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchPostsIfNeeded</span>(<span class="params">subreddit</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> dispatch(fetchPosts(subreddit))</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> <code>fetchPostsIfNeeded</code>这里就是一个中间件。<code>redux-thunk</code>会拦截<code>fetchPostsIfNeeded</code>这个<code>action</code>，会先发起数据请求，如果成功，就将数据传给<code>action</code>从而到达<code>reducer</code>那里</p></blockquote><p><strong>reducers/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  RECEIVE_POSTS</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'../actions'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">posts</span>(<span class="params">state = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  items: []</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> RECEIVE_POSTS:</span><br><span class="line">      <span class="comment">// Object.assign是ES6的一个语法。合并对象，将对象合并为一个，前后相同的话，后者覆盖强者。详情可以看这里</span></span><br><span class="line">      <span class="comment">//  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        items: action.posts <span class="comment">//数据都存在了这里</span></span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有的reducer结合为一个,传给store</span></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">  postsByReddit</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer</span><br></pre></td></tr></table></figure><blockquote><p>这个跟正常的<code>reducer</code>差不多。判断<code>action</code>的类型，从而根据<code>action</code>的不同类型，返回不同的数据。这里将数据存储在了<code>items</code>这里。这里的<code>reducer</code>只有一个。最后结合成<code>rootReducer</code>,传给<code>store</code></p></blockquote><p><strong>store/configureStore.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> thunkMiddleware <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'redux-logger'</span></span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">'../reducers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createStoreWithMiddleware = applyMiddleware(</span><br><span class="line">  thunkMiddleware,  </span><br><span class="line">  createLogger()  </span><br><span class="line">)(createStore)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params">initialState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> store = createStoreWithMiddleware(rootReducer, initialState)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="comment">// Enable Webpack hot module replacement for reducers</span></span><br><span class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">'../reducers'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> nextRootReducer = <span class="built_in">require</span>(<span class="string">'../reducers'</span>)</span><br><span class="line">      store.replaceReducer(nextRootReducer)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们是如何在 <code>dispatch</code> 机制中引入 <code>Redux Thunk middleware</code> 的呢？<br>我们使用了<code>applyMiddleware()</code></li><li>通过使用指定的 <code>middleware</code>，<code>action creator</code> 除了返回 <code>action</code> 对象外还可以返回函数</li><li>这时，这个 <code>action creator</code> 就成为了 <code>thunk</code></li></ul><p><strong>界面上的调用：在containers/App.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化渲染后触发</span></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch&#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="comment">// 这里可以传两个值，一个是 reactjs 一个是 frontend</span></span><br><span class="line">    dispatch(fetchPostsIfNeeded(<span class="string">'frontend'</span>))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>改变状态的时候也是需要通过<code>dispatch</code>来传递的</p></blockquote><ul><li>数据的获取是通过<code>provider</code>,将<code>store</code>里面的数据注入给组件。让顶级组件提供给他们的子孙组件调用。代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-core/polyfill'</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./containers/App'</span></span><br><span class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'./store/configureStore'</span></span><br><span class="line"><span class="keyword">const</span> store = configureStore()</span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><blockquote><p>这样就完成了<code>redux</code>的异步操作。其实最主要的区别还是<code>action</code>里面还有中间件的调用，其他的地方基本跟同步的<code>redux</code>差不多的。搞懂了中间件，就基本搞懂了<code>redux</code>的异步操作</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-7937f0072593a955.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、创建同步Action&quot;&gt;&lt;a href=&quot;#一、创建同步Action&quot; class=&quot;headerlink&quot; title=&quot;一、创建同步Action&quot;&gt;&lt;/a&gt;一、创建同步Action&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Action&lt;/cod
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React之环境的搭建（一）</title>
    <link href="http://blog.poetries.top/2017/11/18/react-study-build-env/"/>
    <id>http://blog.poetries.top/2017/11/18/react-study-build-env/</id>
    <published>2017-11-18T17:10:24.000Z</published>
    <updated>2018-02-04T08:40:54.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是react"><a href="#一、什么是react" class="headerlink" title="一、什么是react"></a>一、什么是react</h2><ul><li>react是由Facebook开发的一个JavaScript库，而不是一个框架。当时Facebook需要解决一个问题，开发（或者说是构建）一个数据不断变化的大型应用。而数据变化会带来两个很严重的问题</li></ul><h2 id="二、react的特点"><a href="#二、react的特点" class="headerlink" title="二、react的特点"></a>二、react的特点</h2><ul><li>简单：学习简单，代码简单</li><li>声明式（编程）：自动<code>DOM</code>操作</li></ul><blockquote><p><code>React</code>的核心是组件，组件的设计目的是提升代码的复用率、降低测试难度和代码复杂度。</p></blockquote><ul><li>提高代码复用率：组件将数据与逻辑封装</li><li>降低测试难度：组件高内聚低耦合，很容易对单个组件进行测试</li><li>降低代码复杂度：使用<code>JSX</code>语法，更直观的在js文件中看<code>HTML</code>代码，提高可读性</li></ul><h2 id="三、react的开发环境的配置"><a href="#三、react的开发环境的配置" class="headerlink" title="三、react的开发环境的配置"></a>三、react的开发环境的配置</h2><blockquote><p>如果是要直接在<code>HTML</code>上编辑，需要下载<code>react.js</code>与<code>react-dom.js</code>。如果要使用JSX语法，则需要使用转换<code>JSX</code>语法的插件。这里使用<code>brower.js</code>。在线地址：<a href="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js" target="_blank" rel="noopener">https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js</a></p></blockquote><ul><li><code>react.js</code>：<code>react</code>的核心库</li><li><code>react-dom.js</code>：提供操作<code>DOM</code>相关的功能</li><li><code>brower,js</code>：将使用的<code>JSX</code>语法转换成<code>JavaScript</code>语法</li></ul><blockquote><p>注意：三者引用顺序必须是<code>react</code>、<code>react-dom</code>、<code>brower</code></p></blockquote><h2 id="四、React、ReactDOM中有什么"><a href="#四、React、ReactDOM中有什么" class="headerlink" title="四、React、ReactDOM中有什么"></a>四、React、ReactDOM中有什么</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-57b13a4de85f4636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-5139d73619a38b77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="五、yeoman环境"><a href="#五、yeoman环境" class="headerlink" title="五、yeoman环境"></a>五、yeoman环境</h2><blockquote><p><code>yeoman</code>前端脚手架工具</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -g yeoman</span><br></pre></td></tr></table></figure><ul><li><a href="http://yeoman.io/" target="_blank" rel="noopener">http://yeoman.io/</a></li></ul><blockquote><p><a href="https://github.com/react-webpack-generators/generator-react-webpack#readme" target="_blank" rel="noopener">https://github.com/react-webpack-generators/generator-react-webpack#readme</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Make sure both is installed globally</span><br><span class="line">npm install -g yo</span><br><span class="line">npm install -g generator-react-webpack</span><br><span class="line"></span><br><span class="line"># Create a new directory, and `cd` into it:</span><br><span class="line">mkdir my-<span class="keyword">new</span>-project &amp;&amp; cd my-<span class="keyword">new</span>-project</span><br><span class="line"></span><br><span class="line"># Run the generator</span><br><span class="line">yo react-webpack</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Start for development</span><br><span class="line">npm start # or</span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line"># Start the dev-server with the dist version</span><br><span class="line">npm run serve:dist</span><br><span class="line"></span><br><span class="line"># Just build the dist version and copy static files</span><br><span class="line">npm run dist</span><br><span class="line"></span><br><span class="line"># Run unit tests</span><br><span class="line">npm test</span><br><span class="line"></span><br><span class="line"># Auto-run unit tests on file changes</span><br><span class="line">npm run test:watch</span><br><span class="line"></span><br><span class="line"># Lint all files in src (also automatically done AFTER tests are run)</span><br><span class="line">npm run lint</span><br><span class="line"></span><br><span class="line"># Clean up the dist directory</span><br><span class="line">npm run clean</span><br><span class="line"></span><br><span class="line"># Just copy the static assets</span><br><span class="line">npm run copy</span><br></pre></td></tr></table></figure><h2 id="六、React脚手架搭建"><a href="#六、React脚手架搭建" class="headerlink" title="六、React脚手架搭建"></a>六、React脚手架搭建</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm i create-react-app</span><br><span class="line"></span><br><span class="line">create-react-app your-app-name &amp;&amp; cd your-app-name</span><br><span class="line"></span><br><span class="line">npm install </span><br><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是react&quot;&gt;&lt;a href=&quot;#一、什么是react&quot; class=&quot;headerlink&quot; title=&quot;一、什么是react&quot;&gt;&lt;/a&gt;一、什么是react&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;react是由Facebook开发的一个JavaScript库，
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
</feed>
